
// This file implements the TableControl, TableControlRow, and RecordControl classes for the 
// Edit_RepairOrders.aspx page.  The Row or RecordControl classes are the 
// ideal place to add code customizations. For example, you can override the LoadData, 
// CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.

#region "Using statements"    

using Microsoft.VisualBasic;
using BaseClasses.Web.UI.WebControls;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Web.Script.Serialization;

using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using BaseClasses;
using BaseClasses.Data;
using BaseClasses.Utils;
using ReportTools.ReportCreator;
using ReportTools.Shared;

        
using OEMConversion.Business;
using OEMConversion.Data;
using OEMConversion.UI;
using OEMConversion;
		

#endregion

  
namespace OEMConversion.UI.Controls.Edit_RepairOrders
{
  

#region "Section 1: Place your customizations here."

    
//public class AttachmentsTableControlRow : BaseAttachmentsTableControlRow
//{
//      
//        // The BaseAttachmentsTableControlRow implements code for a ROW within the
//        // the AttachmentsTableControl table.  The BaseAttachmentsTableControlRow implements the DataBind and SaveData methods.
//        // The loading of data is actually performed by the LoadData method in the base class of AttachmentsTableControl.
//
//        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
//        // SaveData, GetUIData, and Validate methods.
//        
//}
//

  

//public class AttachmentsTableControl : BaseAttachmentsTableControl
//{
//    // The BaseAttachmentsTableControl class implements the LoadData, DataBind, CreateWhereClause
//    // and other methods to load and display the data in a table control.
//
//    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
//    // The AttachmentsTableControlRow class offers another place where you can customize
//    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.
//
//}
//

  
//public class LedgerInvoicesTableControlRow : BaseLedgerInvoicesTableControlRow
//{
//      
//        // The BaseLedgerInvoicesTableControlRow implements code for a ROW within the
//        // the LedgerInvoicesTableControl table.  The BaseLedgerInvoicesTableControlRow implements the DataBind and SaveData methods.
//        // The loading of data is actually performed by the LoadData method in the base class of LedgerInvoicesTableControl.
//
//        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
//        // SaveData, GetUIData, and Validate methods.
//        
//}
//

  

//public class LedgerInvoicesTableControl : BaseLedgerInvoicesTableControl
//{
//    // The BaseLedgerInvoicesTableControl class implements the LoadData, DataBind, CreateWhereClause
//    // and other methods to load and display the data in a table control.
//
//    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
//    // The LedgerInvoicesTableControlRow class offers another place where you can customize
//    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.
//
//}
//

  
//public class LedgerPaymentsTableControlRow : BaseLedgerPaymentsTableControlRow
//{
//      
//        // The BaseLedgerPaymentsTableControlRow implements code for a ROW within the
//        // the LedgerPaymentsTableControl table.  The BaseLedgerPaymentsTableControlRow implements the DataBind and SaveData methods.
//        // The loading of data is actually performed by the LoadData method in the base class of LedgerPaymentsTableControl.
//
//        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
//        // SaveData, GetUIData, and Validate methods.
//        
//}
//

  

//public class LedgerPaymentsTableControl : BaseLedgerPaymentsTableControl
//{
//    // The BaseLedgerPaymentsTableControl class implements the LoadData, DataBind, CreateWhereClause
//    // and other methods to load and display the data in a table control.
//
//    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
//    // The LedgerPaymentsTableControlRow class offers another place where you can customize
//    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.
//
//}
//

  
public class RepairOrdersRecordControl : BaseRepairOrdersRecordControl
{
      
        // The BaseRepairOrdersRecordControl implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}

  

//public class WarrantyPlansRecordControl : BaseWarrantyPlansRecordControl
//{
//      
//        // The BaseWarrantyPlansRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
public class VendorsRecordControl : BaseVendorsRecordControl
{
      
        // The BaseVendorsRecordControl implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}
//public class TechniciansRecordControl : BaseTechniciansRecordControl
//{
//      
//        // The BaseTechniciansRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class RODetailsRecordControl : BaseRODetailsRecordControl
//{
//      
//        // The BaseRODetailsRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class MakesModelsRecordControl : BaseMakesModelsRecordControl
//{
//      
//        // The BaseMakesModelsRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class LedgerInvoicesRecordControl : BaseLedgerInvoicesRecordControl
//{
//      
//        // The BaseLedgerInvoicesRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class FaultCodesRecordControl : BaseFaultCodesRecordControl
//{
//      
//        // The BaseFaultCodesRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
public class CustomersRecordControl : BaseCustomersRecordControl
{
      
        // The BaseCustomersRecordControl implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}
public class CustomerContactsRecordControl : BaseCustomerContactsRecordControl
{
      
        // The BaseCustomerContactsRecordControl implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}
public class RepairOrdersRecordControl2 : BaseRepairOrdersRecordControl2
{
      
        // The BaseRepairOrdersRecordControl2 implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}
//public class FaultCodesRecordControl1 : BaseFaultCodesRecordControl1
//{
//      
//        // The BaseFaultCodesRecordControl1 implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class FaultCodesTableControl : BaseFaultCodesTableControl
//{
//    // The BaseFaultCodesTableControl class implements the LoadData, DataBind, CreateWhereClause
//    // and other methods to load and display the data in a table control.
//
//    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
//    // The FaultCodesTableControlRow class offers another place where you can customize
//    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.
//
//}
//
//public class FaultCodesTableControlRow : BaseFaultCodesTableControlRow
//{
//      
//        // The BaseFaultCodesTableControlRow implements code for a ROW within the
//        // the FaultCodesTableControl table.  The BaseFaultCodesTableControlRow implements the DataBind and SaveData methods.
//        // The loading of data is actually performed by the LoadData method in the base class of FaultCodesTableControl.
//
//        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
//        // SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class FaultCodesRecordControl : BaseFaultCodesRecordControl
//{
//      
//        // The BaseFaultCodesRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class Repair_FaultRecordControl : BaseRepair_FaultRecordControl
//{
//      
//        // The BaseRepair_FaultRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class RODetailsTableControl : BaseRODetailsTableControl
//{
//    // The BaseRODetailsTableControl class implements the LoadData, DataBind, CreateWhereClause
//    // and other methods to load and display the data in a table control.
//
//    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
//    // The RODetailsTableControlRow class offers another place where you can customize
//    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.
//
//}
//
//public class RODetailsTableControlRow : BaseRODetailsTableControlRow
//{
//      
//        // The BaseRODetailsTableControlRow implements code for a ROW within the
//        // the RODetailsTableControl table.  The BaseRODetailsTableControlRow implements the DataBind and SaveData methods.
//        // The loading of data is actually performed by the LoadData method in the base class of RODetailsTableControl.
//
//        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
//        // SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class RODetailsTableControl1 : BaseRODetailsTableControl1
//{
//    // The BaseRODetailsTableControl1 class implements the LoadData, DataBind, CreateWhereClause
//    // and other methods to load and display the data in a table control.
//
//    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
//    // The RODetailsTableControl1Row class offers another place where you can customize
//    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.
//
//}
//
//public class RODetailsTableControl1Row : BaseRODetailsTableControl1Row
//{
//      
//        // The BaseRODetailsTableControl1Row implements code for a ROW within the
//        // the RODetailsTableControl1 table.  The BaseRODetailsTableControl1Row implements the DataBind and SaveData methods.
//        // The loading of data is actually performed by the LoadData method in the base class of RODetailsTableControl1.
//
//        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
//        // SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class RODetailsTableControl2 : BaseRODetailsTableControl2
//{
//    // The BaseRODetailsTableControl2 class implements the LoadData, DataBind, CreateWhereClause
//    // and other methods to load and display the data in a table control.
//
//    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
//    // The RODetailsTableControl2Row class offers another place where you can customize
//    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.
//
//}
//
//public class RODetailsTableControl2Row : BaseRODetailsTableControl2Row
//{
//      
//        // The BaseRODetailsTableControl2Row implements code for a ROW within the
//        // the RODetailsTableControl2 table.  The BaseRODetailsTableControl2Row implements the DataBind and SaveData methods.
//        // The loading of data is actually performed by the LoadData method in the base class of RODetailsTableControl2.
//
//        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
//        // SaveData, GetUIData, and Validate methods.
//        
//}
//
//public class FaultCodesRecordControl : BaseFaultCodesRecordControl
//{
//      
//        // The BaseFaultCodesRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
public class RepairOrdersRecordControl1 : BaseRepairOrdersRecordControl1
{
      
        // The BaseRepairOrdersRecordControl1 implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}
public class AccessoriesRecordControl : BaseAccessoriesRecordControl
{
      
        // The BaseAccessoriesRecordControl implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}
//public class RODetailsTableControl3 : BaseRODetailsTableControl3
//{
//    // The BaseRODetailsTableControl3 class implements the LoadData, DataBind, CreateWhereClause
//    // and other methods to load and display the data in a table control.
//
//    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
//    // The RODetailsTableControl3Row class offers another place where you can customize
//    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.
//
//}
//
//public class RODetailsTableControl3Row : BaseRODetailsTableControl3Row
//{
//      
//        // The BaseRODetailsTableControl3Row implements code for a ROW within the
//        // the RODetailsTableControl3 table.  The BaseRODetailsTableControl3Row implements the DataBind and SaveData methods.
//        // The loading of data is actually performed by the LoadData method in the base class of RODetailsTableControl3.
//
//        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
//        // SaveData, GetUIData, and Validate methods.
//        
//}
//
public class Repair_order_notesTableControl : BaseRepair_order_notesTableControl
{
    // The BaseRepair_order_notesTableControl class implements the LoadData, DataBind, CreateWhereClause
    // and other methods to load and display the data in a table control.

    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
    // The Repair_order_notesTableControlRow class offers another place where you can customize
    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.

}
public class Repair_order_notesTableControlRow : BaseRepair_order_notesTableControlRow
{
      
        // The BaseRepair_order_notesTableControlRow implements code for a ROW within the
        // the Repair_order_notesTableControl table.  The BaseRepair_order_notesTableControlRow implements the DataBind and SaveData methods.
        // The loading of data is actually performed by the LoadData method in the base class of Repair_order_notesTableControl.

        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
        // SaveData, GetUIData, and Validate methods.
        
}
public class Notification_logTableControl : BaseNotification_logTableControl
{
    // The BaseNotification_logTableControl class implements the LoadData, DataBind, CreateWhereClause
    // and other methods to load and display the data in a table control.

    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
    // The Notification_logTableControlRow class offers another place where you can customize
    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.

}
public class Notification_logTableControlRow : BaseNotification_logTableControlRow
{
      
        // The BaseNotification_logTableControlRow implements code for a ROW within the
        // the Notification_logTableControl table.  The BaseNotification_logTableControlRow implements the DataBind and SaveData methods.
        // The loading of data is actually performed by the LoadData method in the base class of Notification_logTableControl.

        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
        // SaveData, GetUIData, and Validate methods.
        
}
public class DetailsServiceCodes : BaseDetailsServiceCodes
{
    // The BaseDetailsServiceCodes class implements the LoadData, DataBind, CreateWhereClause
    // and other methods to load and display the data in a table control.

    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
    // The DetailsServiceCodesRow class offers another place where you can customize
    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.

}
public class DetailsServiceCodesRow : BaseDetailsServiceCodesRow
{
      
        // The BaseDetailsServiceCodesRow implements code for a ROW within the
        // the DetailsServiceCodes table.  The BaseDetailsServiceCodesRow implements the DataBind and SaveData methods.
        // The loading of data is actually performed by the LoadData method in the base class of DetailsServiceCodes.

        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
        // SaveData, GetUIData, and Validate methods.
        
}
public class DetailsSC2 : BaseDetailsSC2
{
    // The BaseDetailsSC2 class implements the LoadData, DataBind, CreateWhereClause
    // and other methods to load and display the data in a table control.

    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
    // The DetailsSC2Row class offers another place where you can customize
    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.

}
public class DetailsSC2Row : BaseDetailsSC2Row
{
      
        // The BaseDetailsSC2Row implements code for a ROW within the
        // the DetailsSC2 table.  The BaseDetailsSC2Row implements the DataBind and SaveData methods.
        // The loading of data is actually performed by the LoadData method in the base class of DetailsSC2.

        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
        // SaveData, GetUIData, and Validate methods.
        
}
public class DetailsParts : BaseDetailsParts
{
    // The BaseDetailsParts class implements the LoadData, DataBind, CreateWhereClause
    // and other methods to load and display the data in a table control.

    // This is the ideal place to add your code customizations. You can override the LoadData and CreateWhereClause,
    // The DetailsPartsRow class offers another place where you can customize
    // the DataBind, GetUIData, SaveData and Validate methods specific to each row displayed on the table.

}
public class DetailsPartsRow : BaseDetailsPartsRow
{
      
        // The BaseDetailsPartsRow implements code for a ROW within the
        // the DetailsParts table.  The BaseDetailsPartsRow implements the DataBind and SaveData methods.
        // The loading of data is actually performed by the LoadData method in the base class of DetailsParts.

        // This is the ideal place to add your code customizations. For example, you can override the DataBind, 
        // SaveData, GetUIData, and Validate methods.
        
}
//public class ROIncomingRecordControl : BaseROIncomingRecordControl
//{
//      
//        // The BaseROIncomingRecordControl implements the LoadData, DataBind and other
//        // methods to load and display the data in a table control.
//
//        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
//        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
//        
//}
//
public class ROIncomingRecordControl1 : BaseROIncomingRecordControl1
{
      
        // The BaseROIncomingRecordControl1 implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}
public class InvoiceDetails : BaseInvoiceDetails
{
      
        // The BaseInvoiceDetails implements the LoadData, DataBind and other
        // methods to load and display the data in a table control.

        // This is the ideal place to add your code customizations. For example, you can override the LoadData, 
        // CreateWhereClause, DataBind, SaveData, GetUIData, and Validate methods.
        
}
#endregion

  

#region "Section 2: Do not modify this section."
    
    
// Base class for the DetailsPartsRow control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in DetailsPartsRow.
public class BaseDetailsPartsRow : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseDetailsPartsRow()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in DetailsPartsRow.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
                
        }

        // To customize, override this method in DetailsPartsRow.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Show confirmation message on Click
              this.DeleteRowButton2.Attributes.Add("onClick", "return (confirm(\"" + ((BaseApplicationPage)this.Page).GetResourceValue("DeleteRecordConfirm", "OEMConversion") + "\"));");            
        
              // Register the event handlers.

          
                    this.DeleteRowButton2.Click += DeleteRowButton2_Click;
                        
                    this.EditRowButton4.Click += EditRowButton4_Click;
                        
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.RODetails record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = RODetailsTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // Since this is a row in the table, the data for this row is loaded by the 
            // LoadData method of the BaseDetailsParts when the data for the entire
            // table is loaded.
            
            this.DataSource = new RODetailsRecord();
            
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                
                
                Setro_totalprice();
                SetROItemDesc3();
                SetROPartNo3();
                SetROQuantity3();
                SetROSellPrice3();
                SetDeleteRowButton2();
              
                SetEditRowButton4();
              

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void Setro_totalprice()
        {
            
                    
            // Set the ro_totalprice Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ro_totalprice is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the ro_totalprice is non-NULL, then format the value.
                // The Format method will use the Display Format
                string formattedValue = EvaluateFormula("format(ro_totalprice,\"c\")", this.DataSource, @"C");
                    
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ro_totalprice.Text = formattedValue;
                   
            } 
            
            else {
            
                // ro_totalprice is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ro_totalprice.Text = RODetailsTable.ro_totalprice.Format(RODetailsTable.ro_totalprice.DefaultValue, @"C");
            		
            }
                               
        }
                
        public virtual void SetROItemDesc3()
        {
            
                    
            // Set the ROItemDesc Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROItemDesc3 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROItemDescSpecified) {
                								
                // If the ROItemDesc is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROItemDesc);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROItemDesc3.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROItemDesc is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROItemDesc3.Text = RODetailsTable.ROItemDesc.Format(RODetailsTable.ROItemDesc.DefaultValue);
            		
            }
            
            // If the ROItemDesc is NULL or blank, then use the value specified  
            // on Properties.
            if (this.ROItemDesc3.Text == null ||
                this.ROItemDesc3.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.ROItemDesc3.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void SetROPartNo3()
        {
            
                    
            // Set the ROPartNo Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROPartNo3 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROPartNoSpecified) {
                								
                // If the ROPartNo is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
               string formattedValue = "";
               Boolean _isExpandableNonCompositeForeignKey = RODetailsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RODetailsTable.ROPartNo);
               if(_isExpandableNonCompositeForeignKey &&RODetailsTable.ROPartNo.IsApplyDisplayAs)
                                  
                     formattedValue = RODetailsTable.GetDFKA(this.DataSource.ROPartNo.ToString(),RODetailsTable.ROPartNo, null);
                                    
               if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(formattedValue)))
                     formattedValue = this.DataSource.Format(RODetailsTable.ROPartNo);
                                  
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROPartNo3.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROPartNo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROPartNo3.Text = RODetailsTable.ROPartNo.Format(RODetailsTable.ROPartNo.DefaultValue);
            		
            }
            
            // If the ROPartNo is NULL or blank, then use the value specified  
            // on Properties.
            if (this.ROPartNo3.Text == null ||
                this.ROPartNo3.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.ROPartNo3.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void SetROQuantity3()
        {
            
                    
            // Set the ROQuantity Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROQuantity3 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROQuantitySpecified) {
                								
                // If the ROQuantity is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROQuantity);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROQuantity3.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROQuantity is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROQuantity3.Text = RODetailsTable.ROQuantity.Format(RODetailsTable.ROQuantity.DefaultValue);
            		
            }
            
            // If the ROQuantity is NULL or blank, then use the value specified  
            // on Properties.
            if (this.ROQuantity3.Text == null ||
                this.ROQuantity3.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.ROQuantity3.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void SetROSellPrice3()
        {
            
                    
            // Set the ROSellPrice Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROSellPrice3 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROSellPriceSpecified) {
                								
                // If the ROSellPrice is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROSellPrice, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROSellPrice3.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROSellPrice is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROSellPrice3.Text = RODetailsTable.ROSellPrice.Format(RODetailsTable.ROSellPrice.DefaultValue, @"C");
            		
            }
            
            // If the ROSellPrice is NULL or blank, then use the value specified  
            // on Properties.
            if (this.ROSellPrice3.Text == null ||
                this.ROSellPrice3.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.ROSellPrice3.Text = "&nbsp;";
            }
                                     
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        RepairOrdersRecordControl parentCtrl;
      
            parentCtrl = (RepairOrdersRecordControl)MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl");
          
        if (parentCtrl != null && parentCtrl.DataSource == null) {
        // Load the record if it is not loaded yet.
        parentCtrl.LoadData();
        }
        if (parentCtrl == null || parentCtrl.DataSource == null) {
        // Get the error message from the application resource file.
        throw new Exception(Page.GetResourceValue("Err:NoParentRecId", "OEMConversion"));
        }
        
          this.DataSource.RONo = parentCtrl.DataSource.RONo;
        
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
                // Set the DataChanged flag to True for the for the related panels so they get refreshed as well.
                ((DetailsParts)MiscUtils.GetParentControlObject(this, "DetailsParts")).DataChanged = true;
                ((DetailsParts)MiscUtils.GetParentControlObject(this, "DetailsParts")).ResetData = true;
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            Getro_totalprice();
            GetROItemDesc3();
            GetROPartNo3();
            GetROQuantity3();
            GetROSellPrice3();
        }
        
        
        public virtual void Getro_totalprice()
        {
            
        }
                
        public virtual void GetROItemDesc3()
        {
            
        }
                
        public virtual void GetROPartNo3()
        {
            
        }
                
        public virtual void GetROQuantity3()
        {
            
        }
                
        public virtual void GetROSellPrice3()
        {
            
        }
                

      // To customize, override this method in DetailsPartsRow.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            return null;
        
        }
        
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          RODetailsTable.DeleteRecord(pkValue);
          
              
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            ((DetailsParts)MiscUtils.GetParentControlObject(this, "DetailsParts")).DataChanged = true;
            ((DetailsParts)MiscUtils.GetParentControlObject(this, "DetailsParts")).ResetData = true;
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                
            this.Page.Authorize((Control)DeleteRowButton2, "3");
									
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
    
        // Generate set method for buttons
        
        public virtual void SetDeleteRowButton2()                
              
        {
        
   
        }
            
        public virtual void SetEditRowButton4()                
              
        {
        
   
        }
            
        // event handler for ImageButton
        public virtual void DeleteRowButton2_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
            if (!this.Page.IsPageRefresh) {
        
                this.Delete();
              
            }
      this.Page.CommitTransaction(sender);
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void EditRowButton4_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../RODetails/Edit-RODetails.aspx?RODetails={PK}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseDetailsPartsRow_Rec"];
            }
            set {
                this.ViewState["BaseDetailsPartsRow_Rec"] = value;
            }
        }
        
        public RODetailsRecord DataSource {
            get {
                return (RODetailsRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.ImageButton DeleteRowButton2 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DeleteRowButton2");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton EditRowButton4 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "EditRowButton4");
            }
        }
        
        public System.Web.UI.WebControls.Literal ro_totalprice {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_totalprice");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROItemDesc3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROItemDesc3");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROPartNo3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPartNo3");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROQuantity3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROQuantity3");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROSellPrice3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSellPrice3");
            }
        }
            
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        RODetailsRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    RODetailsRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual RODetailsRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return RODetailsTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            return null;
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the DetailsParts control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in DetailsParts.
public class BaseDetailsParts : OEMConversion.UI.BaseApplicationTableControl
{
         
       public BaseDetailsParts()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
      
    
           // Setup the filter and search.
        


      
      
            // Control Initializations.
            // Initialize the table's current sort order.

            if (this.InSession(this, "Order_By"))
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));         
            else
            {
                   
                this.CurrentSortOrder = new OrderBy(true, false);
            
                this.CurrentSortOrder.Add(RODetailsTable.ROPartNo, OrderByItem.OrderDir.Asc);
              
        }



    // Setup default pagination settings.
    
            this.PageSize = Convert.ToInt32(this.GetFromSession(this, "Page_Size", "10"));
            this.PageIndex = Convert.ToInt32(this.GetFromSession(this, "Page_Index", "0"));
                     
        }

        protected virtual void Control_Load(object sender, EventArgs e)
        {
        
            SaveControlsToSession_Ajax();
        
            // Setup the pagination events.
            
                    this.Pagination3.FirstPage.Click += Pagination3_FirstPage_Click;
                        
                    this.Pagination3.LastPage.Click += Pagination3_LastPage_Click;
                        
                    this.Pagination3.NextPage.Click += Pagination3_NextPage_Click;
                        
                    this.Pagination3.PageSizeButton.Click += Pagination3_PageSizeButton_Click;
                        
                    this.Pagination3.PreviousPage.Click += Pagination3_PreviousPage_Click;
                        

            string url =""; //to avoid warning in VS as its not being used
            if(url == null) url=""; //to avoid warning in VS as its not being used
        
       // Setup the sorting events.
        
              this.ro_totalpriceLabel.Click += ro_totalpriceLabel_Click;
            
            // Setup the button events.
          
                    this.NewButton1.Click += NewButton1_Click;
                        
                    this.Actions3Button.Button.Click += Actions3Button_Click;
                                
        
         //' Setup events for others
               
        }

        public virtual void LoadData()
        {
            // Read data from database. Returns an array of records that can be assigned
            // to the DataSource table control property.
            try {
                  CompoundFilter joinFilter = CreateCompoundJoinFilter();
                
                  // The WHERE clause will be empty when displaying all records in table.
                  WhereClause wc = CreateWhereClause();
                  if (wc != null && !wc.RunQuery) {
                        // Initialize an empty array of records
                      ArrayList alist = new ArrayList(0);
                      Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                      this.DataSource = (RODetailsRecord[])(alist.ToArray(myrec));
                      // Add records to the list if needed.
                      this.AddNewRecords();
                      this._TotalRecords = 0;
                      this._TotalPages = 0;
                      return;
                  }

                  // Call OrderBy to determine the order - either use the order defined
                  // on the Query Wizard, or specified by user (by clicking on column heading)

                  OrderBy orderBy = CreateOrderBy();

      
                // Get the pagesize from the pagesize control.
                this.GetPageSize();
                if (this.DisplayLastPage)
                {
                    int totalRecords = this._TotalRecords < 0? GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause()): this._TotalRecords;
                     
                        int totalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(totalRecords) / Convert.ToDouble(this.PageSize)));
                       
                    this.PageIndex = totalPages - 1;                
                }
                
                // Make sure PageIndex (current page) and PageSize are within bounds.
                if (this.PageIndex < 0)
                    this.PageIndex = 0;
                if (this.PageSize < 1)
                    this.PageSize = 1;
                
                
                // Retrieve the records and set the table DataSource.
                // Only PageSize records are fetched starting at PageIndex (zero based).
                if (this.AddNewRecord > 0) {
                    // Make sure to preserve the previously entered data on new rows.
                    ArrayList postdata = new ArrayList(0);
                    foreach (DetailsPartsRow rc in this.GetRecordControls()) {
                        if (!rc.IsNewRecord) {
                            rc.DataSource = rc.GetRecord();
                            rc.GetUIData();
                            postdata.Add(rc.DataSource);
                            UIData.Add(rc.PreservedUIData());
                        }
                    }
                    Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                    this.DataSource = (RODetailsRecord[])(postdata.ToArray(myrec));
                } 
                else {
                    // Get the records from the database
                    
                        this.DataSource = GetRecords(joinFilter, wc, orderBy, this.PageIndex, this.PageSize);
                                          
                }
                
                // if the datasource contains no records contained in database, then load the last page.
                if (DbUtils.GetCreatedRecords(this.DataSource).Length == 0 && !this.DisplayLastPage)
                {
                      this.DisplayLastPage = true;
                      LoadData();
                }
                else
                {
                    // Add any new rows desired by the user.
                    this.AddNewRecords();
                    
    
                    // Initialize the page and grand totals. now
                
            this.ro_totalpriceGrandTotal.Text = this.Getro_totalpriceGrandTotal();
            if (this.ro_totalpriceGrandTotal.Text == null || 
                this.ro_totalpriceGrandTotal.Text.Length == 0) {
                this.ro_totalpriceGrandTotal.Text = "&nbsp;";
            }
                }                 
                

    
            } catch (Exception ex) {
                // Report the error message to the end user
                    String msg = ex.Message;
                    if (ex.InnerException != null)
                        msg += " InnerException: " + ex.InnerException.Message;

                    throw new Exception(msg, ex.InnerException);
            }
        }
        
        public virtual RODetailsRecord[] GetRecords(BaseFilter join, WhereClause where, OrderBy orderBy, int pageIndex, int pageSize)
        {    
            // by default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               
    
            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecordCount as well
            // selCols.Add(RODetailsTable.Column1, true);          
            // selCols.Add(RODetailsTable.Column2, true);          
            // selCols.Add(RODetailsTable.Column3, true);          
            

            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                  
            {
              
                return RODetailsTable.GetRecords(join, where, orderBy, this.PageIndex, this.PageSize);
                 
            }
            else
            {
                RODetailsTable databaseTable = new RODetailsTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);
                
            
                
                ArrayList recList; 
                orderBy.ExpandForeignKeyColums = false;
                recList = databaseTable.GetRecordList(join, where.GetFilter(), null, orderBy, pageIndex, pageSize);
                return (recList.ToArray(typeof(RODetailsRecord)) as RODetailsRecord[]);
            }            
            
        }
        
        
        public virtual int GetRecordCount(BaseFilter join, WhereClause where)
        {

            // By default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               


            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecords as well
            // selCols.Add(RODetailsTable.Column1, true);          
            // selCols.Add(RODetailsTable.Column2, true);          
            // selCols.Add(RODetailsTable.Column3, true);          


            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                     
            
                return RODetailsTable.GetRecordCount(join, where);
            else
            {
                RODetailsTable databaseTable = new RODetailsTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);        
                
                return (int)(databaseTable.GetRecordListCount(join, where.GetFilter(), null, null));
            }

        }
        
      
    
      public override void DataBind()
      {
          // The DataBind method binds the user interface controls to the values
          // from the database record for each row in the table.  To do this, it calls the
          // DataBind for each of the rows.
          // DataBind also populates any filters above the table, and sets the pagination
          // control to the correct number of records and the current page number.
         
          
          base.DataBind();
          

          this.ClearControlsFromSession();
          
          // Make sure that the DataSource is initialized.
          if (this.DataSource == null) {
              return;
          }
          
          //  LoadData for DataSource for chart and report if they exist
          
            // Improve performance by prefetching display as records.
            this.PreFetchForeignKeyValues();     

            // Setup the pagination controls.
            BindPaginationControls();

    
        
        // Bind the repeater with the list of records to expand the UI.
        
        System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsPartsRepeater"));
        if (rep == null){return;}
        rep.DataSource = this.DataSource;
        rep.DataBind();
        
        int index = 0;
        
        foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
        {
        
            // Loop through all rows in the table, set its DataSource and call DataBind().
            DetailsPartsRow recControl = (DetailsPartsRow)(repItem.FindControl("DetailsPartsRow"));
            recControl.DataSource = this.DataSource[index];            
            if (this.UIData.Count > index)
                recControl.PreviousUIData = this.UIData[index];
            recControl.DataBind();
            
           
            recControl.Visible = !this.InDeletedRecordIds(recControl);
        
            index++;
        }
           
    
            // Call the Set methods for each controls on the panel
        
                
                SetGrandTotalLabel();
                
                
                
                Setro_totalpriceLabel();
                SetROItemDescLabel3();
                SetROPartNoLabel3();
                SetROQuantityLabel3();
                SetROSellPriceLabel3();
                
                SetNewButton1();
              
                SetActions3Button();
              
            // setting the state of expand or collapse alternative rows
      
            // Load data for each record and table UI control.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
                
      
            // this method calls the set method for controls with special formula like running total, sum, rank, etc
            SetFormulaControls();
            
                    
        }
        
        
        public virtual void SetFormulaControls()
        {
            // this method calls Set methods for the control that has special formula
        

    }

        
        public void PreFetchForeignKeyValues() {
            if (this.DataSource == null) {
                return;
            }
          
            this.Page.PregetDfkaRecords(RODetailsTable.ROPartNo, this.DataSource);
        }
        

        public virtual void RegisterPostback()
        {
                
        }
        

        
          public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

          public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
          {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();

            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            if (includeDS)
            {
                
            }

            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
        
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
           
        public virtual void ResetControl()
        {


            
            this.CurrentSortOrder.Reset();
            if (this.InSession(this, "Order_By")) {
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));
            }
            else {
            
                this.CurrentSortOrder = new OrderBy(true, false);
            
                this.CurrentSortOrder.Add(RODetailsTable.ROPartNo, OrderByItem.OrderDir.Asc);
                 
            }
                
            this.PageIndex = 0;
        }
        
        public virtual void ResetPageControl()
        {
            this.PageIndex = 0;
        }
        
        protected virtual void BindPaginationControls()
        {
            // Setup the pagination controls.   

            // Bind the pagination labels.
        
            if (DbUtils.GetCreatedRecords(this.DataSource).Length > 0)                      
                    
            {
                this.Pagination3.CurrentPage.Text = (this.PageIndex + 1).ToString();
            } 
            else
            {
                this.Pagination3.CurrentPage.Text = "0";
            }
            this.Pagination3.PageSize.Text = this.PageSize.ToString();
    
            // Bind the buttons for DetailsParts pagination.
        
            this.Pagination3.FirstPage.Enabled = !(this.PageIndex == 0);
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination3.LastPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination3.LastPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination3.LastPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination3.NextPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination3.NextPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination3.NextPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            this.Pagination3.PreviousPage.Enabled = !(this.PageIndex == 0);    
        }
 
        public virtual void SaveData()
        {
            // Save the data from the entire table.  Calls each row's Save Data
            // to save their data.  This function is called by the Click handler of the
            // Save button.  The button handler should Start/Commit/End a transaction.
              
            foreach (DetailsPartsRow recCtl in this.GetRecordControls())
            {
        
                if (this.InDeletedRecordIds(recCtl)) {
                    // Delete any pending deletes. 
                    recCtl.Delete();
                }
                else {
                    if (recCtl.Visible) {
                        recCtl.SaveData();
                    }
                }
          
            }

          
    
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
          
            // Set IsNewRecord to False for all records - since everything has been saved and is no longer "new"
            foreach (DetailsPartsRow recCtl in this.GetRecordControls()){
                recCtl.IsNewRecord = false;
            }
      
            // Set DeletedRecordsIds to Nothing since we have deleted all pending deletes.
            this.DeletedRecordIds = null;
                
        }
        
        public virtual CompoundFilter CreateCompoundJoinFilter()
        {
            CompoundFilter jFilter = new CompoundFilter();
        
           return jFilter;
        }      
        
    
        public virtual OrderBy CreateOrderBy()
        {
            // The CurrentSortOrder is initialized to the sort order on the 
            // Query Wizard.  It may be modified by the Click handler for any of
            // the column heading to sort or reverse sort by that column.
            // You can add your own sort order, or modify it on the Query Wizard.
            return this.CurrentSortOrder;
        }
         
        
        private string parentSelectedKeyValue;
        public string ParentSelectedKeyValue
        {
          get
          {
            return parentSelectedKeyValue;
          }
          set
          {
            parentSelectedKeyValue = value;
          }
        }

    
        public virtual WhereClause CreateWhereClause()
        {
            // This CreateWhereClause is used for loading the data.
            RODetailsTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
    
            // CreateWhereClause() Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
        
      KeyValue selectedRecordKeyValue = new KeyValue();
    RepairOrdersRecordControl repairOrdersRecordControlObj = (MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl") as RepairOrdersRecordControl);
          
              if (repairOrdersRecordControlObj != null && repairOrdersRecordControlObj.GetRecord() != null && repairOrdersRecordControlObj.GetRecord().IsCreated)
              {
              wc.iAND(RODetailsTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              selectedRecordKeyValue.AddElement(RODetailsTable.RONo.InternalName, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              }
              else
              {
              wc.RunQuery = false;
              return wc;
              }
            
      HttpContext.Current.Session["DetailsPartsWhereClause"] = selectedRecordKeyValue.ToXmlString();
    
            // Get the static clause defined at design time on the Table Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
               
            return wc;
        }
        
         
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            RODetailsTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
        
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
      string selectedRecordInRepairOrdersRecordControl = HttpContext.Current.Session["DetailsPartsWhereClause"] as string;
      
      if (selectedRecordInRepairOrdersRecordControl != null && KeyValue.IsXmlKey(selectedRecordInRepairOrdersRecordControl))
      {
      KeyValue selectedRecordKeyValue = KeyValue.XmlToKey(selectedRecordInRepairOrdersRecordControl);
      
      if (selectedRecordKeyValue != null && selectedRecordKeyValue.ContainsColumn(RODetailsTable.RONo))
      {
      wc.iAND(RODetailsTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(RODetailsTable.RONo).ToString());
      }
    
      }
    
            // Get the static clause defined at design time on the Table Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
          

            return wc;
        }

        
        protected virtual WhereClause CreateQueryClause()
        {
            // Create a where clause for the Static clause defined at design time.
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RODetailsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RODetails_.ROLineType"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;
        }
          
          
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }          
          
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    
                    resultList.Add(itemToAdd);
          								
                    isAdded = true;
                }
            }
            return isAdded;
        }        
        
    
        protected virtual void GetPageSize()
        {
        
            if (this.Pagination3.PageSize.Text.Length > 0) {
                try {
                    // this.PageSize = Convert.ToInt32(this.Pagination3.PageSize.Text);
                } catch (Exception ) {
                }
            }
        }

        protected virtual void AddNewRecords()
        {
          
            ArrayList newRecordList = new ArrayList();
          
            System.Collections.Generic.List<Hashtable> newUIDataList = new System.Collections.Generic.List<Hashtable>();
            // Loop though all the record controls and if the record control
            // does not have a unique record id set, then create a record
            // and add to the list.
            if (!this.ResetData)
            {
              System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsPartsRepeater"));
              if (rep == null){return;}
              
                foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
                {
                
                // Loop through all rows in the table, set its DataSource and call DataBind().
                DetailsPartsRow recControl = (DetailsPartsRow)(repItem.FindControl("DetailsPartsRow"));
      
            if (recControl.Visible && recControl.IsNewRecord) {
      RODetailsRecord rec = new RODetailsRecord();
        
                        if (recControl.ro_totalprice.Text != "") {
                            rec.Parse(recControl.ro_totalprice.Text, RODetailsTable.ro_totalprice);
                  }
                
                        if (recControl.ROItemDesc3.Text != "") {
                            rec.Parse(recControl.ROItemDesc3.Text, RODetailsTable.ROItemDesc);
                  }
                
                        if (recControl.ROPartNo3.Text != "") {
                            rec.Parse(recControl.ROPartNo3.Text, RODetailsTable.ROPartNo);
                  }
                
                        if (recControl.ROQuantity3.Text != "") {
                            rec.Parse(recControl.ROQuantity3.Text, RODetailsTable.ROQuantity);
                  }
                
                        if (recControl.ROSellPrice3.Text != "") {
                            rec.Parse(recControl.ROSellPrice3.Text, RODetailsTable.ROSellPrice);
                  }
                
              newUIDataList.Add(recControl.PreservedUIData());
              newRecordList.Add(rec);
            }
          }
        }
    
            // Add any new record to the list.
            for (int count = 1; count <= this.AddNewRecord; count++) {
              
                newRecordList.Insert(0, new RODetailsRecord());
                newUIDataList.Insert(0, new Hashtable());
              
            }
            this.AddNewRecord = 0;

            // Finally, add any new records to the DataSource.
            if (newRecordList.Count > 0) {
              
                ArrayList finalList = new ArrayList(this.DataSource);
                finalList.InsertRange(0, newRecordList);

                Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                this.DataSource = (RODetailsRecord[])(finalList.ToArray(myrec));
              
            }
            
            // Add the existing UI data to this hash table
            if (newUIDataList.Count > 0)
                this.UIData.InsertRange(0, newUIDataList);
        }

        
        public void AddToDeletedRecordIds(DetailsPartsRow rec)
        {
            if (rec.IsNewRecord) {
                return;
            }

            if (this.DeletedRecordIds != null && this.DeletedRecordIds.Length > 0) {
                this.DeletedRecordIds += ",";
            }

            this.DeletedRecordIds += "[" + rec.RecordUniqueId + "]";
        }

        protected virtual bool InDeletedRecordIds(DetailsPartsRow rec)            
        {
            if (this.DeletedRecordIds == null || this.DeletedRecordIds.Length == 0) {
                return (false);
            }

            return (this.DeletedRecordIds.IndexOf("[" + rec.RecordUniqueId + "]") >= 0);
        }

        private String _DeletedRecordIds;
        public String DeletedRecordIds {
            get {
                return (this._DeletedRecordIds);
            }
            set {
                this._DeletedRecordIds = value;
            }
        }
        
      
        // Create Set, WhereClause, and Populate Methods
        
        public virtual void SetGrandTotalLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.GrandTotalLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void Setro_totalpriceLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ro_totalpriceLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROItemDescLabel3()
                  {
                  
                        this.ROItemDescLabel3.Text = EvaluateFormula("\"Item Description\"");
                      
                    
        }
                
        public virtual void SetROPartNoLabel3()
                  {
                  
                        this.ROPartNoLabel3.Text = EvaluateFormula("\"Part Number\"");
                      
                    
        }
                
        public virtual void SetROQuantityLabel3()
                  {
                  
                        this.ROQuantityLabel3.Text = EvaluateFormula("\"Quantity\"");
                      
                    
        }
                
        public virtual void SetROSellPriceLabel3()
                  {
                  
                        this.ROSellPriceLabel3.Text = EvaluateFormula("\"Sell Price\"");
                      
                    
        }
                
        protected virtual string Getro_totalpriceGrandTotal()
        {
            WhereClause wc = this.CreateWhereClause();            
            CompoundFilter joinFilter = this.CreateCompoundJoinFilter();
              
            OrderBy orderBy = new OrderBy(true, false);     
            string ro_totalpriceSum = RODetailsTable.GetSum(RODetailsTable.ro_totalprice, joinFilter, wc, orderBy, BaseTable.MIN_PAGE_NUMBER, BaseTable.MAX_BATCH_SIZE);
                
            return RODetailsTable.ro_totalprice.Format(ro_totalpriceSum);
              
              
        }
          

    
        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    
                    this.LoadData();
                    this.DataBind();					
                    
                }
                                
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
        
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
            // Save filter controls to values to session.
        
            
                    
            // Save pagination state to session.
         
    
            // Save table control properties to the session.
          
            if (this.CurrentSortOrder != null)
            {
                if ((this.CurrentSortOrder).GetType() != typeof(GeoOrderBy))
                {
                    this.SaveToSession(this, "Order_By", this.CurrentSortOrder.ToXmlString());
                }
            }
          
            this.SaveToSession(this, "Page_Index", this.PageIndex.ToString());
            this.SaveToSession(this, "Page_Size", this.PageSize.ToString());
          
            this.SaveToSession(this, "DeletedRecordIds", this.DeletedRecordIds);
        
        }
        
        
        protected  void SaveControlsToSession_Ajax()
        {
            // Save filter controls to values to session.
          
           HttpContext.Current.Session["AppRelativeVirtualPath"] = this.Page.AppRelativeVirtualPath;
         
        }
        
        
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();
            // Clear filter controls values from the session.
        
            
            // Clear pagination state from session.
         

    // Clear table properties from the session.
    this.RemoveFromSession(this, "Order_By");
    this.RemoveFromSession(this, "Page_Index");
    this.RemoveFromSession(this, "Page_Size");
    
            this.RemoveFromSession(this, "DeletedRecordIds");
            
        }

        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);

            string orderByStr = (string)ViewState["DetailsParts_OrderBy"];
          
            if (orderByStr != null && orderByStr.Length > 0) {
                this.CurrentSortOrder = BaseClasses.Data.OrderBy.FromXmlString(orderByStr);
            }
          
            else {
                this.CurrentSortOrder = new OrderBy(true, false);
            }
          

            Control Pagination = this.FindControl("Pagination3");
            String PaginationType = "";
            if (Pagination != null){
              Control Summary = Pagination.FindControl("_Summary");
              if (Summary != null){
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination"){
                  PaginationType = "Infinite Pagination";
                }
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination Mobile"){
                  PaginationType = "Infinite Pagination Mobile";
              }
            }
            }
            
            if (!(PaginationType.Equals("Infinite Pagination"))) {
              if (!this.Page.ClientQueryString.Contains("InfiIframe") && PaginationType == "Infinite Pagination Mobile"){
                    this.ViewState["Page_Index"] = 0;
               }
	            string pageIndex = Convert.ToString(ViewState["Page_Index"]);
	            if (pageIndex != null) {
		            this.PageIndex = Convert.ToInt32(pageIndex);
	            }
            }
            
            string pageSize = Convert.ToString(ViewState["Page_Size"]);
            if ((pageSize != null)) {
	            this.PageSize = Convert.ToInt32(pageSize);
            }
            
          
            // Load view state for pagination control.
    
            this.DeletedRecordIds = (string)this.ViewState["DeletedRecordIds"];
        
        }

        protected override object SaveViewState()
        {            
          
            if (this.CurrentSortOrder != null) {
                this.ViewState["DetailsParts_OrderBy"] = this.CurrentSortOrder.ToXmlString();
            }
          

    this.ViewState["Page_Index"] = this.PageIndex;
    this.ViewState["Page_Size"] = this.PageSize;
    
            this.ViewState["DeletedRecordIds"] = this.DeletedRecordIds;
        
    
            // Load view state for pagination control.
              
            return (base.SaveViewState());
        }

        // Generate set method for buttons
        
        public virtual void SetNewButton1()                
              
        {
        
              try
              {
                    string url = "../RODetails/Add-RODetails.aspx?RoNo={RepairOrdersRecordControl:PK}&TabVisible=False&SaveAndNewVisible=False";
              
                      
                    url = this.ModifyRedirectUrl(url, "", true);
                    
                    url = this.Page.ModifyRedirectUrl(url, "", true);                                  
                    
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(MiscUtils.FindControlRecursively(this, "DetailsParts_PostbackTracker").ClientID);                           
                                
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(document.getElementById('" + MiscUtils.FindControlRecursively(this, "DetailsParts_PostbackTracker").ClientID + "'), '" + url + "', true, event);";                                      
                       
                    this.NewButton1.Attributes["onClick"] = javascriptCall + "return false;";            
                }
                catch
                {
                    // do nothing.  If the code above fails, server side click event, NewButton1_ClickNewButton1_Click will be trigger when user click the button.
                }
                  
   
        }
            
        public virtual void SetActions3Button()                
              
        {
        
   
        }
               
        
        // Generate the event handling functions for pagination events.
        
        // event handler for ImageButton
        public virtual void Pagination3_FirstPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex = 0;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination3_LastPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.DisplayLastPage = true;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination3_NextPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex += 1;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for LinkButton
        public virtual void Pagination3_PageSizeButton_Click(object sender, EventArgs args)
        {
              
            try {
                
            this.DataChanged = true;
      
            this.PageSize = this.Pagination3.GetCurrentPageSize();
      
            this.PageIndex = Convert.ToInt32(this.Pagination3.CurrentPage.Text) - 1;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination3_PreviousPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            if (this.PageIndex > 0) {
                this.PageIndex -= 1;
                this.DataChanged = true;
            }
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        

        // Generate the event handling functions for sorting events.
        
        public virtual void ro_totalpriceLabel_Click(object sender, EventArgs args)
        {
            //Sorts by ro_totalprice when clicked.
              
            // Get previous sorting state for ro_totalprice.
        
            OrderByItem sd = this.CurrentSortOrder.Find(RODetailsTable.ro_totalprice);
            if (sd == null || (this.CurrentSortOrder.Items != null && this.CurrentSortOrder.Items.Length > 1)) {
                // First time sort, so add sort order for ro_totalprice.
                this.CurrentSortOrder.Reset();

    
              //If default sort order was GeoProximity, create new CurrentSortOrder of OrderBy type
              if ((this.CurrentSortOrder).GetType() == typeof(GeoOrderBy)) this.CurrentSortOrder = new OrderBy(true, false);

              this.CurrentSortOrder.Add(RODetailsTable.ro_totalprice, OrderByItem.OrderDir.Asc);
            
            } else {
                // Previously sorted by ro_totalprice, so just reverse.
                sd.Reverse();
            }
        

            // Setting the DataChanged to true results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
              
        }
            

        // Generate the event handling functions for button events.
        
        // event handler for ImageButton
        public virtual void NewButton1_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../RODetails/Add-RODetails.aspx?RoNo={RepairOrdersRecordControl:PK}&TabVisible=False&SaveAndNewVisible=False";
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(MiscUtils.FindControlRecursively(this, "DetailsParts_PostbackTracker").ClientID);                           
                                
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(document.getElementById('" + MiscUtils.FindControlRecursively(this, "DetailsParts_PostbackTracker").ClientID + "'), '" + url + "', true, event);";                                      
                AjaxControlToolkit.ToolkitScriptManager.RegisterStartupScript(this, this.GetType(), "NewButton1_Click", javascriptCall, true);
        
            }
        
        }
            
            
        
        // event handler for Button
        public virtual void Actions3Button_Click(object sender, EventArgs args)
        {
              
            try {
                
            //This method is initially empty to implement custom click handler.
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        


        // Generate the event handling functions for filter and search events.
        
    
        // Generate the event handling functions for others
        	  

        protected int _TotalRecords = -1;
        public int TotalRecords 
        {
            get {
                if (_TotalRecords < 0)
                {
                    _TotalRecords = RODetailsTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause());
                }
                return (this._TotalRecords);
            }
            set {
                if (this.PageSize > 0) {
                  
                      this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
                          
                }
                this._TotalRecords = value;
            }
        }

      
      
        protected int _TotalPages = -1;
        public int TotalPages {
            get {
                if (_TotalPages < 0) 
                
                    this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(TotalRecords) / Convert.ToDouble(this.PageSize)));
                  
                return this._TotalPages;
            }
            set {
                this._TotalPages = value;
            }
        }

        protected bool _DisplayLastPage;
        public bool DisplayLastPage {
            get {
                return this._DisplayLastPage;
            }
            set {
                this._DisplayLastPage = value;
            }
        }


        
        private OrderBy _CurrentSortOrder = null;
        public OrderBy CurrentSortOrder {
            get {
                return this._CurrentSortOrder;
            }
            set {
                this._CurrentSortOrder = value;
            }
        }
        
        public  RODetailsRecord[] DataSource {
             
            get {
                return (RODetailsRecord[])(base._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }

#region "Helper Properties"
        
        public OEMConversion.UI.IThemeButtonWithArrow Actions3Button {
            get {
                return (OEMConversion.UI.IThemeButtonWithArrow)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Actions3Button");
            }
        }
        
        public System.Web.UI.WebControls.Label GrandTotalLabel {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "GrandTotalLabel");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton NewButton1 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "NewButton1");
            }
        }
        
        public OEMConversion.UI.IPaginationModern Pagination3 {
            get {
                return (OEMConversion.UI.IPaginationModern)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Pagination3");
            }
        }
        
        public System.Web.UI.WebControls.Label ro_totalpriceGrandTotal {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_totalpriceGrandTotal");
            }
        }
        
        public System.Web.UI.WebControls.LinkButton ro_totalpriceLabel {
            get {
                return (System.Web.UI.WebControls.LinkButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_totalpriceLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROItemDescLabel3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROItemDescLabel3");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROPartNoLabel3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPartNoLabel3");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROQuantityLabel3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROQuantityLabel3");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROSellPriceLabel3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSellPriceLabel3");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title5 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title5");
            }
        }
        
#endregion

#region "Helper Functions"
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
        }
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
        }
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                DetailsPartsRow recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        RODetailsRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                return EvaluateExpressions(url, arg, rec, bEncrypt);
             
            }
            return url;
        }
        
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt, bool includeSession)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                DetailsPartsRow recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        RODetailsRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                
                if (includeSession)
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt);
                }
                else
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt,false);
                }
             
            }
            return url;
        }
          
        public virtual DetailsPartsRow GetSelectedRecordControl()
        {
        
            return null;
          
        }

        public virtual DetailsPartsRow[] GetSelectedRecordControls()
        {
        
            return (DetailsPartsRow[])((new ArrayList()).ToArray(Type.GetType("OEMConversion.UI.Controls.Edit_RepairOrders.DetailsPartsRow")));
          
        }

        public virtual void DeleteSelectedRecords(bool deferDeletion)
        {
            DetailsPartsRow[] recordList = this.GetSelectedRecordControls();
            if (recordList.Length == 0) {
                // Localization.
                throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
            }
            
            foreach (DetailsPartsRow recCtl in recordList)
            {
                if (deferDeletion) {
                    if (!recCtl.IsNewRecord) {
                
                        this.AddToDeletedRecordIds(recCtl);
                  
                    }
                    recCtl.Visible = false;
                
                } else {
                
                    recCtl.Delete();
                    // Setting the DataChanged to True results in the page being refreshed with
                    // the most recent data from the database.  This happens in PreRender event
                    // based on the current sort, search and filter criteria.
                    this.DataChanged = true;
                    this.ResetData = true;
                  
                }
            }
        }

        public virtual DetailsPartsRow[] GetRecordControls()
        {
            Control[] recCtrls = BaseClasses.Utils.MiscUtils.FindControlsRecursively(this, "DetailsPartsRow");
	          List<DetailsPartsRow> list = new List<DetailsPartsRow>();
	          foreach (DetailsPartsRow recCtrl in recCtrls) {
		          list.Add(recCtrl);
	          }
	          return list.ToArray();
        }

        public new BaseApplicationPage Page 
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }
        
                

        
        
#endregion


    }
  
// Base class for the DetailsSC2Row control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in DetailsSC2Row.
public class BaseDetailsSC2Row : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseDetailsSC2Row()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in DetailsSC2Row.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
                
        }

        // To customize, override this method in DetailsSC2Row.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
                    
        
              // Register the event handlers.

          
                    this.EditRowButton2.Click += EditRowButton2_Click;
                        
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.RODetails record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = RODetailsTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // Since this is a row in the table, the data for this row is loaded by the 
            // LoadData method of the BaseDetailsSC2 when the data for the entire
            // table is loaded.
            
            this.DataSource = new RODetailsRecord();
            
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                
                SetROItemDesc2();
                SetROPartNo2();
                SetROQuantity2();
                SetROSellPrice2();
                SetEditRowButton2();
              

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void SetROItemDesc2()
        {
            
                    
            // Set the ROItemDesc Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROItemDesc2 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROItemDescSpecified) {
                								
                // If the ROItemDesc is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROItemDesc);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROItemDesc2.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROItemDesc is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROItemDesc2.Text = RODetailsTable.ROItemDesc.Format(RODetailsTable.ROItemDesc.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetROPartNo2()
        {
            
                    
            // Set the ROPartNo Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROPartNo2 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROPartNoSpecified) {
                								
                // If the ROPartNo is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
               string formattedValue = "";
               Boolean _isExpandableNonCompositeForeignKey = RODetailsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RODetailsTable.ROPartNo);
               if(_isExpandableNonCompositeForeignKey &&RODetailsTable.ROPartNo.IsApplyDisplayAs)
                                  
                     formattedValue = RODetailsTable.GetDFKA(this.DataSource.ROPartNo.ToString(),RODetailsTable.ROPartNo, null);
                                    
               if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(formattedValue)))
                     formattedValue = this.DataSource.Format(RODetailsTable.ROPartNo);
                                  
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROPartNo2.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROPartNo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROPartNo2.Text = RODetailsTable.ROPartNo.Format(RODetailsTable.ROPartNo.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetROQuantity2()
        {
            
                    
            // Set the ROQuantity Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROQuantity2 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROQuantitySpecified) {
                								
                // If the ROQuantity is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROQuantity);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROQuantity2.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROQuantity is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROQuantity2.Text = RODetailsTable.ROQuantity.Format(RODetailsTable.ROQuantity.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetROSellPrice2()
        {
            
                    
            // Set the ROSellPrice Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROSellPrice2 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the ROSellPrice is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROSellPrice, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROSellPrice2.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROSellPrice is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROSellPrice2.Text = EvaluateFormula("(ROSellPriceDefaultValue*ROQuantityDefaultValue)", this.DataSource, @"C");
            		
            }
                               
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        RepairOrdersRecordControl parentCtrl;
      
            parentCtrl = (RepairOrdersRecordControl)MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl");
          
        if (parentCtrl != null && parentCtrl.DataSource == null) {
        // Load the record if it is not loaded yet.
        parentCtrl.LoadData();
        }
        if (parentCtrl == null || parentCtrl.DataSource == null) {
        // Get the error message from the application resource file.
        throw new Exception(Page.GetResourceValue("Err:NoParentRecId", "OEMConversion"));
        }
        
          this.DataSource.RONo = parentCtrl.DataSource.RONo;
        
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
                // Set the DataChanged flag to True for the for the related panels so they get refreshed as well.
                ((DetailsSC2)MiscUtils.GetParentControlObject(this, "DetailsSC2")).DataChanged = true;
                ((DetailsSC2)MiscUtils.GetParentControlObject(this, "DetailsSC2")).ResetData = true;
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            GetROItemDesc2();
            GetROPartNo2();
            GetROQuantity2();
            GetROSellPrice2();
        }
        
        
        public virtual void GetROItemDesc2()
        {
            
        }
                
        public virtual void GetROPartNo2()
        {
            
        }
                
        public virtual void GetROQuantity2()
        {
            
        }
                
        public virtual void GetROSellPrice2()
        {
            
        }
                

      // To customize, override this method in DetailsSC2Row.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            return null;
        
        }
        
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          RODetailsTable.DeleteRecord(pkValue);
          
              
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            ((DetailsSC2)MiscUtils.GetParentControlObject(this, "DetailsSC2")).DataChanged = true;
            ((DetailsSC2)MiscUtils.GetParentControlObject(this, "DetailsSC2")).ResetData = true;
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
    
        // Generate set method for buttons
        
        public virtual void SetEditRowButton2()                
              
        {
        
   
        }
            
        // event handler for ImageButton
        public virtual void EditRowButton2_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../RODetails/Edit-RODetails.aspx?RODetails={PK}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseDetailsSC2Row_Rec"];
            }
            set {
                this.ViewState["BaseDetailsSC2Row_Rec"] = value;
            }
        }
        
        public RODetailsRecord DataSource {
            get {
                return (RODetailsRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.ImageButton EditRowButton2 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "EditRowButton2");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROItemDesc2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROItemDesc2");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROPartNo2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPartNo2");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROQuantity2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROQuantity2");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROSellPrice2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSellPrice2");
            }
        }
            
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        RODetailsRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    RODetailsRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual RODetailsRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return RODetailsTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            return null;
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the DetailsSC2 control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in DetailsSC2.
public class BaseDetailsSC2 : OEMConversion.UI.BaseApplicationTableControl
{
         
       public BaseDetailsSC2()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
      
    
           // Setup the filter and search.
        


      
      
            // Control Initializations.
            // Initialize the table's current sort order.

            if (this.InSession(this, "Order_By"))
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));         
            else
            {
                   
                this.CurrentSortOrder = new OrderBy(true, false);
            
                this.CurrentSortOrder.Add(RODetailsTable.ROPartNo, OrderByItem.OrderDir.Asc);
              
        }



    // Setup default pagination settings.
    
            this.PageSize = Convert.ToInt32(this.GetFromSession(this, "Page_Size", "25"));
            this.PageIndex = Convert.ToInt32(this.GetFromSession(this, "Page_Index", "0"));
                     
        }

        protected virtual void Control_Load(object sender, EventArgs e)
        {
        
            SaveControlsToSession_Ajax();
        
              // Show confirmation message on Click
              this.DeleteButton2.Attributes.Add("onClick", "return (confirm(\"" + ((BaseApplicationPage)this.Page).GetResourceValue("DeleteConfirm", "OEMConversion") + "\"));");
            // Setup the pagination events.
            
                    this.Pagination2.FirstPage.Click += Pagination2_FirstPage_Click;
                        
                    this.Pagination2.LastPage.Click += Pagination2_LastPage_Click;
                        
                    this.Pagination2.NextPage.Click += Pagination2_NextPage_Click;
                        
                    this.Pagination2.PageSizeButton.Click += Pagination2_PageSizeButton_Click;
                        
                    this.Pagination2.PreviousPage.Click += Pagination2_PreviousPage_Click;
                        

            string url =""; //to avoid warning in VS as its not being used
            if(url == null) url=""; //to avoid warning in VS as its not being used
        
       // Setup the sorting events.
        
            // Setup the button events.
          
                    this.AddButton2.Click += AddButton2_Click;
                        
                    this.DeleteButton2.Click += DeleteButton2_Click;
                        
                    this.ActionsButton2.Button.Click += ActionsButton2_Click;
                                
        
         //' Setup events for others
               
        }

        public virtual void LoadData()
        {
            // Read data from database. Returns an array of records that can be assigned
            // to the DataSource table control property.
            try {
                  CompoundFilter joinFilter = CreateCompoundJoinFilter();
                
                  // The WHERE clause will be empty when displaying all records in table.
                  WhereClause wc = CreateWhereClause();
                  if (wc != null && !wc.RunQuery) {
                        // Initialize an empty array of records
                      ArrayList alist = new ArrayList(0);
                      Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                      this.DataSource = (RODetailsRecord[])(alist.ToArray(myrec));
                      // Add records to the list if needed.
                      this.AddNewRecords();
                      this._TotalRecords = 0;
                      this._TotalPages = 0;
                      return;
                  }

                  // Call OrderBy to determine the order - either use the order defined
                  // on the Query Wizard, or specified by user (by clicking on column heading)

                  OrderBy orderBy = CreateOrderBy();

      
                // Get the pagesize from the pagesize control.
                this.GetPageSize();
                if (this.DisplayLastPage)
                {
                    int totalRecords = this._TotalRecords < 0? GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause()): this._TotalRecords;
                     
                        int totalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(totalRecords) / Convert.ToDouble(this.PageSize)));
                       
                    this.PageIndex = totalPages - 1;                
                }
                
                // Make sure PageIndex (current page) and PageSize are within bounds.
                if (this.PageIndex < 0)
                    this.PageIndex = 0;
                if (this.PageSize < 1)
                    this.PageSize = 1;
                
                
                // Retrieve the records and set the table DataSource.
                // Only PageSize records are fetched starting at PageIndex (zero based).
                if (this.AddNewRecord > 0) {
                    // Make sure to preserve the previously entered data on new rows.
                    ArrayList postdata = new ArrayList(0);
                    foreach (DetailsSC2Row rc in this.GetRecordControls()) {
                        if (!rc.IsNewRecord) {
                            rc.DataSource = rc.GetRecord();
                            rc.GetUIData();
                            postdata.Add(rc.DataSource);
                            UIData.Add(rc.PreservedUIData());
                        }
                    }
                    Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                    this.DataSource = (RODetailsRecord[])(postdata.ToArray(myrec));
                } 
                else {
                    // Get the records from the database
                    
                        this.DataSource = GetRecords(joinFilter, wc, orderBy, this.PageIndex, this.PageSize);
                                          
                }
                
                // if the datasource contains no records contained in database, then load the last page.
                if (DbUtils.GetCreatedRecords(this.DataSource).Length == 0 && !this.DisplayLastPage)
                {
                      this.DisplayLastPage = true;
                      LoadData();
                }
                else
                {
                    // Add any new rows desired by the user.
                    this.AddNewRecords();
                    
    
                    // Initialize the page and grand totals. now
                
                }                 
                

    
            } catch (Exception ex) {
                // Report the error message to the end user
                    String msg = ex.Message;
                    if (ex.InnerException != null)
                        msg += " InnerException: " + ex.InnerException.Message;

                    throw new Exception(msg, ex.InnerException);
            }
        }
        
        public virtual RODetailsRecord[] GetRecords(BaseFilter join, WhereClause where, OrderBy orderBy, int pageIndex, int pageSize)
        {    
            // by default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               
    
            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecordCount as well
            // selCols.Add(RODetailsTable.Column1, true);          
            // selCols.Add(RODetailsTable.Column2, true);          
            // selCols.Add(RODetailsTable.Column3, true);          
            

            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                  
            {
              
                return RODetailsTable.GetRecords(join, where, orderBy, this.PageIndex, this.PageSize);
                 
            }
            else
            {
                RODetailsTable databaseTable = new RODetailsTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);
                
            
                
                ArrayList recList; 
                orderBy.ExpandForeignKeyColums = false;
                recList = databaseTable.GetRecordList(join, where.GetFilter(), null, orderBy, pageIndex, pageSize);
                return (recList.ToArray(typeof(RODetailsRecord)) as RODetailsRecord[]);
            }            
            
        }
        
        
        public virtual int GetRecordCount(BaseFilter join, WhereClause where)
        {

            // By default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               


            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecords as well
            // selCols.Add(RODetailsTable.Column1, true);          
            // selCols.Add(RODetailsTable.Column2, true);          
            // selCols.Add(RODetailsTable.Column3, true);          


            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                     
            
                return RODetailsTable.GetRecordCount(join, where);
            else
            {
                RODetailsTable databaseTable = new RODetailsTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);        
                
                return (int)(databaseTable.GetRecordListCount(join, where.GetFilter(), null, null));
            }

        }
        
      
    
      public override void DataBind()
      {
          // The DataBind method binds the user interface controls to the values
          // from the database record for each row in the table.  To do this, it calls the
          // DataBind for each of the rows.
          // DataBind also populates any filters above the table, and sets the pagination
          // control to the correct number of records and the current page number.
         
          
          base.DataBind();
          

          this.ClearControlsFromSession();
          
          // Make sure that the DataSource is initialized.
          if (this.DataSource == null) {
              return;
          }
          
          //  LoadData for DataSource for chart and report if they exist
          
            // Improve performance by prefetching display as records.
            this.PreFetchForeignKeyValues();     

            // Setup the pagination controls.
            BindPaginationControls();

    
        
        // Bind the repeater with the list of records to expand the UI.
        
        System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsSC2Repeater"));
        if (rep == null){return;}
        rep.DataSource = this.DataSource;
        rep.DataBind();
        
        int index = 0;
        
        foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
        {
        
            // Loop through all rows in the table, set its DataSource and call DataBind().
            DetailsSC2Row recControl = (DetailsSC2Row)(repItem.FindControl("DetailsSC2Row"));
            recControl.DataSource = this.DataSource[index];            
            if (this.UIData.Count > index)
                recControl.PreviousUIData = this.UIData[index];
            recControl.DataBind();
            
           
            recControl.Visible = !this.InDeletedRecordIds(recControl);
        
            index++;
        }
           
    
            // Call the Set methods for each controls on the panel
        
                
                
                
                SetGrandTotalLabel2();
                
                SetROItemDescLabel2();
                SetROPartNoLabel2();
                SetROQuantityLabel2();
                SetROSellPriceLabel2();
                
                SetAddButton2();
              
                SetDeleteButton2();
              
                SetActionsButton2();
              
            // setting the state of expand or collapse alternative rows
      
            // Load data for each record and table UI control.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
                
      
            // this method calls the set method for controls with special formula like running total, sum, rank, etc
            SetFormulaControls();
            
                    
        }
        
        
        public virtual void SetFormulaControls()
        {
            // this method calls Set methods for the control that has special formula
        

    }

        
        public void PreFetchForeignKeyValues() {
            if (this.DataSource == null) {
                return;
            }
          
            this.Page.PregetDfkaRecords(RODetailsTable.ROPartNo, this.DataSource);
        }
        

        public virtual void RegisterPostback()
        {
                
        }
        

        
          public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

          public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
          {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();

            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            if (includeDS)
            {
                
            }

            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
        
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
           
        public virtual void ResetControl()
        {


            
            this.CurrentSortOrder.Reset();
            if (this.InSession(this, "Order_By")) {
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));
            }
            else {
            
                this.CurrentSortOrder = new OrderBy(true, false);
            
                this.CurrentSortOrder.Add(RODetailsTable.ROPartNo, OrderByItem.OrderDir.Asc);
                 
            }
                
            this.PageIndex = 0;
        }
        
        public virtual void ResetPageControl()
        {
            this.PageIndex = 0;
        }
        
        protected virtual void BindPaginationControls()
        {
            // Setup the pagination controls.   

            // Bind the pagination labels.
        
            if (DbUtils.GetCreatedRecords(this.DataSource).Length > 0)                      
                    
            {
                this.Pagination2.CurrentPage.Text = (this.PageIndex + 1).ToString();
            } 
            else
            {
                this.Pagination2.CurrentPage.Text = "0";
            }
            this.Pagination2.PageSize.Text = this.PageSize.ToString();
    
            // Bind the buttons for DetailsSC2 pagination.
        
            this.Pagination2.FirstPage.Enabled = !(this.PageIndex == 0);
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination2.LastPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination2.LastPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination2.LastPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination2.NextPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination2.NextPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination2.NextPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            this.Pagination2.PreviousPage.Enabled = !(this.PageIndex == 0);    
        }
 
        public virtual void SaveData()
        {
            // Save the data from the entire table.  Calls each row's Save Data
            // to save their data.  This function is called by the Click handler of the
            // Save button.  The button handler should Start/Commit/End a transaction.
              
            foreach (DetailsSC2Row recCtl in this.GetRecordControls())
            {
        
                if (this.InDeletedRecordIds(recCtl)) {
                    // Delete any pending deletes. 
                    recCtl.Delete();
                }
                else {
                    if (recCtl.Visible) {
                        recCtl.SaveData();
                    }
                }
          
            }

          
    
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
          
            // Set IsNewRecord to False for all records - since everything has been saved and is no longer "new"
            foreach (DetailsSC2Row recCtl in this.GetRecordControls()){
                recCtl.IsNewRecord = false;
            }
      
            // Set DeletedRecordsIds to Nothing since we have deleted all pending deletes.
            this.DeletedRecordIds = null;
                
        }
        
        public virtual CompoundFilter CreateCompoundJoinFilter()
        {
            CompoundFilter jFilter = new CompoundFilter();
        
           return jFilter;
        }      
        
    
        public virtual OrderBy CreateOrderBy()
        {
            // The CurrentSortOrder is initialized to the sort order on the 
            // Query Wizard.  It may be modified by the Click handler for any of
            // the column heading to sort or reverse sort by that column.
            // You can add your own sort order, or modify it on the Query Wizard.
            return this.CurrentSortOrder;
        }
         
        
        private string parentSelectedKeyValue;
        public string ParentSelectedKeyValue
        {
          get
          {
            return parentSelectedKeyValue;
          }
          set
          {
            parentSelectedKeyValue = value;
          }
        }

    
        public virtual WhereClause CreateWhereClause()
        {
            // This CreateWhereClause is used for loading the data.
            RODetailsTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
    
            // CreateWhereClause() Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
        
      KeyValue selectedRecordKeyValue = new KeyValue();
    RepairOrdersRecordControl repairOrdersRecordControlObj = (MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl") as RepairOrdersRecordControl);
          
              if (repairOrdersRecordControlObj != null && repairOrdersRecordControlObj.GetRecord() != null && repairOrdersRecordControlObj.GetRecord().IsCreated)
              {
              wc.iAND(RODetailsTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              selectedRecordKeyValue.AddElement(RODetailsTable.RONo.InternalName, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              }
              else
              {
              wc.RunQuery = false;
              return wc;
              }
            
      HttpContext.Current.Session["DetailsSC2WhereClause"] = selectedRecordKeyValue.ToXmlString();
    
            // Get the static clause defined at design time on the Table Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
               
            return wc;
        }
        
         
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            RODetailsTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
        
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
      string selectedRecordInRepairOrdersRecordControl = HttpContext.Current.Session["DetailsSC2WhereClause"] as string;
      
      if (selectedRecordInRepairOrdersRecordControl != null && KeyValue.IsXmlKey(selectedRecordInRepairOrdersRecordControl))
      {
      KeyValue selectedRecordKeyValue = KeyValue.XmlToKey(selectedRecordInRepairOrdersRecordControl);
      
      if (selectedRecordKeyValue != null && selectedRecordKeyValue.ContainsColumn(RODetailsTable.RONo))
      {
      wc.iAND(RODetailsTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(RODetailsTable.RONo).ToString());
      }
    
      }
    
            // Get the static clause defined at design time on the Table Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
          

            return wc;
        }

        
        protected virtual WhereClause CreateQueryClause()
        {
            // Create a where clause for the Static clause defined at design time.
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("\"6\"", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RODetailsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RODetails_.ROLineType"), EvaluateFormula("\"6\"", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("\"6\"", false) == "--PLEASE_SELECT--" || EvaluateFormula("\"6\"", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;
        }
          
          
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }          
          
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    
                    resultList.Add(itemToAdd);
          								
                    isAdded = true;
                }
            }
            return isAdded;
        }        
        
    
        protected virtual void GetPageSize()
        {
        
            if (this.Pagination2.PageSize.Text.Length > 0) {
                try {
                    // this.PageSize = Convert.ToInt32(this.Pagination2.PageSize.Text);
                } catch (Exception ) {
                }
            }
        }

        protected virtual void AddNewRecords()
        {
          
            ArrayList newRecordList = new ArrayList();
          
            System.Collections.Generic.List<Hashtable> newUIDataList = new System.Collections.Generic.List<Hashtable>();
            // Loop though all the record controls and if the record control
            // does not have a unique record id set, then create a record
            // and add to the list.
            if (!this.ResetData)
            {
              System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsSC2Repeater"));
              if (rep == null){return;}
              
                foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
                {
                
                // Loop through all rows in the table, set its DataSource and call DataBind().
                DetailsSC2Row recControl = (DetailsSC2Row)(repItem.FindControl("DetailsSC2Row"));
      
            if (recControl.Visible && recControl.IsNewRecord) {
      RODetailsRecord rec = new RODetailsRecord();
        
                        if (recControl.ROItemDesc2.Text != "") {
                            rec.Parse(recControl.ROItemDesc2.Text, RODetailsTable.ROItemDesc);
                  }
                
                        if (recControl.ROPartNo2.Text != "") {
                            rec.Parse(recControl.ROPartNo2.Text, RODetailsTable.ROPartNo);
                  }
                
                        if (recControl.ROQuantity2.Text != "") {
                            rec.Parse(recControl.ROQuantity2.Text, RODetailsTable.ROQuantity);
                  }
                
                        if (recControl.ROSellPrice2.Text != "") {
                            rec.Parse(recControl.ROSellPrice2.Text, RODetailsTable.ROSellPrice);
                  }
                
              newUIDataList.Add(recControl.PreservedUIData());
              newRecordList.Add(rec);
            }
          }
        }
    
            // Add any new record to the list.
            for (int count = 1; count <= this.AddNewRecord; count++) {
              
                newRecordList.Insert(0, new RODetailsRecord());
                newUIDataList.Insert(0, new Hashtable());
              
            }
            this.AddNewRecord = 0;

            // Finally, add any new records to the DataSource.
            if (newRecordList.Count > 0) {
              
                ArrayList finalList = new ArrayList(this.DataSource);
                finalList.InsertRange(0, newRecordList);

                Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                this.DataSource = (RODetailsRecord[])(finalList.ToArray(myrec));
              
            }
            
            // Add the existing UI data to this hash table
            if (newUIDataList.Count > 0)
                this.UIData.InsertRange(0, newUIDataList);
        }

        
        public void AddToDeletedRecordIds(DetailsSC2Row rec)
        {
            if (rec.IsNewRecord) {
                return;
            }

            if (this.DeletedRecordIds != null && this.DeletedRecordIds.Length > 0) {
                this.DeletedRecordIds += ",";
            }

            this.DeletedRecordIds += "[" + rec.RecordUniqueId + "]";
        }

        protected virtual bool InDeletedRecordIds(DetailsSC2Row rec)            
        {
            if (this.DeletedRecordIds == null || this.DeletedRecordIds.Length == 0) {
                return (false);
            }

            return (this.DeletedRecordIds.IndexOf("[" + rec.RecordUniqueId + "]") >= 0);
        }

        private String _DeletedRecordIds;
        public String DeletedRecordIds {
            get {
                return (this._DeletedRecordIds);
            }
            set {
                this._DeletedRecordIds = value;
            }
        }
        
      
        // Create Set, WhereClause, and Populate Methods
        
        public virtual void SetGrandTotalLabel2()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.GrandTotalLabel2.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROItemDescLabel2()
                  {
                  
                        this.ROItemDescLabel2.Text = EvaluateFormula("\"Item Description\"");
                      
                    
        }
                
        public virtual void SetROPartNoLabel2()
                  {
                  
                        this.ROPartNoLabel2.Text = EvaluateFormula("\"Part Number\"");
                      
                    
        }
                
        public virtual void SetROQuantityLabel2()
                  {
                  
                        this.ROQuantityLabel2.Text = EvaluateFormula("\"Quantity\"");
                      
                    
        }
                
        public virtual void SetROSellPriceLabel2()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROSellPriceLabel2.Text = "Some value";
                    
                    
        }
                

    
        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    bool added = (this.AddNewRecord > 0);
                    this.LoadData();
                    this.DataBind();					
                    
                    if (added) this.SetFocusToAddedRow();
                }
                                
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            protected virtual void SetFocusToAddedRow()
            {
            System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)this.FindControl("DetailsSC2Repeater");
            if (rep == null || rep.Items.Count == 0) return; 			
            foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items) {
                // Loop through all rows in the table, set its DataSource and call DataBind().
                DetailsSC2Row recControl = (DetailsSC2Row)repItem.FindControl("DetailsSC2Row");
                if(recControl.IsNewRecord) {
                    foreach (Control field in recControl.Controls) {
                    if (field.Visible && this.Page.IsControlEditable(field, false)) {
                        //set focus on the first editable field in the new row
                        field.Focus();
                        UpdatePanel updPan = (UpdatePanel)this.Page.FindControlRecursively("UpdatePanel1");
                        if (updPan != null) updPan.Update();
                        return;
                        }
                    }
                    return;
                }
            }
        }
        
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
            // Save filter controls to values to session.
        
            
                    
            // Save pagination state to session.
         
    
            // Save table control properties to the session.
          
            if (this.CurrentSortOrder != null)
            {
                if ((this.CurrentSortOrder).GetType() != typeof(GeoOrderBy))
                {
                    this.SaveToSession(this, "Order_By", this.CurrentSortOrder.ToXmlString());
                }
            }
          
            this.SaveToSession(this, "Page_Index", this.PageIndex.ToString());
            this.SaveToSession(this, "Page_Size", this.PageSize.ToString());
          
            this.SaveToSession(this, "DeletedRecordIds", this.DeletedRecordIds);
        
        }
        
        
        protected  void SaveControlsToSession_Ajax()
        {
            // Save filter controls to values to session.
          
           HttpContext.Current.Session["AppRelativeVirtualPath"] = this.Page.AppRelativeVirtualPath;
         
        }
        
        
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();
            // Clear filter controls values from the session.
        
            
            // Clear pagination state from session.
         

    // Clear table properties from the session.
    this.RemoveFromSession(this, "Order_By");
    this.RemoveFromSession(this, "Page_Index");
    this.RemoveFromSession(this, "Page_Size");
    
            this.RemoveFromSession(this, "DeletedRecordIds");
            
        }

        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);

            string orderByStr = (string)ViewState["DetailsSC2_OrderBy"];
          
            if (orderByStr != null && orderByStr.Length > 0) {
                this.CurrentSortOrder = BaseClasses.Data.OrderBy.FromXmlString(orderByStr);
            }
          
            else {
                this.CurrentSortOrder = new OrderBy(true, false);
            }
          

            Control Pagination = this.FindControl("Pagination2");
            String PaginationType = "";
            if (Pagination != null){
              Control Summary = Pagination.FindControl("_Summary");
              if (Summary != null){
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination"){
                  PaginationType = "Infinite Pagination";
                }
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination Mobile"){
                  PaginationType = "Infinite Pagination Mobile";
              }
            }
            }
            
            if (!(PaginationType.Equals("Infinite Pagination"))) {
              if (!this.Page.ClientQueryString.Contains("InfiIframe") && PaginationType == "Infinite Pagination Mobile"){
                    this.ViewState["Page_Index"] = 0;
               }
	            string pageIndex = Convert.ToString(ViewState["Page_Index"]);
	            if (pageIndex != null) {
		            this.PageIndex = Convert.ToInt32(pageIndex);
	            }
            }
            
            string pageSize = Convert.ToString(ViewState["Page_Size"]);
            if ((pageSize != null)) {
	            this.PageSize = Convert.ToInt32(pageSize);
            }
            
          
            // Load view state for pagination control.
    
            this.DeletedRecordIds = (string)this.ViewState["DeletedRecordIds"];
        
        }

        protected override object SaveViewState()
        {            
          
            if (this.CurrentSortOrder != null) {
                this.ViewState["DetailsSC2_OrderBy"] = this.CurrentSortOrder.ToXmlString();
            }
          

    this.ViewState["Page_Index"] = this.PageIndex;
    this.ViewState["Page_Size"] = this.PageSize;
    
            this.ViewState["DeletedRecordIds"] = this.DeletedRecordIds;
        
    
            // Load view state for pagination control.
              
            return (base.SaveViewState());
        }

        // Generate set method for buttons
        
        public virtual void SetAddButton2()                
              
        {
        
              try
              {
                    string url = "../RODetails/Add-RODetails-Serv2.aspx?RONO={RepairOrdersRecordControl:FV:RONo}&TabVisible=False&SaveAndNewVisible=False";
              
                      
                    url = this.ModifyRedirectUrl(url, "", true);
                    
                    url = this.Page.ModifyRedirectUrl(url, "", true);                                  
                    
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(MiscUtils.FindControlRecursively(this, "DetailsSC2_PostbackTracker").ClientID);                           
                                
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(document.getElementById('" + MiscUtils.FindControlRecursively(this, "DetailsSC2_PostbackTracker").ClientID + "'), '" + url + "', true, event);";                                      
                       
                    this.AddButton2.Attributes["onClick"] = javascriptCall + "return false;";            
                }
                catch
                {
                    // do nothing.  If the code above fails, server side click event, AddButton2_ClickAddButton2_Click will be trigger when user click the button.
                }
                  
   
        }
            
        public virtual void SetDeleteButton2()                
              
        {
        
   
        }
            
        public virtual void SetActionsButton2()                
              
        {
        
   
        }
               
        
        // Generate the event handling functions for pagination events.
        
        // event handler for ImageButton
        public virtual void Pagination2_FirstPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex = 0;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination2_LastPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.DisplayLastPage = true;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination2_NextPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex += 1;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for LinkButton
        public virtual void Pagination2_PageSizeButton_Click(object sender, EventArgs args)
        {
              
            try {
                
            this.DataChanged = true;
      
            this.PageSize = this.Pagination2.GetCurrentPageSize();
      
            this.PageIndex = Convert.ToInt32(this.Pagination2.CurrentPage.Text) - 1;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination2_PreviousPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            if (this.PageIndex > 0) {
                this.PageIndex -= 1;
                this.DataChanged = true;
            }
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        

        // Generate the event handling functions for sorting events.
        

        // Generate the event handling functions for button events.
        
        // event handler for ImageButton
        public virtual void AddButton2_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../RODetails/Add-RODetails-Serv2.aspx?RONO={RepairOrdersRecordControl:FV:RONo}&TabVisible=False&SaveAndNewVisible=False";
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(MiscUtils.FindControlRecursively(this, "DetailsSC2_PostbackTracker").ClientID);                           
                                
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(document.getElementById('" + MiscUtils.FindControlRecursively(this, "DetailsSC2_PostbackTracker").ClientID + "'), '" + url + "', true, event);";                                      
                AjaxControlToolkit.ToolkitScriptManager.RegisterStartupScript(this, this.GetType(), "AddButton2_Click", javascriptCall, true);
        
            }
        
        }
            
            
        
        // event handler for ImageButton
        public virtual void DeleteButton2_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
            if (!this.Page.IsPageRefresh) {
        
                this.DeleteSelectedRecords(true);
                this.SetFormulaControls();
          
            }
      
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
    
        }
            
            
        
        // event handler for Button
        public virtual void ActionsButton2_Click(object sender, EventArgs args)
        {
              
            try {
                
            //This method is initially empty to implement custom click handler.
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        


        // Generate the event handling functions for filter and search events.
        
    
        // Generate the event handling functions for others
        	  

        protected int _TotalRecords = -1;
        public int TotalRecords 
        {
            get {
                if (_TotalRecords < 0)
                {
                    _TotalRecords = RODetailsTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause());
                }
                return (this._TotalRecords);
            }
            set {
                if (this.PageSize > 0) {
                  
                      this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
                          
                }
                this._TotalRecords = value;
            }
        }

      
      
        protected int _TotalPages = -1;
        public int TotalPages {
            get {
                if (_TotalPages < 0) 
                
                    this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(TotalRecords) / Convert.ToDouble(this.PageSize)));
                  
                return this._TotalPages;
            }
            set {
                this._TotalPages = value;
            }
        }

        protected bool _DisplayLastPage;
        public bool DisplayLastPage {
            get {
                return this._DisplayLastPage;
            }
            set {
                this._DisplayLastPage = value;
            }
        }


        
        private OrderBy _CurrentSortOrder = null;
        public OrderBy CurrentSortOrder {
            get {
                return this._CurrentSortOrder;
            }
            set {
                this._CurrentSortOrder = value;
            }
        }
        
        public  RODetailsRecord[] DataSource {
             
            get {
                return (RODetailsRecord[])(base._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }

#region "Helper Properties"
        
        public OEMConversion.UI.IThemeButtonWithArrow ActionsButton2 {
            get {
                return (OEMConversion.UI.IThemeButtonWithArrow)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ActionsButton2");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton AddButton2 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "AddButton2");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton DeleteButton2 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DeleteButton2");
            }
        }
        
        public System.Web.UI.WebControls.Label GrandTotalLabel2 {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "GrandTotalLabel2");
            }
        }
        
        public OEMConversion.UI.IPaginationModern Pagination2 {
            get {
                return (OEMConversion.UI.IPaginationModern)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Pagination2");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROItemDescLabel2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROItemDescLabel2");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROPartNoLabel2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPartNoLabel2");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROQuantityLabel2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROQuantityLabel2");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROSellPriceLabel2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSellPriceLabel2");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title2");
            }
        }
        
#endregion

#region "Helper Functions"
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
        }
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
        }
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                DetailsSC2Row recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        RODetailsRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                return EvaluateExpressions(url, arg, rec, bEncrypt);
             
            }
            return url;
        }
        
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt, bool includeSession)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                DetailsSC2Row recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        RODetailsRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                
                if (includeSession)
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt);
                }
                else
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt,false);
                }
             
            }
            return url;
        }
          
        public virtual DetailsSC2Row GetSelectedRecordControl()
        {
        
            return null;
          
        }

        public virtual DetailsSC2Row[] GetSelectedRecordControls()
        {
        
            return (DetailsSC2Row[])((new ArrayList()).ToArray(Type.GetType("OEMConversion.UI.Controls.Edit_RepairOrders.DetailsSC2Row")));
          
        }

        public virtual void DeleteSelectedRecords(bool deferDeletion)
        {
            DetailsSC2Row[] recordList = this.GetSelectedRecordControls();
            if (recordList.Length == 0) {
                // Localization.
                throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
            }
            
            foreach (DetailsSC2Row recCtl in recordList)
            {
                if (deferDeletion) {
                    if (!recCtl.IsNewRecord) {
                
                        this.AddToDeletedRecordIds(recCtl);
                  
                    }
                    recCtl.Visible = false;
                
                } else {
                
                    recCtl.Delete();
                    // Setting the DataChanged to True results in the page being refreshed with
                    // the most recent data from the database.  This happens in PreRender event
                    // based on the current sort, search and filter criteria.
                    this.DataChanged = true;
                    this.ResetData = true;
                  
                }
            }
        }

        public virtual DetailsSC2Row[] GetRecordControls()
        {
            Control[] recCtrls = BaseClasses.Utils.MiscUtils.FindControlsRecursively(this, "DetailsSC2Row");
	          List<DetailsSC2Row> list = new List<DetailsSC2Row>();
	          foreach (DetailsSC2Row recCtrl in recCtrls) {
		          list.Add(recCtrl);
	          }
	          return list.ToArray();
        }

        public new BaseApplicationPage Page 
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }
        
                

        
        
#endregion


    }
  
// Base class for the DetailsServiceCodesRow control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in DetailsServiceCodesRow.
public class BaseDetailsServiceCodesRow : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseDetailsServiceCodesRow()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in DetailsServiceCodesRow.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
                
        }

        // To customize, override this method in DetailsServiceCodesRow.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Show confirmation message on Click
              this.DeleteRowButton1.Attributes.Add("onClick", "return (confirm(\"" + ((BaseApplicationPage)this.Page).GetResourceValue("DeleteRecordConfirm", "OEMConversion") + "\"));");            
        
              // Register the event handlers.

          
                    this.DeleteRowButton1.Click += DeleteRowButton1_Click;
                        
                    this.EditRowButton1.Click += EditRowButton1_Click;
                        
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.RODetails record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = RODetailsTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // Since this is a row in the table, the data for this row is loaded by the 
            // LoadData method of the BaseDetailsServiceCodes when the data for the entire
            // table is loaded.
            
            this.DataSource = new RODetailsRecord();
            
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                
                
                Setro_totalprice1();
                SetROItemDesc();
                SetROPartNo();
                SetROQuantity();
                SetROSellPrice();
                SetDeleteRowButton1();
              
                SetEditRowButton1();
              

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void Setro_totalprice1()
        {
            
                    
            // Set the ro_totalprice Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ro_totalprice1 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the ro_totalprice is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ro_totalprice, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ro_totalprice1.Text = formattedValue;
                   
            } 
            
            else {
            
                // ro_totalprice is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ro_totalprice1.Text = EvaluateFormula("format(ro_totalpriceDefaultValue,c)", this.DataSource, @"C");
            		
            }
                               
        }
                
        public virtual void SetROItemDesc()
        {
            
                    
            // Set the ROItemDesc Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROItemDesc is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROItemDescSpecified) {
                								
                // If the ROItemDesc is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROItemDesc);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROItemDesc.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROItemDesc is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROItemDesc.Text = RODetailsTable.ROItemDesc.Format(RODetailsTable.ROItemDesc.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetROPartNo()
        {
            
                    
            // Set the ROPartNo Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROPartNo is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROPartNoSpecified) {
                								
                // If the ROPartNo is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
               string formattedValue = "";
               Boolean _isExpandableNonCompositeForeignKey = RODetailsTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RODetailsTable.ROPartNo);
               if(_isExpandableNonCompositeForeignKey &&RODetailsTable.ROPartNo.IsApplyDisplayAs)
                                  
                     formattedValue = RODetailsTable.GetDFKA(this.DataSource.ROPartNo.ToString(),RODetailsTable.ROPartNo, null);
                                    
               if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(formattedValue)))
                     formattedValue = this.DataSource.Format(RODetailsTable.ROPartNo);
                                  
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROPartNo.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROPartNo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROPartNo.Text = RODetailsTable.ROPartNo.Format(RODetailsTable.ROPartNo.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetROQuantity()
        {
            
                    
            // Set the ROQuantity Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROQuantity is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROQuantitySpecified) {
                								
                // If the ROQuantity is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROQuantity);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROQuantity.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROQuantity is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROQuantity.Text = RODetailsTable.ROQuantity.Format(RODetailsTable.ROQuantity.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetROSellPrice()
        {
            
                    
            // Set the ROSellPrice Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RODetails database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RODetails record retrieved from the database.
            // this.ROSellPrice is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROSellPriceSpecified) {
                								
                // If the ROSellPrice is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RODetailsTable.ROSellPrice, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ROSellPrice.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROSellPrice is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROSellPrice.Text = RODetailsTable.ROSellPrice.Format(RODetailsTable.ROSellPrice.DefaultValue, @"C");
            		
            }
                               
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        RepairOrdersRecordControl parentCtrl;
      
            parentCtrl = (RepairOrdersRecordControl)MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl");
          
        if (parentCtrl != null && parentCtrl.DataSource == null) {
        // Load the record if it is not loaded yet.
        parentCtrl.LoadData();
        }
        if (parentCtrl == null || parentCtrl.DataSource == null) {
        // Get the error message from the application resource file.
        throw new Exception(Page.GetResourceValue("Err:NoParentRecId", "OEMConversion"));
        }
        
          this.DataSource.RONo = parentCtrl.DataSource.RONo;
        
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
                // Set the DataChanged flag to True for the for the related panels so they get refreshed as well.
                ((DetailsServiceCodes)MiscUtils.GetParentControlObject(this, "DetailsServiceCodes")).DataChanged = true;
                ((DetailsServiceCodes)MiscUtils.GetParentControlObject(this, "DetailsServiceCodes")).ResetData = true;
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            Getro_totalprice1();
            GetROItemDesc();
            GetROPartNo();
            GetROQuantity();
            GetROSellPrice();
        }
        
        
        public virtual void Getro_totalprice1()
        {
            
        }
                
        public virtual void GetROItemDesc()
        {
            
        }
                
        public virtual void GetROPartNo()
        {
            
        }
                
        public virtual void GetROQuantity()
        {
            
        }
                
        public virtual void GetROSellPrice()
        {
            
        }
                

      // To customize, override this method in DetailsServiceCodesRow.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            return null;
        
        }
        
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          RODetailsTable.DeleteRecord(pkValue);
          
              
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            ((DetailsServiceCodes)MiscUtils.GetParentControlObject(this, "DetailsServiceCodes")).DataChanged = true;
            ((DetailsServiceCodes)MiscUtils.GetParentControlObject(this, "DetailsServiceCodes")).ResetData = true;
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                
            this.Page.Authorize((Control)DeleteRowButton1, "3");
									
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
    
        // Generate set method for buttons
        
        public virtual void SetDeleteRowButton1()                
              
        {
        
   
        }
            
        public virtual void SetEditRowButton1()                
              
        {
        
   
        }
            
        // event handler for ImageButton
        public virtual void DeleteRowButton1_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
            if (!this.Page.IsPageRefresh) {
        DetailsServiceCodes tc= ((DetailsServiceCodes)MiscUtils.GetParentControlObject(this, "DetailsServiceCodes"));
                if (tc != null){
                    if (!this.IsNewRecord){
                        tc.AddToDeletedRecordIds((DetailsServiceCodesRow)this);
                    }
                    this.Visible = false;
                    tc.SetFormulaControls();                    
                }
              
            }
      
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void EditRowButton1_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../RODetails/Edit-RODetails.aspx?RODetails={PK}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseDetailsServiceCodesRow_Rec"];
            }
            set {
                this.ViewState["BaseDetailsServiceCodesRow_Rec"] = value;
            }
        }
        
        public RODetailsRecord DataSource {
            get {
                return (RODetailsRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.ImageButton DeleteRowButton1 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DeleteRowButton1");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton EditRowButton1 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "EditRowButton1");
            }
        }
        
        public System.Web.UI.WebControls.Literal ro_totalprice1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_totalprice1");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROItemDesc {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROItemDesc");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROPartNo {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPartNo");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROQuantity {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROQuantity");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROSellPrice {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSellPrice");
            }
        }
            
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        RODetailsRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    RODetailsRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual RODetailsRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return RODetailsTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            return null;
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the DetailsServiceCodes control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in DetailsServiceCodes.
public class BaseDetailsServiceCodes : OEMConversion.UI.BaseApplicationTableControl
{
         
       public BaseDetailsServiceCodes()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
      
    
           // Setup the filter and search.
        


      
      
            // Control Initializations.
            // Initialize the table's current sort order.

            if (this.InSession(this, "Order_By"))
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));         
            else
            {
                   
                this.CurrentSortOrder = new OrderBy(true, false);
            
                this.CurrentSortOrder.Add(RODetailsTable.ROSort, OrderByItem.OrderDir.Asc);
              
        }



    // Setup default pagination settings.
    
            this.PageSize = Convert.ToInt32(this.GetFromSession(this, "Page_Size", "25"));
            this.PageIndex = Convert.ToInt32(this.GetFromSession(this, "Page_Index", "0"));
                     
        }

        protected virtual void Control_Load(object sender, EventArgs e)
        {
        
            SaveControlsToSession_Ajax();
        
              // Show confirmation message on Click
              this.DeleteButton1.Attributes.Add("onClick", "return (confirm(\"" + ((BaseApplicationPage)this.Page).GetResourceValue("DeleteConfirm", "OEMConversion") + "\"));");
            // Setup the pagination events.
            
                    this.Pagination1.FirstPage.Click += Pagination1_FirstPage_Click;
                        
                    this.Pagination1.LastPage.Click += Pagination1_LastPage_Click;
                        
                    this.Pagination1.NextPage.Click += Pagination1_NextPage_Click;
                        
                    this.Pagination1.PageSizeButton.Click += Pagination1_PageSizeButton_Click;
                        
                    this.Pagination1.PreviousPage.Click += Pagination1_PreviousPage_Click;
                        

            string url =""; //to avoid warning in VS as its not being used
            if(url == null) url=""; //to avoid warning in VS as its not being used
        
       // Setup the sorting events.
        
              this.ro_totalpriceLabel1.Click += ro_totalpriceLabel1_Click;
            
            // Setup the button events.
          
                    this.AddButton1.Click += AddButton1_Click;
                        
                    this.DeleteButton1.Click += DeleteButton1_Click;
                        
                    this.ActionsButton1.Button.Click += ActionsButton1_Click;
                                
        
         //' Setup events for others
               
        }

        public virtual void LoadData()
        {
            // Read data from database. Returns an array of records that can be assigned
            // to the DataSource table control property.
            try {
                  CompoundFilter joinFilter = CreateCompoundJoinFilter();
                
                  // The WHERE clause will be empty when displaying all records in table.
                  WhereClause wc = CreateWhereClause();
                  if (wc != null && !wc.RunQuery) {
                        // Initialize an empty array of records
                      ArrayList alist = new ArrayList(0);
                      Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                      this.DataSource = (RODetailsRecord[])(alist.ToArray(myrec));
                      // Add records to the list if needed.
                      this.AddNewRecords();
                      this._TotalRecords = 0;
                      this._TotalPages = 0;
                      return;
                  }

                  // Call OrderBy to determine the order - either use the order defined
                  // on the Query Wizard, or specified by user (by clicking on column heading)

                  OrderBy orderBy = CreateOrderBy();

      
                // Get the pagesize from the pagesize control.
                this.GetPageSize();
                if (this.DisplayLastPage)
                {
                    int totalRecords = this._TotalRecords < 0? GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause()): this._TotalRecords;
                     
                        int totalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(totalRecords) / Convert.ToDouble(this.PageSize)));
                       
                    this.PageIndex = totalPages - 1;                
                }
                
                // Make sure PageIndex (current page) and PageSize are within bounds.
                if (this.PageIndex < 0)
                    this.PageIndex = 0;
                if (this.PageSize < 1)
                    this.PageSize = 1;
                
                
                // Retrieve the records and set the table DataSource.
                // Only PageSize records are fetched starting at PageIndex (zero based).
                if (this.AddNewRecord > 0) {
                    // Make sure to preserve the previously entered data on new rows.
                    ArrayList postdata = new ArrayList(0);
                    foreach (DetailsServiceCodesRow rc in this.GetRecordControls()) {
                        if (!rc.IsNewRecord) {
                            rc.DataSource = rc.GetRecord();
                            rc.GetUIData();
                            postdata.Add(rc.DataSource);
                            UIData.Add(rc.PreservedUIData());
                        }
                    }
                    Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                    this.DataSource = (RODetailsRecord[])(postdata.ToArray(myrec));
                } 
                else {
                    // Get the records from the database
                    
                        this.DataSource = GetRecords(joinFilter, wc, orderBy, this.PageIndex, this.PageSize);
                                          
                }
                
                // if the datasource contains no records contained in database, then load the last page.
                if (DbUtils.GetCreatedRecords(this.DataSource).Length == 0 && !this.DisplayLastPage)
                {
                      this.DisplayLastPage = true;
                      LoadData();
                }
                else
                {
                    // Add any new rows desired by the user.
                    this.AddNewRecords();
                    
    
                    // Initialize the page and grand totals. now
                
            this.ro_totalpriceGrandTotal1.Text = this.Getro_totalpriceGrandTotal1();
            if (this.ro_totalpriceGrandTotal1.Text == null || 
                this.ro_totalpriceGrandTotal1.Text.Length == 0) {
                this.ro_totalpriceGrandTotal1.Text = "&nbsp;";
            }
                }                 
                

    
            } catch (Exception ex) {
                // Report the error message to the end user
                    String msg = ex.Message;
                    if (ex.InnerException != null)
                        msg += " InnerException: " + ex.InnerException.Message;

                    throw new Exception(msg, ex.InnerException);
            }
        }
        
        public virtual RODetailsRecord[] GetRecords(BaseFilter join, WhereClause where, OrderBy orderBy, int pageIndex, int pageSize)
        {    
            // by default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               
    
            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecordCount as well
            // selCols.Add(RODetailsTable.Column1, true);          
            // selCols.Add(RODetailsTable.Column2, true);          
            // selCols.Add(RODetailsTable.Column3, true);          
            

            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                  
            {
              
                return RODetailsTable.GetRecords(join, where, orderBy, this.PageIndex, this.PageSize);
                 
            }
            else
            {
                RODetailsTable databaseTable = new RODetailsTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);
                
            
                
                ArrayList recList; 
                orderBy.ExpandForeignKeyColums = false;
                recList = databaseTable.GetRecordList(join, where.GetFilter(), null, orderBy, pageIndex, pageSize);
                return (recList.ToArray(typeof(RODetailsRecord)) as RODetailsRecord[]);
            }            
            
        }
        
        
        public virtual int GetRecordCount(BaseFilter join, WhereClause where)
        {

            // By default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               


            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecords as well
            // selCols.Add(RODetailsTable.Column1, true);          
            // selCols.Add(RODetailsTable.Column2, true);          
            // selCols.Add(RODetailsTable.Column3, true);          


            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                     
            
                return RODetailsTable.GetRecordCount(join, where);
            else
            {
                RODetailsTable databaseTable = new RODetailsTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);        
                
                return (int)(databaseTable.GetRecordListCount(join, where.GetFilter(), null, null));
            }

        }
        
      
    
      public override void DataBind()
      {
          // The DataBind method binds the user interface controls to the values
          // from the database record for each row in the table.  To do this, it calls the
          // DataBind for each of the rows.
          // DataBind also populates any filters above the table, and sets the pagination
          // control to the correct number of records and the current page number.
         
          
          base.DataBind();
          

          this.ClearControlsFromSession();
          
          // Make sure that the DataSource is initialized.
          if (this.DataSource == null) {
              return;
          }
          
          //  LoadData for DataSource for chart and report if they exist
          
            // Improve performance by prefetching display as records.
            this.PreFetchForeignKeyValues();     

            // Setup the pagination controls.
            BindPaginationControls();

    
        
        // Bind the repeater with the list of records to expand the UI.
        
        System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsServiceCodesRepeater"));
        if (rep == null){return;}
        rep.DataSource = this.DataSource;
        rep.DataBind();
        
        int index = 0;
        
        foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
        {
        
            // Loop through all rows in the table, set its DataSource and call DataBind().
            DetailsServiceCodesRow recControl = (DetailsServiceCodesRow)(repItem.FindControl("DetailsServiceCodesRow"));
            recControl.DataSource = this.DataSource[index];            
            if (this.UIData.Count > index)
                recControl.PreviousUIData = this.UIData[index];
            recControl.DataBind();
            
           
            recControl.Visible = !this.InDeletedRecordIds(recControl);
        
            index++;
        }
           
    
            // Call the Set methods for each controls on the panel
        
                
                
                
                SetGrandTotalLabel1();
                
                
                Setro_totalpriceLabel1();
                SetROItemDescLabel();
                SetROPartNoLabel();
                SetROQuantityLabel();
                SetROSellPriceLabel();
                
                SetAddButton1();
              
                SetDeleteButton1();
              
                SetActionsButton1();
              
            // setting the state of expand or collapse alternative rows
      
            // Load data for each record and table UI control.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
                
      
            // this method calls the set method for controls with special formula like running total, sum, rank, etc
            SetFormulaControls();
            
                    
        }
        
        
        public virtual void SetFormulaControls()
        {
            // this method calls Set methods for the control that has special formula
        

    }

        
        public void PreFetchForeignKeyValues() {
            if (this.DataSource == null) {
                return;
            }
          
            this.Page.PregetDfkaRecords(RODetailsTable.ROPartNo, this.DataSource);
        }
        

        public virtual void RegisterPostback()
        {
                
        }
        

        
          public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

          public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
          {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();

            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            if (includeDS)
            {
                
            }

            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
        
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
           
        public virtual void ResetControl()
        {


            
            this.CurrentSortOrder.Reset();
            if (this.InSession(this, "Order_By")) {
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));
            }
            else {
            
                this.CurrentSortOrder = new OrderBy(true, false);
            
                this.CurrentSortOrder.Add(RODetailsTable.ROSort, OrderByItem.OrderDir.Asc);
                 
            }
                
            this.PageIndex = 0;
        }
        
        public virtual void ResetPageControl()
        {
            this.PageIndex = 0;
        }
        
        protected virtual void BindPaginationControls()
        {
            // Setup the pagination controls.   

            // Bind the pagination labels.
        
            if (DbUtils.GetCreatedRecords(this.DataSource).Length > 0)                      
                    
            {
                this.Pagination1.CurrentPage.Text = (this.PageIndex + 1).ToString();
            } 
            else
            {
                this.Pagination1.CurrentPage.Text = "0";
            }
            this.Pagination1.PageSize.Text = this.PageSize.ToString();
    
            // Bind the buttons for DetailsServiceCodes pagination.
        
            this.Pagination1.FirstPage.Enabled = !(this.PageIndex == 0);
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination1.LastPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination1.LastPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination1.LastPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination1.NextPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination1.NextPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination1.NextPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            this.Pagination1.PreviousPage.Enabled = !(this.PageIndex == 0);    
        }
 
        public virtual void SaveData()
        {
            // Save the data from the entire table.  Calls each row's Save Data
            // to save their data.  This function is called by the Click handler of the
            // Save button.  The button handler should Start/Commit/End a transaction.
              
            foreach (DetailsServiceCodesRow recCtl in this.GetRecordControls())
            {
        
                if (this.InDeletedRecordIds(recCtl)) {
                    // Delete any pending deletes. 
                    recCtl.Delete();
                }
                else {
                    if (recCtl.Visible) {
                        recCtl.SaveData();
                    }
                }
          
            }

          
    
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
          
            // Set IsNewRecord to False for all records - since everything has been saved and is no longer "new"
            foreach (DetailsServiceCodesRow recCtl in this.GetRecordControls()){
                recCtl.IsNewRecord = false;
            }
      
            // Set DeletedRecordsIds to Nothing since we have deleted all pending deletes.
            this.DeletedRecordIds = null;
                
        }
        
        public virtual CompoundFilter CreateCompoundJoinFilter()
        {
            CompoundFilter jFilter = new CompoundFilter();
        
           return jFilter;
        }      
        
    
        public virtual OrderBy CreateOrderBy()
        {
            // The CurrentSortOrder is initialized to the sort order on the 
            // Query Wizard.  It may be modified by the Click handler for any of
            // the column heading to sort or reverse sort by that column.
            // You can add your own sort order, or modify it on the Query Wizard.
            return this.CurrentSortOrder;
        }
         
        
        private string parentSelectedKeyValue;
        public string ParentSelectedKeyValue
        {
          get
          {
            return parentSelectedKeyValue;
          }
          set
          {
            parentSelectedKeyValue = value;
          }
        }

    
        public virtual WhereClause CreateWhereClause()
        {
            // This CreateWhereClause is used for loading the data.
            RODetailsTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
    
            // CreateWhereClause() Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
        
      KeyValue selectedRecordKeyValue = new KeyValue();
    RepairOrdersRecordControl repairOrdersRecordControlObj = (MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl") as RepairOrdersRecordControl);
          
              if (repairOrdersRecordControlObj != null && repairOrdersRecordControlObj.GetRecord() != null && repairOrdersRecordControlObj.GetRecord().IsCreated)
              {
              wc.iAND(RODetailsTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              selectedRecordKeyValue.AddElement(RODetailsTable.RONo.InternalName, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              }
              else
              {
              wc.RunQuery = false;
              return wc;
              }
            
      HttpContext.Current.Session["DetailsServiceCodesWhereClause"] = selectedRecordKeyValue.ToXmlString();
    
            // Get the static clause defined at design time on the Table Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
               
            return wc;
        }
        
         
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            RODetailsTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
        
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
      string selectedRecordInRepairOrdersRecordControl = HttpContext.Current.Session["DetailsServiceCodesWhereClause"] as string;
      
      if (selectedRecordInRepairOrdersRecordControl != null && KeyValue.IsXmlKey(selectedRecordInRepairOrdersRecordControl))
      {
      KeyValue selectedRecordKeyValue = KeyValue.XmlToKey(selectedRecordInRepairOrdersRecordControl);
      
      if (selectedRecordKeyValue != null && selectedRecordKeyValue.ContainsColumn(RODetailsTable.RONo))
      {
      wc.iAND(RODetailsTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(RODetailsTable.RONo).ToString());
      }
    
      }
    
            // Get the static clause defined at design time on the Table Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
          

            return wc;
        }

        
        protected virtual WhereClause CreateQueryClause()
        {
            // Create a where clause for the Static clause defined at design time.
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("\"2\"", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RODetailsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RODetails_.ROLineType"), EvaluateFormula("\"2\"", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("\"2\"", false) == "--PLEASE_SELECT--" || EvaluateFormula("\"2\"", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;
        }
          
          
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }          
          
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    
                    resultList.Add(itemToAdd);
          								
                    isAdded = true;
                }
            }
            return isAdded;
        }        
        
    
        protected virtual void GetPageSize()
        {
        
            if (this.Pagination1.PageSize.Text.Length > 0) {
                try {
                    // this.PageSize = Convert.ToInt32(this.Pagination1.PageSize.Text);
                } catch (Exception ) {
                }
            }
        }

        protected virtual void AddNewRecords()
        {
          
            ArrayList newRecordList = new ArrayList();
          
            System.Collections.Generic.List<Hashtable> newUIDataList = new System.Collections.Generic.List<Hashtable>();
            // Loop though all the record controls and if the record control
            // does not have a unique record id set, then create a record
            // and add to the list.
            if (!this.ResetData)
            {
              System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsServiceCodesRepeater"));
              if (rep == null){return;}
              
                foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
                {
                
                // Loop through all rows in the table, set its DataSource and call DataBind().
                DetailsServiceCodesRow recControl = (DetailsServiceCodesRow)(repItem.FindControl("DetailsServiceCodesRow"));
      
            if (recControl.Visible && recControl.IsNewRecord) {
      RODetailsRecord rec = new RODetailsRecord();
        
                        if (recControl.ro_totalprice1.Text != "") {
                            rec.Parse(recControl.ro_totalprice1.Text, RODetailsTable.ro_totalprice);
                  }
                
                        if (recControl.ROItemDesc.Text != "") {
                            rec.Parse(recControl.ROItemDesc.Text, RODetailsTable.ROItemDesc);
                  }
                
                        if (recControl.ROPartNo.Text != "") {
                            rec.Parse(recControl.ROPartNo.Text, RODetailsTable.ROPartNo);
                  }
                
                        if (recControl.ROQuantity.Text != "") {
                            rec.Parse(recControl.ROQuantity.Text, RODetailsTable.ROQuantity);
                  }
                
                        if (recControl.ROSellPrice.Text != "") {
                            rec.Parse(recControl.ROSellPrice.Text, RODetailsTable.ROSellPrice);
                  }
                
              newUIDataList.Add(recControl.PreservedUIData());
              newRecordList.Add(rec);
            }
          }
        }
    
            // Add any new record to the list.
            for (int count = 1; count <= this.AddNewRecord; count++) {
              
                newRecordList.Insert(0, new RODetailsRecord());
                newUIDataList.Insert(0, new Hashtable());
              
            }
            this.AddNewRecord = 0;

            // Finally, add any new records to the DataSource.
            if (newRecordList.Count > 0) {
              
                ArrayList finalList = new ArrayList(this.DataSource);
                finalList.InsertRange(0, newRecordList);

                Type myrec = typeof(OEMConversion.Business.RODetailsRecord);
                this.DataSource = (RODetailsRecord[])(finalList.ToArray(myrec));
              
            }
            
            // Add the existing UI data to this hash table
            if (newUIDataList.Count > 0)
                this.UIData.InsertRange(0, newUIDataList);
        }

        
        public void AddToDeletedRecordIds(DetailsServiceCodesRow rec)
        {
            if (rec.IsNewRecord) {
                return;
            }

            if (this.DeletedRecordIds != null && this.DeletedRecordIds.Length > 0) {
                this.DeletedRecordIds += ",";
            }

            this.DeletedRecordIds += "[" + rec.RecordUniqueId + "]";
        }

        protected virtual bool InDeletedRecordIds(DetailsServiceCodesRow rec)            
        {
            if (this.DeletedRecordIds == null || this.DeletedRecordIds.Length == 0) {
                return (false);
            }

            return (this.DeletedRecordIds.IndexOf("[" + rec.RecordUniqueId + "]") >= 0);
        }

        private String _DeletedRecordIds;
        public String DeletedRecordIds {
            get {
                return (this._DeletedRecordIds);
            }
            set {
                this._DeletedRecordIds = value;
            }
        }
        
      
        // Create Set, WhereClause, and Populate Methods
        
        public virtual void SetGrandTotalLabel1()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.GrandTotalLabel1.Text = "Some value";
                    
                    
        }
                
        public virtual void Setro_totalpriceLabel1()
                  {
                  
                    
        }
                
        public virtual void SetROItemDescLabel()
                  {
                  
                        this.ROItemDescLabel.Text = EvaluateFormula("\"Item Description\"");
                      
                    
        }
                
        public virtual void SetROPartNoLabel()
                  {
                  
                        this.ROPartNoLabel.Text = EvaluateFormula("\"Part Number\"");
                      
                    
        }
                
        public virtual void SetROQuantityLabel()
                  {
                  
                        this.ROQuantityLabel.Text = EvaluateFormula("\"Quantity\"");
                      
                    
        }
                
        public virtual void SetROSellPriceLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROSellPriceLabel.Text = "Some value";
                    
                    
        }
                
        protected virtual string Getro_totalpriceGrandTotal1()
        {
            WhereClause wc = this.CreateWhereClause();            
            CompoundFilter joinFilter = this.CreateCompoundJoinFilter();
              
            OrderBy orderBy = new OrderBy(true, false);     
            string ro_totalpriceSum = RODetailsTable.GetSum(RODetailsTable.ro_totalprice, joinFilter, wc, orderBy, BaseTable.MIN_PAGE_NUMBER, BaseTable.MAX_BATCH_SIZE);
                
            return RODetailsTable.ro_totalprice.Format(ro_totalpriceSum);
              
              
        }
          

    
        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    bool added = (this.AddNewRecord > 0);
                    this.LoadData();
                    this.DataBind();					
                    
                    if (added) this.SetFocusToAddedRow();
                }
                                
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            protected virtual void SetFocusToAddedRow()
            {
            System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)this.FindControl("DetailsServiceCodesRepeater");
            if (rep == null || rep.Items.Count == 0) return; 			
            foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items) {
                // Loop through all rows in the table, set its DataSource and call DataBind().
                DetailsServiceCodesRow recControl = (DetailsServiceCodesRow)repItem.FindControl("DetailsServiceCodesRow");
                if(recControl.IsNewRecord) {
                    foreach (Control field in recControl.Controls) {
                    if (field.Visible && this.Page.IsControlEditable(field, false)) {
                        //set focus on the first editable field in the new row
                        field.Focus();
                        UpdatePanel updPan = (UpdatePanel)this.Page.FindControlRecursively("UpdatePanel1");
                        if (updPan != null) updPan.Update();
                        return;
                        }
                    }
                    return;
                }
            }
        }
        
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
            // Save filter controls to values to session.
        
            
                    
            // Save pagination state to session.
         
    
            // Save table control properties to the session.
          
            if (this.CurrentSortOrder != null)
            {
                if ((this.CurrentSortOrder).GetType() != typeof(GeoOrderBy))
                {
                    this.SaveToSession(this, "Order_By", this.CurrentSortOrder.ToXmlString());
                }
            }
          
            this.SaveToSession(this, "Page_Index", this.PageIndex.ToString());
            this.SaveToSession(this, "Page_Size", this.PageSize.ToString());
          
            this.SaveToSession(this, "DeletedRecordIds", this.DeletedRecordIds);
        
        }
        
        
        protected  void SaveControlsToSession_Ajax()
        {
            // Save filter controls to values to session.
          
           HttpContext.Current.Session["AppRelativeVirtualPath"] = this.Page.AppRelativeVirtualPath;
         
        }
        
        
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();
            // Clear filter controls values from the session.
        
            
            // Clear pagination state from session.
         

    // Clear table properties from the session.
    this.RemoveFromSession(this, "Order_By");
    this.RemoveFromSession(this, "Page_Index");
    this.RemoveFromSession(this, "Page_Size");
    
            this.RemoveFromSession(this, "DeletedRecordIds");
            
        }

        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);

            string orderByStr = (string)ViewState["DetailsServiceCodes_OrderBy"];
          
            if (orderByStr != null && orderByStr.Length > 0) {
                this.CurrentSortOrder = BaseClasses.Data.OrderBy.FromXmlString(orderByStr);
            }
          
            else {
                this.CurrentSortOrder = new OrderBy(true, false);
            }
          

            Control Pagination = this.FindControl("Pagination1");
            String PaginationType = "";
            if (Pagination != null){
              Control Summary = Pagination.FindControl("_Summary");
              if (Summary != null){
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination"){
                  PaginationType = "Infinite Pagination";
                }
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination Mobile"){
                  PaginationType = "Infinite Pagination Mobile";
              }
            }
            }
            
            if (!(PaginationType.Equals("Infinite Pagination"))) {
              if (!this.Page.ClientQueryString.Contains("InfiIframe") && PaginationType == "Infinite Pagination Mobile"){
                    this.ViewState["Page_Index"] = 0;
               }
	            string pageIndex = Convert.ToString(ViewState["Page_Index"]);
	            if (pageIndex != null) {
		            this.PageIndex = Convert.ToInt32(pageIndex);
	            }
            }
            
            string pageSize = Convert.ToString(ViewState["Page_Size"]);
            if ((pageSize != null)) {
	            this.PageSize = Convert.ToInt32(pageSize);
            }
            
          
            // Load view state for pagination control.
    
            this.DeletedRecordIds = (string)this.ViewState["DeletedRecordIds"];
        
        }

        protected override object SaveViewState()
        {            
          
            if (this.CurrentSortOrder != null) {
                this.ViewState["DetailsServiceCodes_OrderBy"] = this.CurrentSortOrder.ToXmlString();
            }
          

    this.ViewState["Page_Index"] = this.PageIndex;
    this.ViewState["Page_Size"] = this.PageSize;
    
            this.ViewState["DeletedRecordIds"] = this.DeletedRecordIds;
        
    
            // Load view state for pagination control.
              
            return (base.SaveViewState());
        }

        // Generate set method for buttons
        
        public virtual void SetAddButton1()                
              
        {
        
              try
              {
                    string url = "../RODetails/Add-RODetails-Serv.aspx?RONO={RepairOrdersRecordControl:FV:RONo}&TabVisible=False&SaveAndNewVisible=False";
              
                      
                    url = this.ModifyRedirectUrl(url, "", true);
                    
                    url = this.Page.ModifyRedirectUrl(url, "", true);                                  
                    
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(MiscUtils.FindControlRecursively(this, "DetailsServiceCodes_PostbackTracker").ClientID);                           
                                
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(document.getElementById('" + MiscUtils.FindControlRecursively(this, "DetailsServiceCodes_PostbackTracker").ClientID + "'), '" + url + "', true, event);";                                      
                       
                    this.AddButton1.Attributes["onClick"] = javascriptCall + "return false;";            
                }
                catch
                {
                    // do nothing.  If the code above fails, server side click event, AddButton1_ClickAddButton1_Click will be trigger when user click the button.
                }
                  
   
        }
            
        public virtual void SetDeleteButton1()                
              
        {
        
   
        }
            
        public virtual void SetActionsButton1()                
              
        {
        
   
        }
               
        
        // Generate the event handling functions for pagination events.
        
        // event handler for ImageButton
        public virtual void Pagination1_FirstPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex = 0;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination1_LastPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.DisplayLastPage = true;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination1_NextPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex += 1;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for LinkButton
        public virtual void Pagination1_PageSizeButton_Click(object sender, EventArgs args)
        {
              
            try {
                
            this.DataChanged = true;
      
            this.PageSize = this.Pagination1.GetCurrentPageSize();
      
            this.PageIndex = Convert.ToInt32(this.Pagination1.CurrentPage.Text) - 1;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination1_PreviousPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            if (this.PageIndex > 0) {
                this.PageIndex -= 1;
                this.DataChanged = true;
            }
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        

        // Generate the event handling functions for sorting events.
        
        public virtual void ro_totalpriceLabel1_Click(object sender, EventArgs args)
        {
            //Sorts by ro_totalprice when clicked.
              
            // Get previous sorting state for ro_totalprice.
        
            OrderByItem sd = this.CurrentSortOrder.Find(RODetailsTable.ro_totalprice);
            if (sd == null || (this.CurrentSortOrder.Items != null && this.CurrentSortOrder.Items.Length > 1)) {
                // First time sort, so add sort order for ro_totalprice.
                this.CurrentSortOrder.Reset();

    
              //If default sort order was GeoProximity, create new CurrentSortOrder of OrderBy type
              if ((this.CurrentSortOrder).GetType() == typeof(GeoOrderBy)) this.CurrentSortOrder = new OrderBy(true, false);

              this.CurrentSortOrder.Add(RODetailsTable.ro_totalprice, OrderByItem.OrderDir.Asc);
            
            } else {
                // Previously sorted by ro_totalprice, so just reverse.
                sd.Reverse();
            }
        

            // Setting the DataChanged to true results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
              
        }
            

        // Generate the event handling functions for button events.
        
        // event handler for ImageButton
        public virtual void AddButton1_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../RODetails/Add-RODetails-Serv.aspx?RONO={RepairOrdersRecordControl:FV:RONo}&TabVisible=False&SaveAndNewVisible=False";
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(MiscUtils.FindControlRecursively(this, "DetailsServiceCodes_PostbackTracker").ClientID);                           
                                
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(document.getElementById('" + MiscUtils.FindControlRecursively(this, "DetailsServiceCodes_PostbackTracker").ClientID + "'), '" + url + "', true, event);";                                      
                AjaxControlToolkit.ToolkitScriptManager.RegisterStartupScript(this, this.GetType(), "AddButton1_Click", javascriptCall, true);
        
            }
        
        }
            
            
        
        // event handler for ImageButton
        public virtual void DeleteButton1_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
            if (!this.Page.IsPageRefresh) {
        
                this.DeleteSelectedRecords(true);
                this.SetFormulaControls();
          
            }
      
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
    
        }
            
            
        
        // event handler for Button
        public virtual void ActionsButton1_Click(object sender, EventArgs args)
        {
              
            try {
                
            //This method is initially empty to implement custom click handler.
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        


        // Generate the event handling functions for filter and search events.
        
    
        // Generate the event handling functions for others
        	  

        protected int _TotalRecords = -1;
        public int TotalRecords 
        {
            get {
                if (_TotalRecords < 0)
                {
                    _TotalRecords = RODetailsTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause());
                }
                return (this._TotalRecords);
            }
            set {
                if (this.PageSize > 0) {
                  
                      this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
                          
                }
                this._TotalRecords = value;
            }
        }

      
      
        protected int _TotalPages = -1;
        public int TotalPages {
            get {
                if (_TotalPages < 0) 
                
                    this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(TotalRecords) / Convert.ToDouble(this.PageSize)));
                  
                return this._TotalPages;
            }
            set {
                this._TotalPages = value;
            }
        }

        protected bool _DisplayLastPage;
        public bool DisplayLastPage {
            get {
                return this._DisplayLastPage;
            }
            set {
                this._DisplayLastPage = value;
            }
        }


        
        private OrderBy _CurrentSortOrder = null;
        public OrderBy CurrentSortOrder {
            get {
                return this._CurrentSortOrder;
            }
            set {
                this._CurrentSortOrder = value;
            }
        }
        
        public  RODetailsRecord[] DataSource {
             
            get {
                return (RODetailsRecord[])(base._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }

#region "Helper Properties"
        
        public OEMConversion.UI.IThemeButtonWithArrow ActionsButton1 {
            get {
                return (OEMConversion.UI.IThemeButtonWithArrow)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ActionsButton1");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton AddButton1 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "AddButton1");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton DeleteButton1 {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DeleteButton1");
            }
        }
        
        public System.Web.UI.WebControls.Label GrandTotalLabel1 {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "GrandTotalLabel1");
            }
        }
        
        public OEMConversion.UI.IPaginationModern Pagination1 {
            get {
                return (OEMConversion.UI.IPaginationModern)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Pagination1");
            }
        }
        
        public System.Web.UI.WebControls.Label ro_totalpriceGrandTotal1 {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_totalpriceGrandTotal1");
            }
        }
        
        public System.Web.UI.WebControls.LinkButton ro_totalpriceLabel1 {
            get {
                return (System.Web.UI.WebControls.LinkButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_totalpriceLabel1");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROItemDescLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROItemDescLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROPartNoLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPartNoLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROQuantityLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROQuantityLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROSellPriceLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSellPriceLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title3");
            }
        }
        
#endregion

#region "Helper Functions"
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
        }
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
        }
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                DetailsServiceCodesRow recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        RODetailsRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                return EvaluateExpressions(url, arg, rec, bEncrypt);
             
            }
            return url;
        }
        
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt, bool includeSession)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                DetailsServiceCodesRow recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        RODetailsRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                
                if (includeSession)
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt);
                }
                else
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt,false);
                }
             
            }
            return url;
        }
          
        public virtual DetailsServiceCodesRow GetSelectedRecordControl()
        {
        
            return null;
          
        }

        public virtual DetailsServiceCodesRow[] GetSelectedRecordControls()
        {
        
            return (DetailsServiceCodesRow[])((new ArrayList()).ToArray(Type.GetType("OEMConversion.UI.Controls.Edit_RepairOrders.DetailsServiceCodesRow")));
          
        }

        public virtual void DeleteSelectedRecords(bool deferDeletion)
        {
            DetailsServiceCodesRow[] recordList = this.GetSelectedRecordControls();
            if (recordList.Length == 0) {
                // Localization.
                throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
            }
            
            foreach (DetailsServiceCodesRow recCtl in recordList)
            {
                if (deferDeletion) {
                    if (!recCtl.IsNewRecord) {
                
                        this.AddToDeletedRecordIds(recCtl);
                  
                    }
                    recCtl.Visible = false;
                
                } else {
                
                    recCtl.Delete();
                    // Setting the DataChanged to True results in the page being refreshed with
                    // the most recent data from the database.  This happens in PreRender event
                    // based on the current sort, search and filter criteria.
                    this.DataChanged = true;
                    this.ResetData = true;
                  
                }
            }
        }

        public virtual DetailsServiceCodesRow[] GetRecordControls()
        {
            Control[] recCtrls = BaseClasses.Utils.MiscUtils.FindControlsRecursively(this, "DetailsServiceCodesRow");
	          List<DetailsServiceCodesRow> list = new List<DetailsServiceCodesRow>();
	          foreach (DetailsServiceCodesRow recCtrl in recCtrls) {
		          list.Add(recCtrl);
	          }
	          return list.ToArray();
        }

        public new BaseApplicationPage Page 
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }
        
                

        
        
#endregion


    }
  
// Base class for the Notification_logTableControlRow control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in Notification_logTableControlRow.
public class BaseNotification_logTableControlRow : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseNotification_logTableControlRow()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in Notification_logTableControlRow.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
                
        }

        // To customize, override this method in Notification_logTableControlRow.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
                    
        
              // Register the event handlers.

          
                    this.notified_by.Click += notified_by_Click;
                        
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.notification_log record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = Notification_logTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // Since this is a row in the table, the data for this row is loaded by the 
            // LoadData method of the BaseNotification_logTableControl when the data for the entire
            // table is loaded.
            
            this.DataSource = new Notification_logRecord();
            
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                Setnotified_by();
                Setnotify_datetime();
                Setnotify_message();
                Setnotify_messageLabel();
                Setnotify1();
                Setnotify2();
                Setnotify3();

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void Setnotified_by()
        {
            
                    
            // Set the notified_by LinkButton on the webpage with value from the
            // DatabaseAYS_OEM%dbo.notification_log database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.notification_log record retrieved from the database.
            // this.notified_by is the ASP:LinkButton on the webpage.
                  
            if (this.DataSource != null && this.DataSource.notified_bySpecified) {
                								
                // If the notified_by is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
               string formattedValue = "";
               Boolean _isExpandableNonCompositeForeignKey = Notification_logTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(Notification_logTable.notified_by);
               if(_isExpandableNonCompositeForeignKey &&Notification_logTable.notified_by.IsApplyDisplayAs)
                                  
                     formattedValue = Notification_logTable.GetDFKA(this.DataSource.notified_by.ToString(),Notification_logTable.notified_by, null);
                                    
               if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(formattedValue)))
                     formattedValue = this.DataSource.Format(Notification_logTable.notified_by);
                                  
                                
                this.notified_by.Text = formattedValue;
                
                  this.notified_by.ToolTip = "Go to " + this.notified_by.Text.Replace("<wbr/>", "");
                   
            } 
            
            else {
            
                // notified_by is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.notified_by.Text = Notification_logTable.notified_by.Format(Notification_logTable.notified_by.DefaultValue);
            		
            }
                               
        }
                
        public virtual void Setnotify_datetime()
        {
            
                    
            // Set the notify_datetime Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.notification_log database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.notification_log record retrieved from the database.
            // this.notify_datetime is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.notify_datetimeSpecified) {
                								
                // If the notify_datetime is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(Notification_logTable.notify_datetime, @"g");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.notify_datetime.Text = formattedValue;
                   
            } 
            
            else {
            
                // notify_datetime is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.notify_datetime.Text = Notification_logTable.notify_datetime.Format(Notification_logTable.notify_datetime.DefaultValue, @"g");
            		
            }
            
            // If the notify_datetime is NULL or blank, then use the value specified  
            // on Properties.
            if (this.notify_datetime.Text == null ||
                this.notify_datetime.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.notify_datetime.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void Setnotify_message()
        {
            
                    
            // Set the notify_message Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.notification_log database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.notification_log record retrieved from the database.
            // this.notify_message is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.notify_messageSpecified) {
                								
                // If the notify_message is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(Notification_logTable.notify_message);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                if(formattedValue != null){
                    int popupThreshold = (int)(300);
                              
                    int maxLength = formattedValue.Length;
                    int originalLength = maxLength;
                    if (maxLength >= (int)(300)){
                        // Truncate based on FieldMaxLength on Properties.
                        maxLength = (int)(300);
                        //First strip of all html tags:
                        formattedValue = StringUtils.ConvertHTMLToPlainText(formattedValue);
                        
                    }
                                
                              
                    // For fields values larger than the PopupTheshold on Properties, display a popup.
                    if (originalLength >= popupThreshold) {
                        String name = HttpUtility.HtmlEncode(Notification_logTable.notify_message.Name);

                        if (!HttpUtility.HtmlEncode("%ISD_DEFAULT%").Equals("%ISD_DEFAULT%")) {
                           name = HttpUtility.HtmlEncode(this.Page.GetResourceValue("%ISD_DEFAULT%"));
                        }

                        formattedValue = "<a onclick=\'gPersist=true;\' class=\'truncatedText\' onmouseout=\'detailRolloverPopupClose();\' " +
                            "onmouseover=\'SaveMousePosition(event); delayRolloverPopup(\"PageMethods.GetRecordFieldValue(\\\"" + "NULL" + "\\\", \\\"OEMConversion.Business.Notification_logTable, App_Code\\\",\\\"" +
                              (HttpUtility.UrlEncode(this.DataSource.GetID().ToString())).Replace("\\","\\\\\\\\") + "\\\", \\\"notify_message\\\", \\\"notify_message\\\", \\\"" +NetUtils.EncodeStringForHtmlDisplay(name.Substring(0, name.Length)) + "\\\",\\\"" + Page.GetResourceValue("Btn:Close", "OEMConversion") + "\\\", " +
                        " false, 200," +
                            " 300, true, PopupDisplayWindowCallBackWith20);\", 500);'>" + NetUtils.EncodeStringForHtmlDisplay(formattedValue.Substring(0, Math.Min(maxLength, formattedValue.Length)));
                        if (maxLength == (int)(300))
                            {
                            formattedValue = formattedValue + "..." + "</a>";
                        }
                        else
                        {
                            formattedValue = formattedValue + "</a>";
                            
                        }
                    }
                    else{
                        if (maxLength == (int)(300)) {
                          formattedValue = NetUtils.EncodeStringForHtmlDisplay(formattedValue.Substring(0,Math.Min(maxLength, formattedValue.Length)));
                          formattedValue = formattedValue + "...";
                        }
                        
                    }
                }
                
                this.notify_message.Text = formattedValue;
                   
            } 
            
            else {
            
                // notify_message is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.notify_message.Text = Notification_logTable.notify_message.Format(Notification_logTable.notify_message.DefaultValue);
            		
            }
            
            // If the notify_message is NULL or blank, then use the value specified  
            // on Properties.
            if (this.notify_message.Text == null ||
                this.notify_message.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.notify_message.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void Setnotify1()
        {
            
                    
            // Set the notify1 Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.notification_log database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.notification_log record retrieved from the database.
            // this.notify1 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.notify1Specified) {
                								
                // If the notify1 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(Notification_logTable.notify1);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.notify1.Text = formattedValue;
                   
            } 
            
            else {
            
                // notify1 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.notify1.Text = Notification_logTable.notify1.Format(Notification_logTable.notify1.DefaultValue);
            		
            }
            
            // If the notify1 is NULL or blank, then use the value specified  
            // on Properties.
            if (this.notify1.Text == null ||
                this.notify1.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.notify1.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void Setnotify2()
        {
            
                    
            // Set the notify2 Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.notification_log database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.notification_log record retrieved from the database.
            // this.notify2 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.notify2Specified) {
                								
                // If the notify2 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(Notification_logTable.notify2);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.notify2.Text = formattedValue;
                   
            } 
            
            else {
            
                // notify2 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.notify2.Text = Notification_logTable.notify2.Format(Notification_logTable.notify2.DefaultValue);
            		
            }
            
            // If the notify2 is NULL or blank, then use the value specified  
            // on Properties.
            if (this.notify2.Text == null ||
                this.notify2.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.notify2.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void Setnotify3()
        {
            
                    
            // Set the notify3 Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.notification_log database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.notification_log record retrieved from the database.
            // this.notify3 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.notify3Specified) {
                								
                // If the notify3 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(Notification_logTable.notify3);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.notify3.Text = formattedValue;
                   
            } 
            
            else {
            
                // notify3 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.notify3.Text = Notification_logTable.notify3.Format(Notification_logTable.notify3.DefaultValue);
            		
            }
            
            // If the notify3 is NULL or blank, then use the value specified  
            // on Properties.
            if (this.notify3.Text == null ||
                this.notify3.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.notify3.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void Setnotify_messageLabel()
                  {
                  
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        RepairOrdersRecordControl parentCtrl;
      
            parentCtrl = (RepairOrdersRecordControl)MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl");
          
        if (parentCtrl != null && parentCtrl.DataSource == null) {
        // Load the record if it is not loaded yet.
        parentCtrl.LoadData();
        }
        if (parentCtrl == null || parentCtrl.DataSource == null) {
        // Get the error message from the application resource file.
        throw new Exception(Page.GetResourceValue("Err:NoParentRecId", "OEMConversion"));
        }
        
          this.DataSource.rono = parentCtrl.DataSource.RONo;
        
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
                // Set the DataChanged flag to True for the for the related panels so they get refreshed as well.
                ((Notification_logTableControl)MiscUtils.GetParentControlObject(this, "Notification_logTableControl")).DataChanged = true;
                ((Notification_logTableControl)MiscUtils.GetParentControlObject(this, "Notification_logTableControl")).ResetData = true;
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            Getnotified_by();
            Getnotify_datetime();
            Getnotify_message();
            Getnotify1();
            Getnotify2();
            Getnotify3();
        }
        
        
        public virtual void Getnotified_by()
        {
            
        }
                
        public virtual void Getnotify_datetime()
        {
            
        }
                
        public virtual void Getnotify_message()
        {
            
        }
                
        public virtual void Getnotify1()
        {
            
        }
                
        public virtual void Getnotify2()
        {
            
        }
                
        public virtual void Getnotify3()
        {
            
        }
                

      // To customize, override this method in Notification_logTableControlRow.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            return null;
        
        }
        
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          Notification_logTable.DeleteRecord(pkValue);
          
              
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            ((Notification_logTableControl)MiscUtils.GetParentControlObject(this, "Notification_logTableControl")).DataChanged = true;
            ((Notification_logTableControl)MiscUtils.GetParentControlObject(this, "Notification_logTableControl")).ResetData = true;
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
    
        // Generate set method for buttons
        
        // event handler for LinkButton
        public virtual void notified_by_Click(object sender, EventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../Technicians/Show-Technicians.aspx?Technicians={Notification_logTableControlRow:FK:FK_notification_log_Technicians}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseNotification_logTableControlRow_Rec"];
            }
            set {
                this.ViewState["BaseNotification_logTableControlRow_Rec"] = value;
            }
        }
        
        public Notification_logRecord DataSource {
            get {
                return (Notification_logRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.LinkButton notified_by {
            get {
                return (System.Web.UI.WebControls.LinkButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notified_by");
            }
        }
            
        public System.Web.UI.WebControls.Literal notify_datetime {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify_datetime");
            }
        }
            
        public System.Web.UI.WebControls.Literal notify_message {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify_message");
            }
        }
            
        public System.Web.UI.WebControls.Literal notify_messageLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify_messageLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal notify1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify1");
            }
        }
            
        public System.Web.UI.WebControls.Literal notify2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify2");
            }
        }
            
        public System.Web.UI.WebControls.Literal notify3 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify3");
            }
        }
            
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        Notification_logRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    Notification_logRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual Notification_logRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return Notification_logTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            return null;
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the Notification_logTableControl control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in Notification_logTableControl.
public class BaseNotification_logTableControl : OEMConversion.UI.BaseApplicationTableControl
{
         
       public BaseNotification_logTableControl()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
      
    
           // Setup the filter and search.
        


      
      
            // Control Initializations.
            // Initialize the table's current sort order.

            if (this.InSession(this, "Order_By"))
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));         
            else
            {
                   
                this.CurrentSortOrder = new OrderBy(true, false);
            
        }



    // Setup default pagination settings.
    
            this.PageSize = Convert.ToInt32(this.GetFromSession(this, "Page_Size", "10"));
            this.PageIndex = Convert.ToInt32(this.GetFromSession(this, "Page_Index", "0"));
                     
        }

        protected virtual void Control_Load(object sender, EventArgs e)
        {
        
            SaveControlsToSession_Ajax();
        
            // Setup the pagination events.
            
                    this.Pagination4.FirstPage.Click += Pagination4_FirstPage_Click;
                        
                    this.Pagination4.LastPage.Click += Pagination4_LastPage_Click;
                        
                    this.Pagination4.NextPage.Click += Pagination4_NextPage_Click;
                        
                    this.Pagination4.PageSizeButton.Click += Pagination4_PageSizeButton_Click;
                        
                    this.Pagination4.PreviousPage.Click += Pagination4_PreviousPage_Click;
                        

            string url =""; //to avoid warning in VS as its not being used
            if(url == null) url=""; //to avoid warning in VS as its not being used
        
       // Setup the sorting events.
        
            // Setup the button events.
                  
        
         //' Setup events for others
               
        }

        public virtual void LoadData()
        {
            // Read data from database. Returns an array of records that can be assigned
            // to the DataSource table control property.
            try {
                  CompoundFilter joinFilter = CreateCompoundJoinFilter();
                
                  // The WHERE clause will be empty when displaying all records in table.
                  WhereClause wc = CreateWhereClause();
                  if (wc != null && !wc.RunQuery) {
                        // Initialize an empty array of records
                      ArrayList alist = new ArrayList(0);
                      Type myrec = typeof(OEMConversion.Business.Notification_logRecord);
                      this.DataSource = (Notification_logRecord[])(alist.ToArray(myrec));
                      // Add records to the list if needed.
                      this.AddNewRecords();
                      this._TotalRecords = 0;
                      this._TotalPages = 0;
                      return;
                  }

                  // Call OrderBy to determine the order - either use the order defined
                  // on the Query Wizard, or specified by user (by clicking on column heading)

                  OrderBy orderBy = CreateOrderBy();

      
                // Get the pagesize from the pagesize control.
                this.GetPageSize();
                if (this.DisplayLastPage)
                {
                    int totalRecords = this._TotalRecords < 0? GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause()): this._TotalRecords;
                     
                        int totalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(totalRecords) / Convert.ToDouble(this.PageSize)));
                       
                    this.PageIndex = totalPages - 1;                
                }
                
                // Make sure PageIndex (current page) and PageSize are within bounds.
                if (this.PageIndex < 0)
                    this.PageIndex = 0;
                if (this.PageSize < 1)
                    this.PageSize = 1;
                
                
                // Retrieve the records and set the table DataSource.
                // Only PageSize records are fetched starting at PageIndex (zero based).
                if (this.AddNewRecord > 0) {
                    // Make sure to preserve the previously entered data on new rows.
                    ArrayList postdata = new ArrayList(0);
                    foreach (Notification_logTableControlRow rc in this.GetRecordControls()) {
                        if (!rc.IsNewRecord) {
                            rc.DataSource = rc.GetRecord();
                            rc.GetUIData();
                            postdata.Add(rc.DataSource);
                            UIData.Add(rc.PreservedUIData());
                        }
                    }
                    Type myrec = typeof(OEMConversion.Business.Notification_logRecord);
                    this.DataSource = (Notification_logRecord[])(postdata.ToArray(myrec));
                } 
                else {
                    // Get the records from the database
                    
                        this.DataSource = GetRecords(joinFilter, wc, orderBy, this.PageIndex, this.PageSize);
                                          
                }
                
                // if the datasource contains no records contained in database, then load the last page.
                if (DbUtils.GetCreatedRecords(this.DataSource).Length == 0 && !this.DisplayLastPage)
                {
                      this.DisplayLastPage = true;
                      LoadData();
                }
                else
                {
                    // Add any new rows desired by the user.
                    this.AddNewRecords();
                    
    
                    // Initialize the page and grand totals. now
                
                }                 
                

    
            } catch (Exception ex) {
                // Report the error message to the end user
                    String msg = ex.Message;
                    if (ex.InnerException != null)
                        msg += " InnerException: " + ex.InnerException.Message;

                    throw new Exception(msg, ex.InnerException);
            }
        }
        
        public virtual Notification_logRecord[] GetRecords(BaseFilter join, WhereClause where, OrderBy orderBy, int pageIndex, int pageSize)
        {    
            // by default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               
    
            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecordCount as well
            // selCols.Add(Notification_logTable.Column1, true);          
            // selCols.Add(Notification_logTable.Column2, true);          
            // selCols.Add(Notification_logTable.Column3, true);          
            

            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                  
            {
              
                return Notification_logTable.GetRecords(join, where, orderBy, this.PageIndex, this.PageSize);
                 
            }
            else
            {
                Notification_logTable databaseTable = new Notification_logTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);
                
            
                
                ArrayList recList; 
                orderBy.ExpandForeignKeyColums = false;
                recList = databaseTable.GetRecordList(join, where.GetFilter(), null, orderBy, pageIndex, pageSize);
                return (recList.ToArray(typeof(Notification_logRecord)) as Notification_logRecord[]);
            }            
            
        }
        
        
        public virtual int GetRecordCount(BaseFilter join, WhereClause where)
        {

            // By default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               


            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecords as well
            // selCols.Add(Notification_logTable.Column1, true);          
            // selCols.Add(Notification_logTable.Column2, true);          
            // selCols.Add(Notification_logTable.Column3, true);          


            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                     
            
                return Notification_logTable.GetRecordCount(join, where);
            else
            {
                Notification_logTable databaseTable = new Notification_logTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);        
                
                return (int)(databaseTable.GetRecordListCount(join, where.GetFilter(), null, null));
            }

        }
        
      
    
      public override void DataBind()
      {
          // The DataBind method binds the user interface controls to the values
          // from the database record for each row in the table.  To do this, it calls the
          // DataBind for each of the rows.
          // DataBind also populates any filters above the table, and sets the pagination
          // control to the correct number of records and the current page number.
         
          
          base.DataBind();
          

          this.ClearControlsFromSession();
          
          // Make sure that the DataSource is initialized.
          if (this.DataSource == null) {
              return;
          }
          
          //  LoadData for DataSource for chart and report if they exist
          
            // Improve performance by prefetching display as records.
            this.PreFetchForeignKeyValues();     

            // Setup the pagination controls.
            BindPaginationControls();

    
        
        // Bind the repeater with the list of records to expand the UI.
        
        System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Notification_logTableControlRepeater"));
        if (rep == null){return;}
        rep.DataSource = this.DataSource;
        rep.DataBind();
        
        int index = 0;
        
        foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
        {
        
            // Loop through all rows in the table, set its DataSource and call DataBind().
            Notification_logTableControlRow recControl = (Notification_logTableControlRow)(repItem.FindControl("Notification_logTableControlRow"));
            recControl.DataSource = this.DataSource[index];            
            if (this.UIData.Count > index)
                recControl.PreviousUIData = this.UIData[index];
            recControl.DataBind();
            
           
            recControl.Visible = !this.InDeletedRecordIds(recControl);
        
            index++;
        }
           
    
            // Call the Set methods for each controls on the panel
        
                Setnotified_byLabel();
                Setnotify_datetimeLabel();
                Setnotify1Label();
                Setnotify2Label();
                Setnotify3Label();
                
                
            // setting the state of expand or collapse alternative rows
      
            // Load data for each record and table UI control.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
                
      
            // this method calls the set method for controls with special formula like running total, sum, rank, etc
            SetFormulaControls();
            
                    
        }
        
        
        public virtual void SetFormulaControls()
        {
            // this method calls Set methods for the control that has special formula
        

    }

        
        public void PreFetchForeignKeyValues() {
            if (this.DataSource == null) {
                return;
            }
          
            this.Page.PregetDfkaRecords(Notification_logTable.notified_by, this.DataSource);
        }
        

        public virtual void RegisterPostback()
        {
                
        }
        

        
          public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

          public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
          {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();

            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            if (includeDS)
            {
                
            }

            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
        
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
           
        public virtual void ResetControl()
        {


            
            this.CurrentSortOrder.Reset();
            if (this.InSession(this, "Order_By")) {
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));
            }
            else {
            
                this.CurrentSortOrder = new OrderBy(true, false);
               
            }
                
            this.PageIndex = 0;
        }
        
        public virtual void ResetPageControl()
        {
            this.PageIndex = 0;
        }
        
        protected virtual void BindPaginationControls()
        {
            // Setup the pagination controls.   

            // Bind the pagination labels.
        
            if (DbUtils.GetCreatedRecords(this.DataSource).Length > 0)                      
                    
            {
                this.Pagination4.CurrentPage.Text = (this.PageIndex + 1).ToString();
            } 
            else
            {
                this.Pagination4.CurrentPage.Text = "0";
            }
            this.Pagination4.PageSize.Text = this.PageSize.ToString();
    
            // Bind the buttons for Notification_logTableControl pagination.
        
            this.Pagination4.FirstPage.Enabled = !(this.PageIndex == 0);
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination4.LastPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination4.LastPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination4.LastPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination4.NextPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination4.NextPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination4.NextPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            this.Pagination4.PreviousPage.Enabled = !(this.PageIndex == 0);    
        }
 
        public virtual void SaveData()
        {
            // Save the data from the entire table.  Calls each row's Save Data
            // to save their data.  This function is called by the Click handler of the
            // Save button.  The button handler should Start/Commit/End a transaction.
              
            foreach (Notification_logTableControlRow recCtl in this.GetRecordControls())
            {
        
                if (this.InDeletedRecordIds(recCtl)) {
                    // Delete any pending deletes. 
                    recCtl.Delete();
                }
                else {
                    if (recCtl.Visible) {
                        recCtl.SaveData();
                    }
                }
          
            }

          
    
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
          
            // Set IsNewRecord to False for all records - since everything has been saved and is no longer "new"
            foreach (Notification_logTableControlRow recCtl in this.GetRecordControls()){
                recCtl.IsNewRecord = false;
            }
      
            // Set DeletedRecordsIds to Nothing since we have deleted all pending deletes.
            this.DeletedRecordIds = null;
                
        }
        
        public virtual CompoundFilter CreateCompoundJoinFilter()
        {
            CompoundFilter jFilter = new CompoundFilter();
        
           return jFilter;
        }      
        
    
        public virtual OrderBy CreateOrderBy()
        {
            // The CurrentSortOrder is initialized to the sort order on the 
            // Query Wizard.  It may be modified by the Click handler for any of
            // the column heading to sort or reverse sort by that column.
            // You can add your own sort order, or modify it on the Query Wizard.
            return this.CurrentSortOrder;
        }
         
        
        private string parentSelectedKeyValue;
        public string ParentSelectedKeyValue
        {
          get
          {
            return parentSelectedKeyValue;
          }
          set
          {
            parentSelectedKeyValue = value;
          }
        }

    
        public virtual WhereClause CreateWhereClause()
        {
            // This CreateWhereClause is used for loading the data.
            Notification_logTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
    
            // CreateWhereClause() Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
        
      KeyValue selectedRecordKeyValue = new KeyValue();
    RepairOrdersRecordControl repairOrdersRecordControlObj = (MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl") as RepairOrdersRecordControl);
          
              if (repairOrdersRecordControlObj != null && repairOrdersRecordControlObj.GetRecord() != null && repairOrdersRecordControlObj.GetRecord().IsCreated)
              {
              wc.iAND(Notification_logTable.rono, BaseFilter.ComparisonOperator.EqualsTo, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              selectedRecordKeyValue.AddElement(Notification_logTable.rono.InternalName, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              }
              else
              {
              wc.RunQuery = false;
              return wc;
              }
            
      HttpContext.Current.Session["Notification_logTableControlWhereClause"] = selectedRecordKeyValue.ToXmlString();
         
            return wc;
        }
        
         
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            Notification_logTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
        
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
      string selectedRecordInRepairOrdersRecordControl = HttpContext.Current.Session["Notification_logTableControlWhereClause"] as string;
      
      if (selectedRecordInRepairOrdersRecordControl != null && KeyValue.IsXmlKey(selectedRecordInRepairOrdersRecordControl))
      {
      KeyValue selectedRecordKeyValue = KeyValue.XmlToKey(selectedRecordInRepairOrdersRecordControl);
      
      if (selectedRecordKeyValue != null && selectedRecordKeyValue.ContainsColumn(Notification_logTable.rono))
      {
      wc.iAND(Notification_logTable.rono, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(Notification_logTable.rono).ToString());
      }
    
      }
    
            // Adds clauses if values are selected in Filter controls which are configured in the page.
          

            return wc;
        }

        
          
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }          
          
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    
                    resultList.Add(itemToAdd);
          								
                    isAdded = true;
                }
            }
            return isAdded;
        }        
        
    
        protected virtual void GetPageSize()
        {
        
            if (this.Pagination4.PageSize.Text.Length > 0) {
                try {
                    // this.PageSize = Convert.ToInt32(this.Pagination4.PageSize.Text);
                } catch (Exception ) {
                }
            }
        }

        protected virtual void AddNewRecords()
        {
          
            ArrayList newRecordList = new ArrayList();
          
            System.Collections.Generic.List<Hashtable> newUIDataList = new System.Collections.Generic.List<Hashtable>();
            // Loop though all the record controls and if the record control
            // does not have a unique record id set, then create a record
            // and add to the list.
            if (!this.ResetData)
            {
              System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Notification_logTableControlRepeater"));
              if (rep == null){return;}
              
                foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
                {
                
                // Loop through all rows in the table, set its DataSource and call DataBind().
                Notification_logTableControlRow recControl = (Notification_logTableControlRow)(repItem.FindControl("Notification_logTableControlRow"));
      
            if (recControl.Visible && recControl.IsNewRecord) {
      Notification_logRecord rec = new Notification_logRecord();
        
                        if (recControl.notified_by.Text != "") {
                            rec.Parse(recControl.notified_by.Text, Notification_logTable.notified_by);
                  }
                
                        if (recControl.notify_datetime.Text != "") {
                            rec.Parse(recControl.notify_datetime.Text, Notification_logTable.notify_datetime);
                  }
                
                        if (recControl.notify_message.Text != "") {
                            rec.Parse(recControl.notify_message.Text, Notification_logTable.notify_message);
                  }
                
                        if (recControl.notify1.Text != "") {
                            rec.Parse(recControl.notify1.Text, Notification_logTable.notify1);
                  }
                
                        if (recControl.notify2.Text != "") {
                            rec.Parse(recControl.notify2.Text, Notification_logTable.notify2);
                  }
                
                        if (recControl.notify3.Text != "") {
                            rec.Parse(recControl.notify3.Text, Notification_logTable.notify3);
                  }
                
              newUIDataList.Add(recControl.PreservedUIData());
              newRecordList.Add(rec);
            }
          }
        }
    
            // Add any new record to the list.
            for (int count = 1; count <= this.AddNewRecord; count++) {
              
                newRecordList.Insert(0, new Notification_logRecord());
                newUIDataList.Insert(0, new Hashtable());
              
            }
            this.AddNewRecord = 0;

            // Finally, add any new records to the DataSource.
            if (newRecordList.Count > 0) {
              
                ArrayList finalList = new ArrayList(this.DataSource);
                finalList.InsertRange(0, newRecordList);

                Type myrec = typeof(OEMConversion.Business.Notification_logRecord);
                this.DataSource = (Notification_logRecord[])(finalList.ToArray(myrec));
              
            }
            
            // Add the existing UI data to this hash table
            if (newUIDataList.Count > 0)
                this.UIData.InsertRange(0, newUIDataList);
        }

        
        public void AddToDeletedRecordIds(Notification_logTableControlRow rec)
        {
            if (rec.IsNewRecord) {
                return;
            }

            if (this.DeletedRecordIds != null && this.DeletedRecordIds.Length > 0) {
                this.DeletedRecordIds += ",";
            }

            this.DeletedRecordIds += "[" + rec.RecordUniqueId + "]";
        }

        protected virtual bool InDeletedRecordIds(Notification_logTableControlRow rec)            
        {
            if (this.DeletedRecordIds == null || this.DeletedRecordIds.Length == 0) {
                return (false);
            }

            return (this.DeletedRecordIds.IndexOf("[" + rec.RecordUniqueId + "]") >= 0);
        }

        private String _DeletedRecordIds;
        public String DeletedRecordIds {
            get {
                return (this._DeletedRecordIds);
            }
            set {
                this._DeletedRecordIds = value;
            }
        }
        
      
        // Create Set, WhereClause, and Populate Methods
        
        public virtual void Setnotified_byLabel()
                  {
                  
                    
        }
                
        public virtual void Setnotify_datetimeLabel()
                  {
                  
                    
        }
                
        public virtual void Setnotify1Label()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.notify1Label.Text = "Some value";
                    
                    
        }
                
        public virtual void Setnotify2Label()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.notify2Label.Text = "Some value";
                    
                    
        }
                
        public virtual void Setnotify3Label()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.notify3Label.Text = "Some value";
                    
                    
        }
                

    
        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    
                    this.LoadData();
                    this.DataBind();					
                    
                }
                                
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
        
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
            // Save filter controls to values to session.
        
            
                    
            // Save pagination state to session.
         
    
            // Save table control properties to the session.
          
            if (this.CurrentSortOrder != null)
            {
                if ((this.CurrentSortOrder).GetType() != typeof(GeoOrderBy))
                {
                    this.SaveToSession(this, "Order_By", this.CurrentSortOrder.ToXmlString());
                }
            }
          
            this.SaveToSession(this, "Page_Index", this.PageIndex.ToString());
            this.SaveToSession(this, "Page_Size", this.PageSize.ToString());
          
            this.SaveToSession(this, "DeletedRecordIds", this.DeletedRecordIds);
        
        }
        
        
        protected  void SaveControlsToSession_Ajax()
        {
            // Save filter controls to values to session.
          
           HttpContext.Current.Session["AppRelativeVirtualPath"] = this.Page.AppRelativeVirtualPath;
         
        }
        
        
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();
            // Clear filter controls values from the session.
        
            
            // Clear pagination state from session.
         

    // Clear table properties from the session.
    this.RemoveFromSession(this, "Order_By");
    this.RemoveFromSession(this, "Page_Index");
    this.RemoveFromSession(this, "Page_Size");
    
            this.RemoveFromSession(this, "DeletedRecordIds");
            
        }

        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);

            string orderByStr = (string)ViewState["Notification_logTableControl_OrderBy"];
          
            if (orderByStr != null && orderByStr.Length > 0) {
                this.CurrentSortOrder = BaseClasses.Data.OrderBy.FromXmlString(orderByStr);
            }
          
            else {
                this.CurrentSortOrder = new OrderBy(true, false);
            }
          

            Control Pagination = this.FindControl("Pagination4");
            String PaginationType = "";
            if (Pagination != null){
              Control Summary = Pagination.FindControl("_Summary");
              if (Summary != null){
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination"){
                  PaginationType = "Infinite Pagination";
                }
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination Mobile"){
                  PaginationType = "Infinite Pagination Mobile";
              }
            }
            }
            
            if (!(PaginationType.Equals("Infinite Pagination"))) {
              if (!this.Page.ClientQueryString.Contains("InfiIframe") && PaginationType == "Infinite Pagination Mobile"){
                    this.ViewState["Page_Index"] = 0;
               }
	            string pageIndex = Convert.ToString(ViewState["Page_Index"]);
	            if (pageIndex != null) {
		            this.PageIndex = Convert.ToInt32(pageIndex);
	            }
            }
            
            string pageSize = Convert.ToString(ViewState["Page_Size"]);
            if ((pageSize != null)) {
	            this.PageSize = Convert.ToInt32(pageSize);
            }
            
          
            // Load view state for pagination control.
    
            this.DeletedRecordIds = (string)this.ViewState["DeletedRecordIds"];
        
        }

        protected override object SaveViewState()
        {            
          
            if (this.CurrentSortOrder != null) {
                this.ViewState["Notification_logTableControl_OrderBy"] = this.CurrentSortOrder.ToXmlString();
            }
          

    this.ViewState["Page_Index"] = this.PageIndex;
    this.ViewState["Page_Size"] = this.PageSize;
    
            this.ViewState["DeletedRecordIds"] = this.DeletedRecordIds;
        
    
            // Load view state for pagination control.
              
            return (base.SaveViewState());
        }

        // Generate set method for buttons
           
        
        // Generate the event handling functions for pagination events.
        
        // event handler for ImageButton
        public virtual void Pagination4_FirstPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex = 0;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination4_LastPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.DisplayLastPage = true;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination4_NextPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex += 1;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for LinkButton
        public virtual void Pagination4_PageSizeButton_Click(object sender, EventArgs args)
        {
              
            try {
                
            this.DataChanged = true;
      
            this.PageSize = this.Pagination4.GetCurrentPageSize();
      
            this.PageIndex = Convert.ToInt32(this.Pagination4.CurrentPage.Text) - 1;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination4_PreviousPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            if (this.PageIndex > 0) {
                this.PageIndex -= 1;
                this.DataChanged = true;
            }
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        

        // Generate the event handling functions for sorting events.
        

        // Generate the event handling functions for button events.
        


        // Generate the event handling functions for filter and search events.
        
    
        // Generate the event handling functions for others
        	  

        protected int _TotalRecords = -1;
        public int TotalRecords 
        {
            get {
                if (_TotalRecords < 0)
                {
                    _TotalRecords = Notification_logTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause());
                }
                return (this._TotalRecords);
            }
            set {
                if (this.PageSize > 0) {
                  
                      this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
                          
                }
                this._TotalRecords = value;
            }
        }

      
      
        protected int _TotalPages = -1;
        public int TotalPages {
            get {
                if (_TotalPages < 0) 
                
                    this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(TotalRecords) / Convert.ToDouble(this.PageSize)));
                  
                return this._TotalPages;
            }
            set {
                this._TotalPages = value;
            }
        }

        protected bool _DisplayLastPage;
        public bool DisplayLastPage {
            get {
                return this._DisplayLastPage;
            }
            set {
                this._DisplayLastPage = value;
            }
        }


        
        private OrderBy _CurrentSortOrder = null;
        public OrderBy CurrentSortOrder {
            get {
                return this._CurrentSortOrder;
            }
            set {
                this._CurrentSortOrder = value;
            }
        }
        
        public  Notification_logRecord[] DataSource {
             
            get {
                return (Notification_logRecord[])(base._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }

#region "Helper Properties"
        
        public System.Web.UI.WebControls.Literal notified_byLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notified_byLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal notify_datetimeLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify_datetimeLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal notify1Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify1Label");
            }
        }
        
        public System.Web.UI.WebControls.Literal notify2Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify2Label");
            }
        }
        
        public System.Web.UI.WebControls.Literal notify3Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "notify3Label");
            }
        }
        
        public OEMConversion.UI.IPaginationModern Pagination4 {
            get {
                return (OEMConversion.UI.IPaginationModern)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Pagination4");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title6 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title6");
            }
        }
        
#endregion

#region "Helper Functions"
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
        }
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
        }
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                Notification_logTableControlRow recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        Notification_logRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                return EvaluateExpressions(url, arg, rec, bEncrypt);
             
            }
            return url;
        }
        
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt, bool includeSession)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                Notification_logTableControlRow recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        Notification_logRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                
                if (includeSession)
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt);
                }
                else
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt,false);
                }
             
            }
            return url;
        }
          
        public virtual Notification_logTableControlRow GetSelectedRecordControl()
        {
        
            return null;
          
        }

        public virtual Notification_logTableControlRow[] GetSelectedRecordControls()
        {
        
            return (Notification_logTableControlRow[])((new ArrayList()).ToArray(Type.GetType("OEMConversion.UI.Controls.Edit_RepairOrders.Notification_logTableControlRow")));
          
        }

        public virtual void DeleteSelectedRecords(bool deferDeletion)
        {
            Notification_logTableControlRow[] recordList = this.GetSelectedRecordControls();
            if (recordList.Length == 0) {
                // Localization.
                throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
            }
            
            foreach (Notification_logTableControlRow recCtl in recordList)
            {
                if (deferDeletion) {
                    if (!recCtl.IsNewRecord) {
                
                        this.AddToDeletedRecordIds(recCtl);
                  
                    }
                    recCtl.Visible = false;
                
                } else {
                
                    recCtl.Delete();
                    // Setting the DataChanged to True results in the page being refreshed with
                    // the most recent data from the database.  This happens in PreRender event
                    // based on the current sort, search and filter criteria.
                    this.DataChanged = true;
                    this.ResetData = true;
                  
                }
            }
        }

        public virtual Notification_logTableControlRow[] GetRecordControls()
        {
            Control[] recCtrls = BaseClasses.Utils.MiscUtils.FindControlsRecursively(this, "Notification_logTableControlRow");
	          List<Notification_logTableControlRow> list = new List<Notification_logTableControlRow>();
	          foreach (Notification_logTableControlRow recCtrl in recCtrls) {
		          list.Add(recCtrl);
	          }
	          return list.ToArray();
        }

        public new BaseApplicationPage Page 
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }
        
                

        
        
#endregion


    }
  
// Base class for the Repair_order_notesTableControlRow control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in Repair_order_notesTableControlRow.
public class BaseRepair_order_notesTableControlRow : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseRepair_order_notesTableControlRow()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in Repair_order_notesTableControlRow.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
                
        }

        // To customize, override this method in Repair_order_notesTableControlRow.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Show confirmation message on Click
              this.DeleteRowButton.Attributes.Add("onClick", "return (confirm(\"" + ((BaseApplicationPage)this.Page).GetResourceValue("DeleteRecordConfirm", "OEMConversion") + "\"));");            
        
              // Register the event handlers.

          
                    this.DeleteRowButton.Click += DeleteRowButton_Click;
                        
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.repair_order_notes record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = Repair_order_notesTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // Since this is a row in the table, the data for this row is loaded by the 
            // LoadData method of the BaseRepair_order_notesTableControl when the data for the entire
            // table is loaded.
            
            this.DataSource = new Repair_order_notesRecord();
            
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                Setcreated_by();
                Setcreated_byLabel();
                
                Setnote_date_time();
                Setnote_date_timeLabel();
                Setrepair_order_note();
                Setrepair_order_noteLabel();
                SetDeleteRowButton();
              

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void Setcreated_by()
        {
            
                    
            // Set the created_by Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.repair_order_notes database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.repair_order_notes record retrieved from the database.
            // this.created_by is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.created_bySpecified) {
                								
                // If the created_by is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
               string formattedValue = "";
               Boolean _isExpandableNonCompositeForeignKey = Repair_order_notesTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(Repair_order_notesTable.created_by);
               if(_isExpandableNonCompositeForeignKey &&Repair_order_notesTable.created_by.IsApplyDisplayAs)
                                  
                     formattedValue = Repair_order_notesTable.GetDFKA(this.DataSource.created_by.ToString(),Repair_order_notesTable.created_by, null);
                                    
               if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(formattedValue)))
                     formattedValue = this.DataSource.Format(Repair_order_notesTable.created_by);
                                  
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.created_by.Text = formattedValue;
                   
            } 
            
            else {
            
                // created_by is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.created_by.Text = Repair_order_notesTable.created_by.Format(Repair_order_notesTable.created_by.DefaultValue);
            		
            }
            
            // If the created_by is NULL or blank, then use the value specified  
            // on Properties.
            if (this.created_by.Text == null ||
                this.created_by.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.created_by.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void Setnote_date_time()
        {
            
                    
            // Set the note_date_time Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.repair_order_notes database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.repair_order_notes record retrieved from the database.
            // this.note_date_time is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.note_date_timeSpecified) {
                								
                // If the note_date_time is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(Repair_order_notesTable.note_date_time, @"g");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.note_date_time.Text = formattedValue;
                   
            } 
            
            else {
            
                // note_date_time is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.note_date_time.Text = Repair_order_notesTable.note_date_time.Format(Repair_order_notesTable.note_date_time.DefaultValue, @"g");
            		
            }
            
            // If the note_date_time is NULL or blank, then use the value specified  
            // on Properties.
            if (this.note_date_time.Text == null ||
                this.note_date_time.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.note_date_time.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void Setrepair_order_note()
        {
            
                    
            // Set the repair_order_note Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.repair_order_notes database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.repair_order_notes record retrieved from the database.
            // this.repair_order_note is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.repair_order_noteSpecified) {
                								
                // If the repair_order_note is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(Repair_order_notesTable.repair_order_note);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                if(formattedValue != null){
                    int popupThreshold = (int)(300);
                              
                    int maxLength = formattedValue.Length;
                    int originalLength = maxLength;
                    if (maxLength >= (int)(300)){
                        // Truncate based on FieldMaxLength on Properties.
                        maxLength = (int)(300);
                        //First strip of all html tags:
                        formattedValue = StringUtils.ConvertHTMLToPlainText(formattedValue);
                        
                    }
                                
                              
                    // For fields values larger than the PopupTheshold on Properties, display a popup.
                    if (originalLength >= popupThreshold) {
                        String name = HttpUtility.HtmlEncode(Repair_order_notesTable.repair_order_note.Name);

                        if (!HttpUtility.HtmlEncode("%ISD_DEFAULT%").Equals("%ISD_DEFAULT%")) {
                           name = HttpUtility.HtmlEncode(this.Page.GetResourceValue("%ISD_DEFAULT%"));
                        }

                        formattedValue = "<a onclick=\'gPersist=true;\' class=\'truncatedText\' onmouseout=\'detailRolloverPopupClose();\' " +
                            "onmouseover=\'SaveMousePosition(event); delayRolloverPopup(\"PageMethods.GetRecordFieldValue(\\\"" + "NULL" + "\\\", \\\"OEMConversion.Business.Repair_order_notesTable, App_Code\\\",\\\"" +
                              (HttpUtility.UrlEncode(this.DataSource.GetID().ToString())).Replace("\\","\\\\\\\\") + "\\\", \\\"repair_order_note\\\", \\\"repair_order_note\\\", \\\"" +NetUtils.EncodeStringForHtmlDisplay(name.Substring(0, name.Length)) + "\\\",\\\"" + Page.GetResourceValue("Btn:Close", "OEMConversion") + "\\\", " +
                        " false, 200," +
                            " 300, true, PopupDisplayWindowCallBackWith20);\", 500);'>" + NetUtils.EncodeStringForHtmlDisplay(formattedValue.Substring(0, Math.Min(maxLength, formattedValue.Length)));
                        if (maxLength == (int)(300))
                            {
                            formattedValue = formattedValue + "..." + "</a>";
                        }
                        else
                        {
                            formattedValue = formattedValue + "</a>";
                            
                        }
                    }
                    else{
                        if (maxLength == (int)(300)) {
                          formattedValue = NetUtils.EncodeStringForHtmlDisplay(formattedValue.Substring(0,Math.Min(maxLength, formattedValue.Length)));
                          formattedValue = formattedValue + "...";
                        }
                        
                    }
                }
                
                this.repair_order_note.Text = formattedValue;
                   
            } 
            
            else {
            
                // repair_order_note is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.repair_order_note.Text = Repair_order_notesTable.repair_order_note.Format(Repair_order_notesTable.repair_order_note.DefaultValue);
            		
            }
            
            // If the repair_order_note is NULL or blank, then use the value specified  
            // on Properties.
            if (this.repair_order_note.Text == null ||
                this.repair_order_note.Text.Trim().Length == 0) {
                // Set the value specified on the Properties.
                this.repair_order_note.Text = "&nbsp;";
            }
                                     
        }
                
        public virtual void Setcreated_byLabel()
                  {
                  
                    
        }
                
        public virtual void Setnote_date_timeLabel()
                  {
                  
                    
        }
                
        public virtual void Setrepair_order_noteLabel()
                  {
                  
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        RepairOrdersRecordControl parentCtrl;
      
            parentCtrl = (RepairOrdersRecordControl)MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl");
          
        if (parentCtrl != null && parentCtrl.DataSource == null) {
        // Load the record if it is not loaded yet.
        parentCtrl.LoadData();
        }
        if (parentCtrl == null || parentCtrl.DataSource == null) {
        // Get the error message from the application resource file.
        throw new Exception(Page.GetResourceValue("Err:NoParentRecId", "OEMConversion"));
        }
        
          this.DataSource.rono = parentCtrl.DataSource.RONo;
        
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
                // Set the DataChanged flag to True for the for the related panels so they get refreshed as well.
                ((Repair_order_notesTableControl)MiscUtils.GetParentControlObject(this, "Repair_order_notesTableControl")).DataChanged = true;
                ((Repair_order_notesTableControl)MiscUtils.GetParentControlObject(this, "Repair_order_notesTableControl")).ResetData = true;
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            Getcreated_by();
            Getnote_date_time();
            Getrepair_order_note();
        }
        
        
        public virtual void Getcreated_by()
        {
            
        }
                
        public virtual void Getnote_date_time()
        {
            
        }
                
        public virtual void Getrepair_order_note()
        {
            
        }
                

      // To customize, override this method in Repair_order_notesTableControlRow.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            return null;
        
        }
        
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          Repair_order_notesTable.DeleteRecord(pkValue);
          
              
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            ((Repair_order_notesTableControl)MiscUtils.GetParentControlObject(this, "Repair_order_notesTableControl")).DataChanged = true;
            ((Repair_order_notesTableControl)MiscUtils.GetParentControlObject(this, "Repair_order_notesTableControl")).ResetData = true;
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                
            this.Page.Authorize((Control)DeleteRowButton, "3");
									
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
    
        // Generate set method for buttons
        
        public virtual void SetDeleteRowButton()                
              
        {
        
   
        }
            
        // event handler for ImageButton
        public virtual void DeleteRowButton_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
            if (!this.Page.IsPageRefresh) {
        
                this.Delete();
              
            }
      this.Page.CommitTransaction(sender);
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
    
        }
            
            
        
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseRepair_order_notesTableControlRow_Rec"];
            }
            set {
                this.ViewState["BaseRepair_order_notesTableControlRow_Rec"] = value;
            }
        }
        
        public Repair_order_notesRecord DataSource {
            get {
                return (Repair_order_notesRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.Literal created_by {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "created_by");
            }
        }
            
        public System.Web.UI.WebControls.Literal created_byLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "created_byLabel");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton DeleteRowButton {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DeleteRowButton");
            }
        }
        
        public System.Web.UI.WebControls.Literal note_date_time {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "note_date_time");
            }
        }
            
        public System.Web.UI.WebControls.Literal note_date_timeLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "note_date_timeLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal repair_order_note {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "repair_order_note");
            }
        }
            
        public System.Web.UI.WebControls.Literal repair_order_noteLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "repair_order_noteLabel");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        Repair_order_notesRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    Repair_order_notesRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual Repair_order_notesRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return Repair_order_notesTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            return null;
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the Repair_order_notesTableControl control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in Repair_order_notesTableControl.
public class BaseRepair_order_notesTableControl : OEMConversion.UI.BaseApplicationTableControl
{
         
       public BaseRepair_order_notesTableControl()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
      
    
           // Setup the filter and search.
        


      
      
            // Control Initializations.
            // Initialize the table's current sort order.

            if (this.InSession(this, "Order_By"))
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));         
            else
            {
                   
                this.CurrentSortOrder = new OrderBy(true, false);
            
        }



    // Setup default pagination settings.
    
            this.PageSize = Convert.ToInt32(this.GetFromSession(this, "Page_Size", "10"));
            this.PageIndex = Convert.ToInt32(this.GetFromSession(this, "Page_Index", "0"));
                     
        }

        protected virtual void Control_Load(object sender, EventArgs e)
        {
        
            SaveControlsToSession_Ajax();
        
            // Setup the pagination events.
            
                    this.Pagination.FirstPage.Click += Pagination_FirstPage_Click;
                        
                    this.Pagination.LastPage.Click += Pagination_LastPage_Click;
                        
                    this.Pagination.NextPage.Click += Pagination_NextPage_Click;
                        
                    this.Pagination.PageSizeButton.Click += Pagination_PageSizeButton_Click;
                        
                    this.Pagination.PreviousPage.Click += Pagination_PreviousPage_Click;
                        

            string url =""; //to avoid warning in VS as its not being used
            if(url == null) url=""; //to avoid warning in VS as its not being used
        
       // Setup the sorting events.
        
            // Setup the button events.
          
                    this.NewButton.Click += NewButton_Click;
                        
                    this.ActionsButton.Button.Click += ActionsButton_Click;
                                
        
         //' Setup events for others
               
        }

        public virtual void LoadData()
        {
            // Read data from database. Returns an array of records that can be assigned
            // to the DataSource table control property.
            try {
                  CompoundFilter joinFilter = CreateCompoundJoinFilter();
                
                  // The WHERE clause will be empty when displaying all records in table.
                  WhereClause wc = CreateWhereClause();
                  if (wc != null && !wc.RunQuery) {
                        // Initialize an empty array of records
                      ArrayList alist = new ArrayList(0);
                      Type myrec = typeof(OEMConversion.Business.Repair_order_notesRecord);
                      this.DataSource = (Repair_order_notesRecord[])(alist.ToArray(myrec));
                      // Add records to the list if needed.
                      this.AddNewRecords();
                      this._TotalRecords = 0;
                      this._TotalPages = 0;
                      return;
                  }

                  // Call OrderBy to determine the order - either use the order defined
                  // on the Query Wizard, or specified by user (by clicking on column heading)

                  OrderBy orderBy = CreateOrderBy();

      
                // Get the pagesize from the pagesize control.
                this.GetPageSize();
                if (this.DisplayLastPage)
                {
                    int totalRecords = this._TotalRecords < 0? GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause()): this._TotalRecords;
                     
                        int totalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(totalRecords) / Convert.ToDouble(this.PageSize)));
                       
                    this.PageIndex = totalPages - 1;                
                }
                
                // Make sure PageIndex (current page) and PageSize are within bounds.
                if (this.PageIndex < 0)
                    this.PageIndex = 0;
                if (this.PageSize < 1)
                    this.PageSize = 1;
                
                
                // Retrieve the records and set the table DataSource.
                // Only PageSize records are fetched starting at PageIndex (zero based).
                if (this.AddNewRecord > 0) {
                    // Make sure to preserve the previously entered data on new rows.
                    ArrayList postdata = new ArrayList(0);
                    foreach (Repair_order_notesTableControlRow rc in this.GetRecordControls()) {
                        if (!rc.IsNewRecord) {
                            rc.DataSource = rc.GetRecord();
                            rc.GetUIData();
                            postdata.Add(rc.DataSource);
                            UIData.Add(rc.PreservedUIData());
                        }
                    }
                    Type myrec = typeof(OEMConversion.Business.Repair_order_notesRecord);
                    this.DataSource = (Repair_order_notesRecord[])(postdata.ToArray(myrec));
                } 
                else {
                    // Get the records from the database
                    
                        this.DataSource = GetRecords(joinFilter, wc, orderBy, this.PageIndex, this.PageSize);
                                          
                }
                
                // if the datasource contains no records contained in database, then load the last page.
                if (DbUtils.GetCreatedRecords(this.DataSource).Length == 0 && !this.DisplayLastPage)
                {
                      this.DisplayLastPage = true;
                      LoadData();
                }
                else
                {
                    // Add any new rows desired by the user.
                    this.AddNewRecords();
                    
    
                    // Initialize the page and grand totals. now
                
                }                 
                

    
            } catch (Exception ex) {
                // Report the error message to the end user
                    String msg = ex.Message;
                    if (ex.InnerException != null)
                        msg += " InnerException: " + ex.InnerException.Message;

                    throw new Exception(msg, ex.InnerException);
            }
        }
        
        public virtual Repair_order_notesRecord[] GetRecords(BaseFilter join, WhereClause where, OrderBy orderBy, int pageIndex, int pageSize)
        {    
            // by default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               
    
            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecordCount as well
            // selCols.Add(Repair_order_notesTable.Column1, true);          
            // selCols.Add(Repair_order_notesTable.Column2, true);          
            // selCols.Add(Repair_order_notesTable.Column3, true);          
            

            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                  
            {
              
                return Repair_order_notesTable.GetRecords(join, where, orderBy, this.PageIndex, this.PageSize);
                 
            }
            else
            {
                Repair_order_notesTable databaseTable = new Repair_order_notesTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);
                
            
                
                ArrayList recList; 
                orderBy.ExpandForeignKeyColums = false;
                recList = databaseTable.GetRecordList(join, where.GetFilter(), null, orderBy, pageIndex, pageSize);
                return (recList.ToArray(typeof(Repair_order_notesRecord)) as Repair_order_notesRecord[]);
            }            
            
        }
        
        
        public virtual int GetRecordCount(BaseFilter join, WhereClause where)
        {

            // By default, Select * will be executed to get a list of records.  If you want to run Select Distinct with certain column only, add the column to selCols
            ColumnList selCols = new ColumnList();                 
               


            // If you want to specify certain columns to be in the select statement, you can write code similar to the following:
            // However, if you don't specify PK, row button click might show an error message.
            // And make sure you write similar code in GetRecords as well
            // selCols.Add(Repair_order_notesTable.Column1, true);          
            // selCols.Add(Repair_order_notesTable.Column2, true);          
            // selCols.Add(Repair_order_notesTable.Column3, true);          


            // If the parameters doesn't specify specific columns in the Select statement, then run Select *
            // Alternatively, if the parameters specifies to include PK, also run Select *
            
            if (selCols.Count == 0)                 
                     
            
                return Repair_order_notesTable.GetRecordCount(join, where);
            else
            {
                Repair_order_notesTable databaseTable = new Repair_order_notesTable();
                databaseTable.SelectedColumns.Clear();
                databaseTable.SelectedColumns.AddRange(selCols);        
                
                return (int)(databaseTable.GetRecordListCount(join, where.GetFilter(), null, null));
            }

        }
        
      
    
      public override void DataBind()
      {
          // The DataBind method binds the user interface controls to the values
          // from the database record for each row in the table.  To do this, it calls the
          // DataBind for each of the rows.
          // DataBind also populates any filters above the table, and sets the pagination
          // control to the correct number of records and the current page number.
         
          
          base.DataBind();
          

          this.ClearControlsFromSession();
          
          // Make sure that the DataSource is initialized.
          if (this.DataSource == null) {
              return;
          }
          
          //  LoadData for DataSource for chart and report if they exist
          
            // Improve performance by prefetching display as records.
            this.PreFetchForeignKeyValues();     

            // Setup the pagination controls.
            BindPaginationControls();

    
        
        // Bind the repeater with the list of records to expand the UI.
        
        System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Repair_order_notesTableControlRepeater"));
        if (rep == null){return;}
        rep.DataSource = this.DataSource;
        rep.DataBind();
        
        int index = 0;
        
        foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
        {
        
            // Loop through all rows in the table, set its DataSource and call DataBind().
            Repair_order_notesTableControlRow recControl = (Repair_order_notesTableControlRow)(repItem.FindControl("Repair_order_notesTableControlRow"));
            recControl.DataSource = this.DataSource[index];            
            if (this.UIData.Count > index)
                recControl.PreviousUIData = this.UIData[index];
            recControl.DataBind();
            
           
            recControl.Visible = !this.InDeletedRecordIds(recControl);
        
            index++;
        }
           
    
            // Call the Set methods for each controls on the panel
        
                
                
                
                
                SetNewButton();
              
                SetActionsButton();
              
            // setting the state of expand or collapse alternative rows
      
            // Load data for each record and table UI control.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
                
      
            // this method calls the set method for controls with special formula like running total, sum, rank, etc
            SetFormulaControls();
            
                    
        }
        
        
        public virtual void SetFormulaControls()
        {
            // this method calls Set methods for the control that has special formula
        

    }

        
        public void PreFetchForeignKeyValues() {
            if (this.DataSource == null) {
                return;
            }
          
            this.Page.PregetDfkaRecords(Repair_order_notesTable.created_by, this.DataSource);
        }
        

        public virtual void RegisterPostback()
        {
                
        }
        

        
          public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

          public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
          {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();

            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            if (includeDS)
            {
                
            }

            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
        
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
           
        public virtual void ResetControl()
        {


            
            this.CurrentSortOrder.Reset();
            if (this.InSession(this, "Order_By")) {
                this.CurrentSortOrder = OrderBy.FromXmlString(this.GetFromSession(this, "Order_By", null));
            }
            else {
            
                this.CurrentSortOrder = new OrderBy(true, false);
               
            }
                
            this.PageIndex = 0;
        }
        
        public virtual void ResetPageControl()
        {
            this.PageIndex = 0;
        }
        
        protected virtual void BindPaginationControls()
        {
            // Setup the pagination controls.   

            // Bind the pagination labels.
        
            if (DbUtils.GetCreatedRecords(this.DataSource).Length > 0)                      
                    
            {
                this.Pagination.CurrentPage.Text = (this.PageIndex + 1).ToString();
            } 
            else
            {
                this.Pagination.CurrentPage.Text = "0";
            }
            this.Pagination.PageSize.Text = this.PageSize.ToString();
    
            // Bind the buttons for Repair_order_notesTableControl pagination.
        
            this.Pagination.FirstPage.Enabled = !(this.PageIndex == 0);
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination.LastPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination.LastPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination.LastPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            if (this._TotalPages < 0)             // if the total pages is not determined yet, enable last and next buttons
                this.Pagination.NextPage.Enabled = true;
            else if (this._TotalPages == 0)          // if the total pages is determined and it is 0, enable last and next buttons
                this.Pagination.NextPage.Enabled = false;            
            else                                     // if the total pages is the last page, disable last and next buttons
                this.Pagination.NextPage.Enabled = !(this.PageIndex == this.TotalPages - 1);            
          
            this.Pagination.PreviousPage.Enabled = !(this.PageIndex == 0);    
        }
 
        public virtual void SaveData()
        {
            // Save the data from the entire table.  Calls each row's Save Data
            // to save their data.  This function is called by the Click handler of the
            // Save button.  The button handler should Start/Commit/End a transaction.
              
            foreach (Repair_order_notesTableControlRow recCtl in this.GetRecordControls())
            {
        
                if (this.InDeletedRecordIds(recCtl)) {
                    // Delete any pending deletes. 
                    recCtl.Delete();
                }
                else {
                    if (recCtl.Visible) {
                        recCtl.SaveData();
                    }
                }
          
            }

          
    
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
          
            // Set IsNewRecord to False for all records - since everything has been saved and is no longer "new"
            foreach (Repair_order_notesTableControlRow recCtl in this.GetRecordControls()){
                recCtl.IsNewRecord = false;
            }
      
            // Set DeletedRecordsIds to Nothing since we have deleted all pending deletes.
            this.DeletedRecordIds = null;
                
        }
        
        public virtual CompoundFilter CreateCompoundJoinFilter()
        {
            CompoundFilter jFilter = new CompoundFilter();
        
           return jFilter;
        }      
        
    
        public virtual OrderBy CreateOrderBy()
        {
            // The CurrentSortOrder is initialized to the sort order on the 
            // Query Wizard.  It may be modified by the Click handler for any of
            // the column heading to sort or reverse sort by that column.
            // You can add your own sort order, or modify it on the Query Wizard.
            return this.CurrentSortOrder;
        }
         
        
        private string parentSelectedKeyValue;
        public string ParentSelectedKeyValue
        {
          get
          {
            return parentSelectedKeyValue;
          }
          set
          {
            parentSelectedKeyValue = value;
          }
        }

    
        public virtual WhereClause CreateWhereClause()
        {
            // This CreateWhereClause is used for loading the data.
            Repair_order_notesTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
    
            // CreateWhereClause() Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
        
      KeyValue selectedRecordKeyValue = new KeyValue();
    RepairOrdersRecordControl repairOrdersRecordControlObj = (MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl") as RepairOrdersRecordControl);
          
              if (repairOrdersRecordControlObj != null && repairOrdersRecordControlObj.GetRecord() != null && repairOrdersRecordControlObj.GetRecord().IsCreated)
              {
              wc.iAND(Repair_order_notesTable.rono, BaseFilter.ComparisonOperator.EqualsTo, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              selectedRecordKeyValue.AddElement(Repair_order_notesTable.rono.InternalName, repairOrdersRecordControlObj.GetRecord().RONo.ToString());
              }
              else
              {
              wc.RunQuery = false;
              return wc;
              }
            
      HttpContext.Current.Session["Repair_order_notesTableControlWhereClause"] = selectedRecordKeyValue.ToXmlString();
         
            return wc;
        }
        
         
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            Repair_order_notesTable.Instance.InnerFilter = null;
            WhereClause wc = new WhereClause();
        
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
      string selectedRecordInRepairOrdersRecordControl = HttpContext.Current.Session["Repair_order_notesTableControlWhereClause"] as string;
      
      if (selectedRecordInRepairOrdersRecordControl != null && KeyValue.IsXmlKey(selectedRecordInRepairOrdersRecordControl))
      {
      KeyValue selectedRecordKeyValue = KeyValue.XmlToKey(selectedRecordInRepairOrdersRecordControl);
      
      if (selectedRecordKeyValue != null && selectedRecordKeyValue.ContainsColumn(Repair_order_notesTable.rono))
      {
      wc.iAND(Repair_order_notesTable.rono, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(Repair_order_notesTable.rono).ToString());
      }
    
      }
    
            // Adds clauses if values are selected in Filter controls which are configured in the page.
          

            return wc;
        }

        
          
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }          
          
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    
                    resultList.Add(itemToAdd);
          								
                    isAdded = true;
                }
            }
            return isAdded;
        }        
        
    
        protected virtual void GetPageSize()
        {
        
            if (this.Pagination.PageSize.Text.Length > 0) {
                try {
                    // this.PageSize = Convert.ToInt32(this.Pagination.PageSize.Text);
                } catch (Exception ) {
                }
            }
        }

        protected virtual void AddNewRecords()
        {
          
            ArrayList newRecordList = new ArrayList();
          
            System.Collections.Generic.List<Hashtable> newUIDataList = new System.Collections.Generic.List<Hashtable>();
            // Loop though all the record controls and if the record control
            // does not have a unique record id set, then create a record
            // and add to the list.
            if (!this.ResetData)
            {
              System.Web.UI.WebControls.Repeater rep = (System.Web.UI.WebControls.Repeater)(BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Repair_order_notesTableControlRepeater"));
              if (rep == null){return;}
              
                foreach (System.Web.UI.WebControls.RepeaterItem repItem in rep.Items)
                {
                
                // Loop through all rows in the table, set its DataSource and call DataBind().
                Repair_order_notesTableControlRow recControl = (Repair_order_notesTableControlRow)(repItem.FindControl("Repair_order_notesTableControlRow"));
      
            if (recControl.Visible && recControl.IsNewRecord) {
      Repair_order_notesRecord rec = new Repair_order_notesRecord();
        
                        if (recControl.created_by.Text != "") {
                            rec.Parse(recControl.created_by.Text, Repair_order_notesTable.created_by);
                  }
                
                        if (recControl.note_date_time.Text != "") {
                            rec.Parse(recControl.note_date_time.Text, Repair_order_notesTable.note_date_time);
                  }
                
                        if (recControl.repair_order_note.Text != "") {
                            rec.Parse(recControl.repair_order_note.Text, Repair_order_notesTable.repair_order_note);
                  }
                
              newUIDataList.Add(recControl.PreservedUIData());
              newRecordList.Add(rec);
            }
          }
        }
    
            // Add any new record to the list.
            for (int count = 1; count <= this.AddNewRecord; count++) {
              
                newRecordList.Insert(0, new Repair_order_notesRecord());
                newUIDataList.Insert(0, new Hashtable());
              
            }
            this.AddNewRecord = 0;

            // Finally, add any new records to the DataSource.
            if (newRecordList.Count > 0) {
              
                ArrayList finalList = new ArrayList(this.DataSource);
                finalList.InsertRange(0, newRecordList);

                Type myrec = typeof(OEMConversion.Business.Repair_order_notesRecord);
                this.DataSource = (Repair_order_notesRecord[])(finalList.ToArray(myrec));
              
            }
            
            // Add the existing UI data to this hash table
            if (newUIDataList.Count > 0)
                this.UIData.InsertRange(0, newUIDataList);
        }

        
        public void AddToDeletedRecordIds(Repair_order_notesTableControlRow rec)
        {
            if (rec.IsNewRecord) {
                return;
            }

            if (this.DeletedRecordIds != null && this.DeletedRecordIds.Length > 0) {
                this.DeletedRecordIds += ",";
            }

            this.DeletedRecordIds += "[" + rec.RecordUniqueId + "]";
        }

        protected virtual bool InDeletedRecordIds(Repair_order_notesTableControlRow rec)            
        {
            if (this.DeletedRecordIds == null || this.DeletedRecordIds.Length == 0) {
                return (false);
            }

            return (this.DeletedRecordIds.IndexOf("[" + rec.RecordUniqueId + "]") >= 0);
        }

        private String _DeletedRecordIds;
        public String DeletedRecordIds {
            get {
                return (this._DeletedRecordIds);
            }
            set {
                this._DeletedRecordIds = value;
            }
        }
        
      
        // Create Set, WhereClause, and Populate Methods
        

    
        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    
                    this.LoadData();
                    this.DataBind();					
                    
                }
                                
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
        
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
            // Save filter controls to values to session.
        
            
                    
            // Save pagination state to session.
         
    
            // Save table control properties to the session.
          
            if (this.CurrentSortOrder != null)
            {
                if ((this.CurrentSortOrder).GetType() != typeof(GeoOrderBy))
                {
                    this.SaveToSession(this, "Order_By", this.CurrentSortOrder.ToXmlString());
                }
            }
          
            this.SaveToSession(this, "Page_Index", this.PageIndex.ToString());
            this.SaveToSession(this, "Page_Size", this.PageSize.ToString());
          
            this.SaveToSession(this, "DeletedRecordIds", this.DeletedRecordIds);
        
        }
        
        
        protected  void SaveControlsToSession_Ajax()
        {
            // Save filter controls to values to session.
          
           HttpContext.Current.Session["AppRelativeVirtualPath"] = this.Page.AppRelativeVirtualPath;
         
        }
        
        
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();
            // Clear filter controls values from the session.
        
            
            // Clear pagination state from session.
         

    // Clear table properties from the session.
    this.RemoveFromSession(this, "Order_By");
    this.RemoveFromSession(this, "Page_Index");
    this.RemoveFromSession(this, "Page_Size");
    
            this.RemoveFromSession(this, "DeletedRecordIds");
            
        }

        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);

            string orderByStr = (string)ViewState["Repair_order_notesTableControl_OrderBy"];
          
            if (orderByStr != null && orderByStr.Length > 0) {
                this.CurrentSortOrder = BaseClasses.Data.OrderBy.FromXmlString(orderByStr);
            }
          
            else {
                this.CurrentSortOrder = new OrderBy(true, false);
            }
          

            Control Pagination = this.FindControl("Pagination");
            String PaginationType = "";
            if (Pagination != null){
              Control Summary = Pagination.FindControl("_Summary");
              if (Summary != null){
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination"){
                  PaginationType = "Infinite Pagination";
                }
                if (((System.Web.UI.WebControls.TextBox)(Summary)).Text == "Infinite Pagination Mobile"){
                  PaginationType = "Infinite Pagination Mobile";
              }
            }
            }
            
            if (!(PaginationType.Equals("Infinite Pagination"))) {
              if (!this.Page.ClientQueryString.Contains("InfiIframe") && PaginationType == "Infinite Pagination Mobile"){
                    this.ViewState["Page_Index"] = 0;
               }
	            string pageIndex = Convert.ToString(ViewState["Page_Index"]);
	            if (pageIndex != null) {
		            this.PageIndex = Convert.ToInt32(pageIndex);
	            }
            }
            
            string pageSize = Convert.ToString(ViewState["Page_Size"]);
            if ((pageSize != null)) {
	            this.PageSize = Convert.ToInt32(pageSize);
            }
            
          
            // Load view state for pagination control.
    
            this.DeletedRecordIds = (string)this.ViewState["DeletedRecordIds"];
        
        }

        protected override object SaveViewState()
        {            
          
            if (this.CurrentSortOrder != null) {
                this.ViewState["Repair_order_notesTableControl_OrderBy"] = this.CurrentSortOrder.ToXmlString();
            }
          

    this.ViewState["Page_Index"] = this.PageIndex;
    this.ViewState["Page_Size"] = this.PageSize;
    
            this.ViewState["DeletedRecordIds"] = this.DeletedRecordIds;
        
    
            // Load view state for pagination control.
              
            return (base.SaveViewState());
        }

        // Generate set method for buttons
        
        public virtual void SetNewButton()                
              
        {
        
              try
              {
                    string url = "../repair_order_notes/Add-Repair-order-notes.aspx?rono={RepairOrdersRecordControl:FV:RONo}&TabVisible=False&SaveAndNewVisible=False";
              
                      
                    url = this.ModifyRedirectUrl(url, "", true);
                    
                    url = this.Page.ModifyRedirectUrl(url, "", true);                                  
                    
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(MiscUtils.FindControlRecursively(this, "Repair_order_notesTableControl_PostbackTracker").ClientID);                           
                                
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(document.getElementById('" + MiscUtils.FindControlRecursively(this, "Repair_order_notesTableControl_PostbackTracker").ClientID + "'), '" + url + "', true, event);";                                      
                       
                    this.NewButton.Attributes["onClick"] = javascriptCall + "return false;";            
                }
                catch
                {
                    // do nothing.  If the code above fails, server side click event, NewButton_ClickNewButton_Click will be trigger when user click the button.
                }
                  
   
        }
            
        public virtual void SetActionsButton()                
              
        {
        
   
        }
               
        
        // Generate the event handling functions for pagination events.
        
        // event handler for ImageButton
        public virtual void Pagination_FirstPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex = 0;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination_LastPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.DisplayLastPage = true;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination_NextPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            this.PageIndex += 1;
            this.DataChanged = true;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for LinkButton
        public virtual void Pagination_PageSizeButton_Click(object sender, EventArgs args)
        {
              
            try {
                
            this.DataChanged = true;
      
            this.PageSize = this.Pagination.GetCurrentPageSize();
      
            this.PageIndex = Convert.ToInt32(this.Pagination.CurrentPage.Text) - 1;
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for ImageButton
        public virtual void Pagination_PreviousPage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            if (this.PageIndex > 0) {
                this.PageIndex -= 1;
                this.DataChanged = true;
            }
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        

        // Generate the event handling functions for sorting events.
        

        // Generate the event handling functions for button events.
        
        // event handler for ImageButton
        public virtual void NewButton_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../repair_order_notes/Add-Repair-order-notes.aspx?rono={RepairOrdersRecordControl:FV:RONo}&TabVisible=False&SaveAndNewVisible=False";
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(MiscUtils.FindControlRecursively(this, "Repair_order_notesTableControl_PostbackTracker").ClientID);                           
                                
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(document.getElementById('" + MiscUtils.FindControlRecursively(this, "Repair_order_notesTableControl_PostbackTracker").ClientID + "'), '" + url + "', true, event);";                                      
                AjaxControlToolkit.ToolkitScriptManager.RegisterStartupScript(this, this.GetType(), "NewButton_Click", javascriptCall, true);
        
            }
        
        }
            
            
        
        // event handler for Button
        public virtual void ActionsButton_Click(object sender, EventArgs args)
        {
              
            try {
                
            //This method is initially empty to implement custom click handler.
      
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        


        // Generate the event handling functions for filter and search events.
        
    
        // Generate the event handling functions for others
        	  

        protected int _TotalRecords = -1;
        public int TotalRecords 
        {
            get {
                if (_TotalRecords < 0)
                {
                    _TotalRecords = Repair_order_notesTable.GetRecordCount(CreateCompoundJoinFilter(), CreateWhereClause());
                }
                return (this._TotalRecords);
            }
            set {
                if (this.PageSize > 0) {
                  
                      this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
                          
                }
                this._TotalRecords = value;
            }
        }

      
      
        protected int _TotalPages = -1;
        public int TotalPages {
            get {
                if (_TotalPages < 0) 
                
                    this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(TotalRecords) / Convert.ToDouble(this.PageSize)));
                  
                return this._TotalPages;
            }
            set {
                this._TotalPages = value;
            }
        }

        protected bool _DisplayLastPage;
        public bool DisplayLastPage {
            get {
                return this._DisplayLastPage;
            }
            set {
                this._DisplayLastPage = value;
            }
        }


        
        private OrderBy _CurrentSortOrder = null;
        public OrderBy CurrentSortOrder {
            get {
                return this._CurrentSortOrder;
            }
            set {
                this._CurrentSortOrder = value;
            }
        }
        
        public  Repair_order_notesRecord[] DataSource {
             
            get {
                return (Repair_order_notesRecord[])(base._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }

#region "Helper Properties"
        
        public OEMConversion.UI.IThemeButtonWithArrow ActionsButton {
            get {
                return (OEMConversion.UI.IThemeButtonWithArrow)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ActionsButton");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton NewButton {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "NewButton");
            }
        }
        
        public OEMConversion.UI.IPaginationModern Pagination {
            get {
                return (OEMConversion.UI.IPaginationModern)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Pagination");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title10 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title10");
            }
        }
        
#endregion

#region "Helper Functions"
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
        }
        
        public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
        {
            return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
        }
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                Repair_order_notesTableControlRow recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        Repair_order_notesRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                return EvaluateExpressions(url, arg, rec, bEncrypt);
             
            }
            return url;
        }
        
        
        public override string EvaluateExpressions(string url, string arg, bool bEncrypt, bool includeSession)
        {
            bool needToProcess = AreAnyUrlParametersForMe(url, arg);
            if (needToProcess) {
                Repair_order_notesTableControlRow recCtl = this.GetSelectedRecordControl();
                if (recCtl == null && url.IndexOf("{") >= 0) {
                    // Localization.
                    throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
                }

        Repair_order_notesRecord rec = null;
                if (recCtl != null) {
                    rec = recCtl.GetRecord();
                }
                
                if (includeSession)
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt);
                }
                else
                {
                    return EvaluateExpressions(url, arg, rec, bEncrypt,false);
                }
             
            }
            return url;
        }
          
        public virtual Repair_order_notesTableControlRow GetSelectedRecordControl()
        {
        
            return null;
          
        }

        public virtual Repair_order_notesTableControlRow[] GetSelectedRecordControls()
        {
        
            return (Repair_order_notesTableControlRow[])((new ArrayList()).ToArray(Type.GetType("OEMConversion.UI.Controls.Edit_RepairOrders.Repair_order_notesTableControlRow")));
          
        }

        public virtual void DeleteSelectedRecords(bool deferDeletion)
        {
            Repair_order_notesTableControlRow[] recordList = this.GetSelectedRecordControls();
            if (recordList.Length == 0) {
                // Localization.
                throw new Exception(Page.GetResourceValue("Err:NoRecSelected", "OEMConversion"));
            }
            
            foreach (Repair_order_notesTableControlRow recCtl in recordList)
            {
                if (deferDeletion) {
                    if (!recCtl.IsNewRecord) {
                
                        this.AddToDeletedRecordIds(recCtl);
                  
                    }
                    recCtl.Visible = false;
                
                } else {
                
                    recCtl.Delete();
                    // Setting the DataChanged to True results in the page being refreshed with
                    // the most recent data from the database.  This happens in PreRender event
                    // based on the current sort, search and filter criteria.
                    this.DataChanged = true;
                    this.ResetData = true;
                  
                }
            }
        }

        public virtual Repair_order_notesTableControlRow[] GetRecordControls()
        {
            Control[] recCtrls = BaseClasses.Utils.MiscUtils.FindControlsRecursively(this, "Repair_order_notesTableControlRow");
	          List<Repair_order_notesTableControlRow> list = new List<Repair_order_notesTableControlRow>();
	          foreach (Repair_order_notesTableControlRow recCtrl in recCtrls) {
		          list.Add(recCtrl);
	          }
	          return list.ToArray();
        }

        public new BaseApplicationPage Page 
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }
        
                

        
        
#endregion


    }
  
// Base class for the AccessoriesRecordControl control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in AccessoriesRecordControl.
public class BaseAccessoriesRecordControl : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseAccessoriesRecordControl()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in AccessoriesRecordControl.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in AccessoriesRecordControl.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
              this.ROAccessory01.CheckedChanged += ROAccessory01_CheckedChanged;
            
              this.ROAccessory11.CheckedChanged += ROAccessory11_CheckedChanged;
            
              this.ROAccessory21.CheckedChanged += ROAccessory21_CheckedChanged;
            
              this.ROAccessory31.CheckedChanged += ROAccessory31_CheckedChanged;
            
              this.ROAccessory41.CheckedChanged += ROAccessory41_CheckedChanged;
            
              this.ROAccessory51.CheckedChanged += ROAccessory51_CheckedChanged;
            
              this.ROAccessory61.CheckedChanged += ROAccessory61_CheckedChanged;
            
              this.ROAccessory71.CheckedChanged += ROAccessory71_CheckedChanged;
            
              this.ROAccessory81.CheckedChanged += ROAccessory81_CheckedChanged;
            
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "AccessoriesRecordControlPanel");
            if (Panel != null){
                Panel.Visible = true;
            }
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new RepairOrdersRecord();
            
                if (Panel != null){
                    Panel.Visible = false;
                }
              
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            RepairOrdersRecord[] recList = RepairOrdersTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                if (Panel != null){
                    Panel.Visible = false;
                }
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = RepairOrdersTable.GetRecord(recList[0].GetID().ToXmlString(), true);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                SetROAccessory01();
                SetROAccessory0Label1();
                SetROAccessory11();
                SetROAccessory1Label1();
                SetROAccessory21();
                SetROAccessory2Label1();
                SetROAccessory31();
                SetROAccessory3Label1();
                SetROAccessory41();
                SetROAccessory4Label1();
                SetROAccessory51();
                SetROAccessory5Label1();
                SetROAccessory61();
                SetROAccessory6Label1();
                SetROAccessory71();
                SetROAccessory7Label1();
                SetROAccessory81();
                SetROAccessory8Label1();
                

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void SetROAccessory01()
        {
            
                    
            // Set the ROAccessory0 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory01 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory0Specified) {
                							
                // If the ROAccessory0 is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROAccessory01.Checked = this.DataSource.ROAccessory0;
                    				
            } else {
            
                // ROAccessory0 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory01.Checked = RepairOrdersTable.ROAccessory0.ParseValue(RepairOrdersTable.ROAccessory0.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory11()
        {
            
                    
            // Set the ROAccessory1 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory11 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory1Specified) {
                							
                // If the ROAccessory1 is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROAccessory11.Checked = this.DataSource.ROAccessory1;
                    				
            } else {
            
                // ROAccessory1 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory11.Checked = RepairOrdersTable.ROAccessory1.ParseValue(RepairOrdersTable.ROAccessory1.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory21()
        {
            
                    
            // Set the ROAccessory2 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory21 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory2Specified) {
                							
                // If the ROAccessory2 is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROAccessory21.Checked = this.DataSource.ROAccessory2;
                    				
            } else {
            
                // ROAccessory2 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory21.Checked = RepairOrdersTable.ROAccessory2.ParseValue(RepairOrdersTable.ROAccessory2.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory31()
        {
            
                    
            // Set the ROAccessory3 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory31 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory3Specified) {
                							
                // If the ROAccessory3 is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROAccessory31.Checked = this.DataSource.ROAccessory3;
                    				
            } else {
            
                // ROAccessory3 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory31.Checked = RepairOrdersTable.ROAccessory3.ParseValue(RepairOrdersTable.ROAccessory3.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory41()
        {
            
                    
            // Set the ROAccessory4 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory41 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory4Specified) {
                							
                // If the ROAccessory4 is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                this.ROAccessory41.Checked = this.DataSource.ROAccessory4;
                    				
            } else {
            
                // ROAccessory4 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory41.Checked = RepairOrdersTable.ROAccessory4.ParseValue(RepairOrdersTable.ROAccessory4.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory51()
        {
            
                    
            // Set the ROAccessory5 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory51 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory5Specified) {
                							
                // If the ROAccessory5 is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROAccessory51.Checked = this.DataSource.ROAccessory5;
                    				
            } else {
            
                // ROAccessory5 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory51.Checked = RepairOrdersTable.ROAccessory5.ParseValue(RepairOrdersTable.ROAccessory5.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory61()
        {
            
                    
            // Set the ROAccessory6 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory61 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory6Specified) {
                							
                // If the ROAccessory6 is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROAccessory61.Checked = this.DataSource.ROAccessory6;
                    				
            } else {
            
                // ROAccessory6 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory61.Checked = RepairOrdersTable.ROAccessory6.ParseValue(RepairOrdersTable.ROAccessory6.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory71()
        {
            
                    
            // Set the ROAccessory7 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory71 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory7Specified) {
                							
                // If the ROAccessory7 is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROAccessory71.Checked = this.DataSource.ROAccessory7;
                    				
            } else {
            
                // ROAccessory7 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory71.Checked = RepairOrdersTable.ROAccessory7.ParseValue(RepairOrdersTable.ROAccessory7.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory81()
        {
            
                    
            // Set the ROAccessory8 CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROAccessory81 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROAccessory8Specified) {
                							
                // If the ROAccessory8 is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROAccessory81.Checked = this.DataSource.ROAccessory8;
                    				
            } else {
            
                // ROAccessory8 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROAccessory81.Checked = RepairOrdersTable.ROAccessory8.ParseValue(RepairOrdersTable.ROAccessory8.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROAccessory0Label1()
                  {
                  
                        this.ROAccessory0Label1.Text = EvaluateFormula("\"Case\"");
                      
                    
        }
                
        public virtual void SetROAccessory1Label1()
                  {
                  
                        this.ROAccessory1Label1.Text = EvaluateFormula("\"Box\"");
                      
                    
        }
                
        public virtual void SetROAccessory2Label1()
                  {
                  
                        this.ROAccessory2Label1.Text = EvaluateFormula("\"Water Cap\"");
                      
                    
        }
                
        public virtual void SetROAccessory3Label1()
                  {
                  
                        this.ROAccessory3Label1.Text = EvaluateFormula("\"Valves\"");
                      
                    
        }
                
        public virtual void SetROAccessory4Label1()
                  {
                  
                        this.ROAccessory4Label1.Text = EvaluateFormula("\"Light Cable\"");
                      
                    
        }
                
        public virtual void SetROAccessory5Label1()
                  {
                  
                        this.ROAccessory5Label1.Text = EvaluateFormula("\"Battery Light Source\"");
                      
                    
        }
                
        public virtual void SetROAccessory6Label1()
                  {
                  
                        this.ROAccessory6Label1.Text = EvaluateFormula("\"Forcep\"");
                      
                    
        }
                
        public virtual void SetROAccessory7Label1()
                  {
                  
                        this.ROAccessory7Label1.Text = EvaluateFormula("\"Cleaning Adapter\"");
                      
                    
        }
                
        public virtual void SetROAccessory8Label1()
                  {
                  
                        this.ROAccessory8Label1.Text = EvaluateFormula("\"Brush\"");
                      
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "AccessoriesRecordControlPanel");
            if ( (Panel != null && !Panel.Visible) || this.DataSource == null){
                return;
            }
          
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            GetROAccessory01();
            GetROAccessory11();
            GetROAccessory21();
            GetROAccessory31();
            GetROAccessory41();
            GetROAccessory51();
            GetROAccessory61();
            GetROAccessory71();
            GetROAccessory81();
        }
        
        
        public virtual void GetROAccessory01()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory0 ASP:CheckBox, and
            // save it into the ROAccessory0 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory0 = this.ROAccessory01.Checked;						
                    
        }
                
        public virtual void GetROAccessory11()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory1 ASP:CheckBox, and
            // save it into the ROAccessory1 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory1 = this.ROAccessory11.Checked;						
                    
        }
                
        public virtual void GetROAccessory21()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory2 ASP:CheckBox, and
            // save it into the ROAccessory2 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory2 = this.ROAccessory21.Checked;						
                    
        }
                
        public virtual void GetROAccessory31()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory3 ASP:CheckBox, and
            // save it into the ROAccessory3 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory3 = this.ROAccessory31.Checked;						
                    
        }
                
        public virtual void GetROAccessory41()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory4 ASP:CheckBox, and
            // save it into the ROAccessory4 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory4 = this.ROAccessory41.Checked;						
                    
        }
                
        public virtual void GetROAccessory51()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory5 ASP:CheckBox, and
            // save it into the ROAccessory5 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory5 = this.ROAccessory51.Checked;						
                    
        }
                
        public virtual void GetROAccessory61()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory6 ASP:CheckBox, and
            // save it into the ROAccessory6 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory6 = this.ROAccessory61.Checked;						
                    
        }
                
        public virtual void GetROAccessory71()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory7 ASP:CheckBox, and
            // save it into the ROAccessory7 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory7 = this.ROAccessory71.Checked;						
                    
        }
                
        public virtual void GetROAccessory81()
        {	
        		
            // Retrieve the value entered by the user on the ROAccessory8 ASP:CheckBox, and
            // save it into the ROAccessory8 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROAccessory8 = this.ROAccessory81.Checked;						
                    
        }
                

      // To customize, override this method in AccessoriesRecordControl.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            RepairOrdersTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

              
            // Retrieve the record id from the URL parameter.
              
            string recId = ((BaseApplicationPage)(this.Page)).Decrypt(this.Page.Request.QueryString["RepairOrders"]);
                
            if (recId == null || recId.Length == 0) {
                // Get the error message from the application resource file.
                throw new Exception(Page.GetResourceValue("Err:UrlParamMissing", "OEMConversion").Replace("{URL}", "RepairOrders"));
            }
            HttpContext.Current.Session["QueryString in Edit-RepairOrders"] = recId;
                  
            if (KeyValue.IsXmlKey(recId)) {
                // Keys are typically passed as XML structures to handle composite keys.
                // If XML, then add a Where clause based on the Primary Key in the XML.
                KeyValue pkValue = KeyValue.XmlToKey(recId);
            
          wc.iAND(RepairOrdersTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, pkValue.GetColumnValueString(RepairOrdersTable.RONo));
          
            }
            else {
                // The URL parameter contains the actual value, not an XML structure.
            
          wc.iAND(RepairOrdersTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, recId);
             
            }
              
            return wc;
          
        }
        
        
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            RepairOrdersTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          RepairOrdersTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        protected virtual void ROAccessory01_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROAccessory11_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROAccessory21_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROAccessory31_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROAccessory41_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROAccessory51_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROAccessory61_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROAccessory71_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROAccessory81_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseAccessoriesRecordControl_Rec"];
            }
            set {
                this.ViewState["BaseAccessoriesRecordControl_Rec"] = value;
            }
        }
        
        public RepairOrdersRecord DataSource {
            get {
                return (RepairOrdersRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.CheckBox ROAccessory01 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory01");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory0Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory0Label1");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROAccessory11 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory11");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory1Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory1Label1");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROAccessory21 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory21");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory2Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory2Label1");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROAccessory31 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory31");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory3Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory3Label1");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROAccessory41 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory41");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory4Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory4Label1");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROAccessory51 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory51");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory5Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory5Label1");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROAccessory61 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory61");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory6Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory6Label1");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROAccessory71 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory71");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory7Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory7Label1");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROAccessory81 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory81");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROAccessory8Label1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROAccessory8Label1");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title4 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title4");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        RepairOrdersRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    RepairOrdersRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual RepairOrdersRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            throw new Exception(Page.GetResourceValue("Err:RetrieveRec", "OEMConversion"));
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the CustomerContactsRecordControl control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in CustomerContactsRecordControl.
public class BaseCustomerContactsRecordControl : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseCustomerContactsRecordControl()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in CustomerContactsRecordControl.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in CustomerContactsRecordControl.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
                    this.DialogEditButton.Click += DialogEditButton_Click;
                        
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.CustomerContacts record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = CustomerContactsTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "CustomerContactsRecordControlPanel");
            if (Panel != null){
                Panel.Visible = true;
            }
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new CustomerContactsRecord();
            
                if (Panel != null){
                    Panel.Visible = false;
                }
              
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            CustomerContactsRecord[] recList = CustomerContactsTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                if (Panel != null){
                    Panel.Visible = false;
                }
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = CustomerContactsTable.GetRecord(recList[0].GetID().ToXmlString(), true);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                SetCustContactEmail();
                SetCustContactEmailLabel();
                SetCustContactFax();
                SetCustContactFaxLabel();
                SetCustContactName();
                SetCustContactNameLabel();
                SetCustContactPhoneBusiness();
                SetCustContactPhoneBusinessLabel();
                SetCustContactPhoneMobile();
                SetCustContactPhoneMobileLabel();
                SetCustContactTitle();
                SetCustContactTitleLabel();
                
                SetImage();
                
                SetDialogEditButton();
              

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void SetCustContactEmail()
        {
            
                    
            // Set the CustContactEmail Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.CustomerContacts database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.CustomerContacts record retrieved from the database.
            // this.CustContactEmail is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustContactEmailSpecified) {
                								
                // If the CustContactEmail is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomerContactsTable.CustContactEmail);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.CustContactEmail.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustContactEmail is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustContactEmail.Text = CustomerContactsTable.CustContactEmail.Format(CustomerContactsTable.CustContactEmail.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetCustContactFax()
        {
            
                    
            // Set the CustContactFax Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.CustomerContacts database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.CustomerContacts record retrieved from the database.
            // this.CustContactFax is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustContactFaxSpecified) {
                								
                // If the CustContactFax is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomerContactsTable.CustContactFax);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.CustContactFax.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustContactFax is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustContactFax.Text = CustomerContactsTable.CustContactFax.Format(CustomerContactsTable.CustContactFax.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetCustContactName()
        {
            
                    
            // Set the CustContactName Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.CustomerContacts database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.CustomerContacts record retrieved from the database.
            // this.CustContactName is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustContactNameSpecified) {
                								
                // If the CustContactName is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomerContactsTable.CustContactName);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.CustContactName.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustContactName is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustContactName.Text = CustomerContactsTable.CustContactName.Format(CustomerContactsTable.CustContactName.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetCustContactPhoneBusiness()
        {
            
                    
            // Set the CustContactPhoneBusiness Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.CustomerContacts database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.CustomerContacts record retrieved from the database.
            // this.CustContactPhoneBusiness is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustContactPhoneBusinessSpecified) {
                								
                // If the CustContactPhoneBusiness is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomerContactsTable.CustContactPhoneBusiness);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.CustContactPhoneBusiness.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustContactPhoneBusiness is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustContactPhoneBusiness.Text = CustomerContactsTable.CustContactPhoneBusiness.Format(CustomerContactsTable.CustContactPhoneBusiness.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetCustContactPhoneMobile()
        {
            
                    
            // Set the CustContactPhoneMobile Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.CustomerContacts database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.CustomerContacts record retrieved from the database.
            // this.CustContactPhoneMobile is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustContactPhoneMobileSpecified) {
                								
                // If the CustContactPhoneMobile is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomerContactsTable.CustContactPhoneMobile);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.CustContactPhoneMobile.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustContactPhoneMobile is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustContactPhoneMobile.Text = CustomerContactsTable.CustContactPhoneMobile.Format(CustomerContactsTable.CustContactPhoneMobile.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetCustContactTitle()
        {
            
                    
            // Set the CustContactTitle Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.CustomerContacts database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.CustomerContacts record retrieved from the database.
            // this.CustContactTitle is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustContactTitleSpecified) {
                								
                // If the CustContactTitle is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomerContactsTable.CustContactTitle);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.CustContactTitle.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustContactTitle is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustContactTitle.Text = CustomerContactsTable.CustContactTitle.Format(CustomerContactsTable.CustContactTitle.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetCustContactEmailLabel()
                  {
                  
                        this.CustContactEmailLabel.Text = EvaluateFormula("\"Email\"");
                      
                    
        }
                
        public virtual void SetCustContactFaxLabel()
                  {
                  
                        this.CustContactFaxLabel.Text = EvaluateFormula("\"Contact Fax\"");
                      
                    
        }
                
        public virtual void SetCustContactNameLabel()
                  {
                  
                        this.CustContactNameLabel.Text = EvaluateFormula("\"Contact Name\"");
                      
                    
        }
                
        public virtual void SetCustContactPhoneBusinessLabel()
                  {
                  
                        this.CustContactPhoneBusinessLabel.Text = EvaluateFormula("\"Phone\"");
                      
                    
        }
                
        public virtual void SetCustContactPhoneMobileLabel()
                  {
                  
                        this.CustContactPhoneMobileLabel.Text = EvaluateFormula("\"Mobile\"");
                      
                    
        }
                
        public virtual void SetCustContactTitleLabel()
                  {
                  
                        this.CustContactTitleLabel.Text = EvaluateFormula("\"Title\"");
                      
                    
        }
                
        public virtual void SetImage()
                  {
                  
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "CustomerContactsRecordControlPanel");
            if ( (Panel != null && !Panel.Visible) || this.DataSource == null){
                return;
            }
          
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            GetCustContactEmail();
            GetCustContactFax();
            GetCustContactName();
            GetCustContactPhoneBusiness();
            GetCustContactPhoneMobile();
            GetCustContactTitle();
        }
        
        
        public virtual void GetCustContactEmail()
        {
            
        }
                
        public virtual void GetCustContactFax()
        {
            
        }
                
        public virtual void GetCustContactName()
        {
            
        }
                
        public virtual void GetCustContactPhoneBusiness()
        {
            
        }
                
        public virtual void GetCustContactPhoneMobile()
        {
            
        }
                
        public virtual void GetCustContactTitle()
        {
            
        }
                

      // To customize, override this method in CustomerContactsRecordControl.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            CustomerContactsTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

              
            // Get the static clause defined at design time on the Record Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
            
            return wc;
          
        }
        
        
        protected virtual WhereClause CreateQueryClause()
        {
            // Create a where clause for the Static clause defined at design time.
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            filter.AddFilter(new BaseClasses.Data.ColumnJoinFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.CustomerContactsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"CustomerContacts_.CustNo"), new BaseClasses.Data.IdentifierAliasInfo(@"CustomerContacts_", null), BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RepairOrdersTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RepairOrders_.ROCustNo"), new BaseClasses.Data.IdentifierAliasInfo(@"RepairOrders_", null),  BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
            if (EvaluateFormula("URL(\"RepairOrders\")", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RepairOrdersTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RepairOrders_.RONo"), EvaluateFormula("URL(\"RepairOrders\")", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("URL(\"RepairOrders\")", false) == "--PLEASE_SELECT--" || EvaluateFormula("URL(\"RepairOrders\")", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;
        }
          
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            CustomerContactsTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          CustomerContactsTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                
            this.Page.Authorize((Control)DialogEditButton, "3");
									
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        public virtual void SetDialogEditButton()                
              
        {
        
   
        }
            
        // event handler for ImageButton
        public virtual void DialogEditButton_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../CustomerContacts/Edit-CustomerContacts.aspx?CustomerContacts={PK}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseCustomerContactsRecordControl_Rec"];
            }
            set {
                this.ViewState["BaseCustomerContactsRecordControl_Rec"] = value;
            }
        }
        
        public CustomerContactsRecord DataSource {
            get {
                return (CustomerContactsRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.Literal CustContactEmail {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactEmail");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustContactEmailLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactEmailLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal CustContactFax {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactFax");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustContactFaxLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactFaxLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal CustContactName {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactName");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustContactNameLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactNameLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal CustContactPhoneBusiness {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactPhoneBusiness");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustContactPhoneBusinessLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactPhoneBusinessLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal CustContactPhoneMobile {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactPhoneMobile");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustContactPhoneMobileLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactPhoneMobileLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal CustContactTitle {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactTitle");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustContactTitleLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustContactTitleLabel");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton DialogEditButton {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DialogEditButton");
            }
        }
        
        public System.Web.UI.WebControls.Image Image {
            get {
                return (System.Web.UI.WebControls.Image)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Image");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title9 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title9");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        CustomerContactsRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    CustomerContactsRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual CustomerContactsRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return CustomerContactsTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            throw new Exception(Page.GetResourceValue("Err:RetrieveRec", "OEMConversion"));
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the CustomersRecordControl control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in CustomersRecordControl.
public class BaseCustomersRecordControl : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseCustomersRecordControl()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in CustomersRecordControl.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in CustomersRecordControl.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
                    this.Button3.Button.Click += Button3_Click;
                        
              this.CustAdvertising.SelectedIndexChanged += CustAdvertising_SelectedIndexChanged;
            
              this.CustProvince.SelectedIndexChanged += CustProvince_SelectedIndexChanged;
            
              this.CustShipVia.SelectedIndexChanged += CustShipVia_SelectedIndexChanged;
            
              this.CustAddress1.TextChanged += CustAddress1_TextChanged;
            
              this.CustAddress2.TextChanged += CustAddress2_TextChanged;
            
              this.CustCity.TextChanged += CustCity_TextChanged;
            
              this.CustFax.TextChanged += CustFax_TextChanged;
            
              this.CustName.TextChanged += CustName_TextChanged;
            
              this.CustNo.TextChanged += CustNo_TextChanged;
            
              this.CustPhoneBusiness.TextChanged += CustPhoneBusiness_TextChanged;
            
              this.CustPostalCode.TextChanged += CustPostalCode_TextChanged;
            
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.Customers record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "CustomersRecordControlPanel");
            if (Panel != null){
                Panel.Visible = true;
            }
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new CustomersRecord();
            
                if (Panel != null){
                    Panel.Visible = false;
                }
              
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            CustomersRecord[] recList = CustomersTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                if (Panel != null){
                    Panel.Visible = false;
                }
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = CustomersTable.GetRecord(recList[0].GetID().ToXmlString(), true);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                
                SetCustAddress1();
                SetCustAddress1Label();
                SetCustAddress2();
                SetCustAddress2Label();
                SetCustAdvertising();
                SetCustAdvertisingLabel();
                SetCustCity();
                SetCustCityLabel();
                SetCustFax();
                SetCustFaxLabel();
                SetCustName();
                SetCustNo();
                SetCustNoLabel();
                SetCustPhoneBusiness();
                SetCustPhoneBusinessLabel();
                SetCustPostalCode();
                SetCustPostalCodeLabel();
                SetCustProvince();
                SetCustProvinceLabel();
                SetCustShipVia();
                SetCustShipViaLabel();
                SetImage1();
                
                SetButton3();
              

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void SetCustAddress1()
        {
            
                    
            // Set the CustAddress1 TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustAddress1 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustAddress1Specified) {
                								
                // If the CustAddress1 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomersTable.CustAddress1);
                                
                this.CustAddress1.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustAddress1 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustAddress1.Text = CustomersTable.CustAddress1.Format(CustomersTable.CustAddress1.DefaultValue);
            		
            }
            
              this.CustAddress1.TextChanged += CustAddress1_TextChanged;
                               
        }
                
        public virtual void SetCustAddress2()
        {
            
                    
            // Set the CustAddress2 TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustAddress2 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustAddress2Specified) {
                								
                // If the CustAddress2 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomersTable.CustAddress2);
                                
                this.CustAddress2.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustAddress2 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustAddress2.Text = CustomersTable.CustAddress2.Format(CustomersTable.CustAddress2.DefaultValue);
            		
            }
            
              this.CustAddress2.TextChanged += CustAddress2_TextChanged;
                               
        }
                
        public virtual void SetCustAdvertising()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the CustAdvertising DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustAdvertising is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetCustAdvertising();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.CustAdvertisingSpecified)
            {
                            
                // If the CustAdvertising is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.CustAdvertising;
                
            }
            else
            {
                
                // CustAdvertising is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = CustomersTable.CustAdvertising.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateCustAdvertisingDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetCustCity()
        {
            
                    
            // Set the CustCity TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustCity is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustCitySpecified) {
                								
                // If the CustCity is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomersTable.CustCity);
                                
                this.CustCity.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustCity is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustCity.Text = CustomersTable.CustCity.Format(CustomersTable.CustCity.DefaultValue);
            		
            }
            
              this.CustCity.TextChanged += CustCity_TextChanged;
                               
        }
                
        public virtual void SetCustFax()
        {
            
                    
            // Set the CustFax TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustFax is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustFaxSpecified) {
                								
                // If the CustFax is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomersTable.CustFax);
                                
                this.CustFax.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustFax is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustFax.Text = CustomersTable.CustFax.Format(CustomersTable.CustFax.DefaultValue);
            		
            }
            
              this.CustFax.TextChanged += CustFax_TextChanged;
                               
        }
                
        public virtual void SetCustName()
        {
            
                    
            // Set the CustName TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustName is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustNameSpecified) {
                								
                // If the CustName is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomersTable.CustName);
                                
                this.CustName.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustName is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustName.Text = CustomersTable.CustName.Format(CustomersTable.CustName.DefaultValue);
            		
            }
            
              this.CustName.TextChanged += CustName_TextChanged;
                               
        }
                
        public virtual void SetCustNo()
        {
            
                    
            // Set the CustNo TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustNo is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustNoSpecified) {
                								
                // If the CustNo is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomersTable.CustNo);
                                
                this.CustNo.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustNo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustNo.Text = CustomersTable.CustNo.Format(CustomersTable.CustNo.DefaultValue);
            		
            }
            
              this.CustNo.TextChanged += CustNo_TextChanged;
                               
        }
                
        public virtual void SetCustPhoneBusiness()
        {
            
                    
            // Set the CustPhoneBusiness TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustPhoneBusiness is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustPhoneBusinessSpecified) {
                								
                // If the CustPhoneBusiness is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomersTable.CustPhoneBusiness);
                                
                this.CustPhoneBusiness.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustPhoneBusiness is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustPhoneBusiness.Text = CustomersTable.CustPhoneBusiness.Format(CustomersTable.CustPhoneBusiness.DefaultValue);
            		
            }
            
              this.CustPhoneBusiness.TextChanged += CustPhoneBusiness_TextChanged;
                               
        }
                
        public virtual void SetCustPostalCode()
        {
            
                    
            // Set the CustPostalCode TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustPostalCode is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.CustPostalCodeSpecified) {
                								
                // If the CustPostalCode is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(CustomersTable.CustPostalCode);
                                
                this.CustPostalCode.Text = formattedValue;
                   
            } 
            
            else {
            
                // CustPostalCode is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.CustPostalCode.Text = CustomersTable.CustPostalCode.Format(CustomersTable.CustPostalCode.DefaultValue);
            		
            }
            
              this.CustPostalCode.TextChanged += CustPostalCode_TextChanged;
                               
        }
                
        public virtual void SetCustProvince()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the CustProvince DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustProvince is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetCustProvince();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.CustProvinceSpecified)
            {
                            
                // If the CustProvince is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.CustProvince;
                
            }
            else
            {
                
                // CustProvince is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = CustomersTable.CustProvince.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateCustProvinceDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetCustShipVia()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the CustShipVia DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Customers database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.Customers record retrieved from the database.
            // this.CustShipVia is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetCustShipVia();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.CustShipViaSpecified)
            {
                            
                // If the CustShipVia is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.CustShipVia;
                
            }
            else
            {
                
                // CustShipVia is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = CustomersTable.CustShipVia.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateCustShipViaDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetCustAddress1Label()
                  {
                  
                        this.CustAddress1Label.Text = EvaluateFormula("\"Address\"");
                      
                    
        }
                
        public virtual void SetCustAddress2Label()
                  {
                  
                        this.CustAddress2Label.Text = EvaluateFormula("\"Address 2\"");
                      
                    
        }
                
        public virtual void SetCustAdvertisingLabel()
                  {
                  
                        this.CustAdvertisingLabel.Text = EvaluateFormula("\"Advertising\"");
                      
                    
        }
                
        public virtual void SetCustCityLabel()
                  {
                  
                        this.CustCityLabel.Text = EvaluateFormula("\"City\"");
                      
                    
        }
                
        public virtual void SetCustFaxLabel()
                  {
                  
                        this.CustFaxLabel.Text = EvaluateFormula("\"Fax\"");
                      
                    
        }
                
        public virtual void SetCustNoLabel()
                  {
                  
                        this.CustNoLabel.Text = EvaluateFormula("\"Facility #\"");
                      
                    
        }
                
        public virtual void SetCustPhoneBusinessLabel()
                  {
                  
                        this.CustPhoneBusinessLabel.Text = EvaluateFormula("\"Phone Business\"");
                      
                    
        }
                
        public virtual void SetCustPostalCodeLabel()
                  {
                  
                        this.CustPostalCodeLabel.Text = EvaluateFormula("\"Zip Code\"");
                      
                    
        }
                
        public virtual void SetCustProvinceLabel()
                  {
                  
                        this.CustProvinceLabel.Text = EvaluateFormula("\"State\"");
                      
                    
        }
                
        public virtual void SetCustShipViaLabel()
                  {
                  
                        this.CustShipViaLabel.Text = EvaluateFormula("\"Ship Via\"");
                      
                    
        }
                
        public virtual void SetImage1()
                  {
                  
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "CustomersRecordControlPanel");
            if ( (Panel != null && !Panel.Visible) || this.DataSource == null){
                return;
            }
          RepairOrdersRecordControl parentCtrl;
      
            parentCtrl = (RepairOrdersRecordControl)MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl");
          
        if (parentCtrl != null && parentCtrl.DataSource == null) {
        // Load the record if it is not loaded yet.
        parentCtrl.LoadData();
        }
        if (parentCtrl == null || parentCtrl.DataSource == null) {
        // Get the error message from the application resource file.
        throw new Exception(Page.GetResourceValue("Err:NoParentRecId", "OEMConversion"));
        }
        
          this.DataSource.CustNo = parentCtrl.DataSource.ROCustNo;
        
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            GetCustAddress1();
            GetCustAddress2();
            GetCustAdvertising();
            GetCustCity();
            GetCustFax();
            GetCustName();
            GetCustNo();
            GetCustPhoneBusiness();
            GetCustPostalCode();
            GetCustProvince();
            GetCustShipVia();
        }
        
        
        public virtual void GetCustAddress1()
        {
            
            // Retrieve the value entered by the user on the CustAddress1 ASP:TextBox, and
            // save it into the CustAddress1 field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.CustAddress1.Text, CustomersTable.CustAddress1);							
                          
                      
        }
                
        public virtual void GetCustAddress2()
        {
            
            // Retrieve the value entered by the user on the CustAddress2 ASP:TextBox, and
            // save it into the CustAddress2 field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.CustAddress2.Text, CustomersTable.CustAddress2);							
                          
                      
        }
                
        public virtual void GetCustAdvertising()
        {
         // Retrieve the value entered by the user on the CustAdvertising ASP:DropDownList, and
            // save it into the CustAdvertising field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.CustAdvertising), CustomersTable.CustAdvertising);			
                			 
        }
                
        public virtual void GetCustCity()
        {
            
            // Retrieve the value entered by the user on the CustCity ASP:TextBox, and
            // save it into the CustCity field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.CustCity.Text, CustomersTable.CustCity);							
                          
                      
        }
                
        public virtual void GetCustFax()
        {
            
            // Retrieve the value entered by the user on the CustFax ASP:TextBox, and
            // save it into the CustFax field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.CustFax.Text, CustomersTable.CustFax);							
                          
                      
        }
                
        public virtual void GetCustName()
        {
            
            // Retrieve the value entered by the user on the CustName ASP:TextBox, and
            // save it into the CustName field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.CustName.Text, CustomersTable.CustName);							
                          
                      
        }
                
        public virtual void GetCustNo()
        {
            
            // Retrieve the value entered by the user on the CustNo ASP:TextBox, and
            // save it into the CustNo field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.CustNo.Text, CustomersTable.CustNo);							
                          
                      
        }
                
        public virtual void GetCustPhoneBusiness()
        {
            
            // Retrieve the value entered by the user on the CustPhoneBusiness ASP:TextBox, and
            // save it into the CustPhoneBusiness field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.CustPhoneBusiness.Text, CustomersTable.CustPhoneBusiness);							
                          
                      
        }
                
        public virtual void GetCustPostalCode()
        {
            
            // Retrieve the value entered by the user on the CustPostalCode ASP:TextBox, and
            // save it into the CustPostalCode field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.CustPostalCode.Text, CustomersTable.CustPostalCode);							
                          
                      
        }
                
        public virtual void GetCustProvince()
        {
         // Retrieve the value entered by the user on the CustProvince ASP:DropDownList, and
            // save it into the CustProvince field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.CustProvince), CustomersTable.CustProvince);			
                			 
        }
                
        public virtual void GetCustShipVia()
        {
         // Retrieve the value entered by the user on the CustShipVia ASP:DropDownList, and
            // save it into the CustShipVia field in DataSource DatabaseAYS_OEM%dbo.Customers record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.CustShipVia), CustomersTable.CustShipVia);			
                			 
        }
                

      // To customize, override this method in CustomersRecordControl.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            CustomersTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

              
      KeyValue selectedRecordKeyValue = new KeyValue();
    RepairOrdersRecordControl repairOrdersRecordControlObj = (MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl") as RepairOrdersRecordControl);
          
              if (repairOrdersRecordControlObj != null && repairOrdersRecordControlObj.GetRecord() != null && repairOrdersRecordControlObj.GetRecord().IsCreated)
              {
              wc.iAND(CustomersTable.CustNo, BaseFilter.ComparisonOperator.EqualsTo, repairOrdersRecordControlObj.GetRecord().ROCustNo.ToString());
              selectedRecordKeyValue.AddElement(CustomersTable.CustNo.InternalName, repairOrdersRecordControlObj.GetRecord().ROCustNo.ToString());
              }
              else
              {
              wc.RunQuery = false;
              return wc;
              }
            
      HttpContext.Current.Session["CustomersRecordControlWhereClause"] = selectedRecordKeyValue.ToXmlString();
    
            return wc;
          
        }
        
        
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            CustomersTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
      string selectedRecordInRepairOrdersRecordControl = HttpContext.Current.Session["CustomersRecordControlWhereClause"] as string;
      
      if (selectedRecordInRepairOrdersRecordControl != null && KeyValue.IsXmlKey(selectedRecordInRepairOrdersRecordControl))
      {
      KeyValue selectedRecordKeyValue = KeyValue.XmlToKey(selectedRecordInRepairOrdersRecordControl);
      
      if (selectedRecordKeyValue != null && selectedRecordKeyValue.ContainsColumn(CustomersTable.CustNo))
      {
      wc.iAND(CustomersTable.CustNo, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(CustomersTable.CustNo).ToString());
      }
    
      }
    
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          CustomersTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        public virtual void SetButton3()                
              
        {
        
   
        }
            
        public virtual WhereClause CreateWhereClause_CustAdvertisingDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Advertising table.
            // Examples:
            // wc.iAND(AdvertisingTable.Advertising, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(AdvertisingTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.AdvertisingTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Advertising_.Advertising_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_CustProvinceDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Provinces table.
            // Examples:
            // wc.iAND(ProvincesTable.ProvCode, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(ProvincesTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.ProvincesTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Provinces_.Prov_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_CustShipViaDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.ShippingTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Shipping_.shipping_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        // Fill the CustAdvertising list.
        protected virtual void PopulateCustAdvertisingDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.CustAdvertising.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.CustAdvertising.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_CustAdvertisingDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_CustAdvertisingDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(AdvertisingTable.Advertising, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the CustAdvertisingDropDownList.
            AdvertisingRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = AdvertisingTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (AdvertisingRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.AdvertisingSpecified) 
                        {
                            cvalue = itemValue.Advertising.ToString();
                            if (counter < maxItems && this.CustAdvertising.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Advertising.Advertising", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.CustAdvertising.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.CustAdvertising.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.CustAdvertising, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.CustAdvertising, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Advertising.Advertising = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(AdvertisingTable.Advertising, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    AdvertisingRecord[] rc = AdvertisingTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        AdvertisingRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.AdvertisingSpecified)
                            cvalue = itemValue.Advertising.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Advertising.Advertising", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.CustAdvertising, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the CustProvince list.
        protected virtual void PopulateCustProvinceDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.CustProvince.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.CustProvince.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_CustProvinceDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_CustProvinceDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(ProvincesTable.ProvCode, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the CustProvinceDropDownList.
            ProvincesRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = ProvincesTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (ProvincesRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.ProvCodeSpecified) 
                        {
                            cvalue = itemValue.ProvCode.ToString();
                            if (counter < maxItems && this.CustProvince.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Provinces.ProvName", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.CustProvince.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.CustProvince.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.CustProvince, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.CustProvince, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Provinces.ProvCode = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(ProvincesTable.ProvCode, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    ProvincesRecord[] rc = ProvincesTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        ProvincesRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.ProvCodeSpecified)
                            cvalue = itemValue.ProvCode.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Provinces.ProvName", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.CustProvince, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the CustShipVia list.
        protected virtual void PopulateCustShipViaDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.CustShipVia.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.CustShipVia.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_CustShipViaDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_CustShipViaDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(ShippingTable.ShipVia, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the CustShipViaDropDownList.
            ShippingRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = ShippingTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (ShippingRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.ShipViaSpecified) 
                        {
                            cvalue = itemValue.ShipVia.ToString();
                            if (counter < maxItems && this.CustShipVia.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("ShipVia", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.CustShipVia.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.CustShipVia.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.CustShipVia, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.CustShipVia, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Shipping.ShipVia = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(ShippingTable.ShipVia, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    ShippingRecord[] rc = ShippingTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        ShippingRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.ShipViaSpecified)
                            cvalue = itemValue.ShipVia.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("ShipVia", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.CustShipVia, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // event handler for Button
        public virtual void Button3_Click(object sender, EventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../RepairOrders/Edit-RepairOrder-Customer.aspx?RepairOrders={RepairOrdersRecordControl:FV:RONo}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
        protected virtual void CustAdvertising_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[CustAdvertising.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[CustAdvertising.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.CustAdvertising.Items.Add(new ListItem(displayText, val));
	            this.CustAdvertising.SelectedIndex = this.CustAdvertising.Items.Count - 1;
	            this.Page.Session.Remove(CustAdvertising.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(CustAdvertising.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void CustProvince_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[CustProvince.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[CustProvince.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.CustProvince.Items.Add(new ListItem(displayText, val));
	            this.CustProvince.SelectedIndex = this.CustProvince.Items.Count - 1;
	            this.Page.Session.Remove(CustProvince.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(CustProvince.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void CustShipVia_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[CustShipVia.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[CustShipVia.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.CustShipVia.Items.Add(new ListItem(displayText, val));
	            this.CustShipVia.SelectedIndex = this.CustShipVia.Items.Count - 1;
	            this.Page.Session.Remove(CustShipVia.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(CustShipVia.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void CustAddress1_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void CustAddress2_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void CustCity_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void CustFax_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void CustName_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void CustNo_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void CustPhoneBusiness_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void CustPostalCode_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseCustomersRecordControl_Rec"];
            }
            set {
                this.ViewState["BaseCustomersRecordControl_Rec"] = value;
            }
        }
        
        public CustomersRecord DataSource {
            get {
                return (CustomersRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public OEMConversion.UI.IThemeButton Button3 {
            get {
                return (OEMConversion.UI.IThemeButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Button3");
            }
        }
        
        public System.Web.UI.WebControls.TextBox CustAddress1 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustAddress1");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustAddress1Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustAddress1Label");
            }
        }
        
        public System.Web.UI.WebControls.TextBox CustAddress2 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustAddress2");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustAddress2Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustAddress2Label");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList CustAdvertising {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustAdvertising");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustAdvertisingLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustAdvertisingLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox CustCity {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustCity");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustCityLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustCityLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox CustFax {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustFax");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustFaxLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustFaxLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox CustName {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustName");
            }
        }
            
        public System.Web.UI.WebControls.TextBox CustNo {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustNo");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustNoLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustNoLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox CustPhoneBusiness {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustPhoneBusiness");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustPhoneBusinessLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustPhoneBusinessLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox CustPostalCode {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustPostalCode");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustPostalCodeLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustPostalCodeLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList CustProvince {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustProvince");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustProvinceLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustProvinceLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList CustShipVia {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustShipVia");
            }
        }
            
        public System.Web.UI.WebControls.Literal CustShipViaLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustShipViaLabel");
            }
        }
        
        public System.Web.UI.WebControls.Image Image1 {
            get {
                return (System.Web.UI.WebControls.Image)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Image1");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title1");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        CustomersRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    CustomersRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual CustomersRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return CustomersTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            return null;
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the InvoiceDetails control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in InvoiceDetails.
public class BaseInvoiceDetails : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseInvoiceDetails()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in InvoiceDetails.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in InvoiceDetails.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
              this.PayTerms.SelectedIndexChanged += PayTerms_SelectedIndexChanged;
            
              this.ROPayMethod.SelectedIndexChanged += ROPayMethod_SelectedIndexChanged;
            
              this.roDiscountDollar.TextChanged += roDiscountDollar_TextChanged;
            
              this.RODiscountRate.TextChanged += RODiscountRate_TextChanged;
            
              this.ROPreapproved1.TextChanged += ROPreapproved1_TextChanged;
            
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "InvoiceDetailsPanel");
            if (Panel != null){
                Panel.Visible = true;
            }
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new RepairOrdersRecord();
            
                if (Panel != null){
                    Panel.Visible = false;
                }
              
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            RepairOrdersRecord[] recList = RepairOrdersTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                if (Panel != null){
                    Panel.Visible = false;
                }
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = RepairOrdersTable.GetRecord(recList[0].GetID().ToXmlString(), true);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                Setnew_discountamt();
                SetPayTerms();
                Setro_grandntotal_nodisc();
                Setro_grandtotal_nodiscLabel();
                Setro_labortotal_calc();
                Setro_partstotal_calc();
                Setro_subtotal();
                SetroDiscountDollar();
                SetroDiscountDollar1();
                SetroDiscountDollarLabel();
                SetRODiscountLabel();
                SetRODiscountLabel1();
                SetRODiscountLabel2();
                SetRODiscountRate();
                SetRODiscountRate1();
                SetROLaborLabel();
                SetROPartsLabel();
                SetROPayMethod();
                SetROPayMethodLabel();
                SetROPayTermsLabel();
                SetROPreapproved1();
                SetROPreapprovedLabel1();
                

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void Setnew_discountamt()
        {
            
                    
            // Set the new_discountamt Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.new_discountamt is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.new_discountamtSpecified) {
                								
                // If the new_discountamt is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.new_discountamt, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.new_discountamt.Text = formattedValue;
                   
            } 
            
            else {
            
                // new_discountamt is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.new_discountamt.Text = RepairOrdersTable.new_discountamt.Format(RepairOrdersTable.new_discountamt.DefaultValue, @"C");
            		
            }
                               
        }
                
        public virtual void SetPayTerms()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROPayTerms DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.PayTerms is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetPayTerms();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROPayTermsSpecified)
            {
                            
                // If the ROPayTerms is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.ROPayTerms.ToString();
                
            }
            else
            {
                
                // ROPayTerms is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROPayTerms.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulatePayTermsDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setro_grandntotal_nodisc()
        {
            
                    
            // Set the ro_grandntotal_nodisc Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ro_grandntotal_nodisc is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ro_grandntotal_nodiscSpecified) {
                								
                // If the ro_grandntotal_nodisc is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ro_grandntotal_nodisc, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ro_grandntotal_nodisc.Text = formattedValue;
                   
            } 
            
            else {
            
                // ro_grandntotal_nodisc is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ro_grandntotal_nodisc.Text = RepairOrdersTable.ro_grandntotal_nodisc.Format(RepairOrdersTable.ro_grandntotal_nodisc.DefaultValue, @"C");
            		
            }
                               
        }
                
        public virtual void Setro_labortotal_calc()
        {
            
                    
            // Set the ro_labortotal_calc Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ro_labortotal_calc is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ro_labortotal_calcSpecified) {
                								
                // If the ro_labortotal_calc is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ro_labortotal_calc, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ro_labortotal_calc.Text = formattedValue;
                   
            } 
            
            else {
            
                // ro_labortotal_calc is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ro_labortotal_calc.Text = RepairOrdersTable.ro_labortotal_calc.Format(RepairOrdersTable.ro_labortotal_calc.DefaultValue, @"C");
            		
            }
                               
        }
                
        public virtual void Setro_partstotal_calc()
        {
            
                    
            // Set the ro_partstotal_calc Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ro_partstotal_calc is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ro_partstotal_calcSpecified) {
                								
                // If the ro_partstotal_calc is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ro_partstotal_calc, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ro_partstotal_calc.Text = formattedValue;
                   
            } 
            
            else {
            
                // ro_partstotal_calc is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ro_partstotal_calc.Text = RepairOrdersTable.ro_partstotal_calc.Format(RepairOrdersTable.ro_partstotal_calc.DefaultValue, @"C");
            		
            }
                               
        }
                
        public virtual void Setro_subtotal()
        {
            
                    
            // Set the ro_subtotal Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ro_subtotal is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ro_subtotalSpecified) {
                								
                // If the ro_subtotal is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ro_subtotal, @"C");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.ro_subtotal.Text = formattedValue;
                   
            } 
            
            else {
            
                // ro_subtotal is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ro_subtotal.Text = RepairOrdersTable.ro_subtotal.Format(RepairOrdersTable.ro_subtotal.DefaultValue, @"C");
            		
            }
                               
        }
                
        public virtual void SetroDiscountDollar()
        {
            
                    
            // Set the roDiscountDollar TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.roDiscountDollar is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.roDiscountDollarSpecified) {
                								
                // If the roDiscountDollar is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.roDiscountDollar);
                                
                this.roDiscountDollar.Text = formattedValue;
                   
            } 
            
            else {
            
                // roDiscountDollar is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.roDiscountDollar.Text = RepairOrdersTable.roDiscountDollar.Format(RepairOrdersTable.roDiscountDollar.DefaultValue);
            		
            }
            
              this.roDiscountDollar.TextChanged += roDiscountDollar_TextChanged;
                               
        }
                
        public virtual void SetroDiscountDollar1()
        {
            
                    
            // Set the roDiscountDollar Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.roDiscountDollar1 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.roDiscountDollarSpecified) {
                								
                // If the roDiscountDollar is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.roDiscountDollar, @"#####");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.roDiscountDollar1.Text = formattedValue;
                   
            } 
            
            else {
            
                // roDiscountDollar is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.roDiscountDollar1.Text = RepairOrdersTable.roDiscountDollar.Format(RepairOrdersTable.roDiscountDollar.DefaultValue, @"#####");
            		
            }
                               
        }
                
        public virtual void SetRODiscountRate()
        {
            
                    
            // Set the RODiscountRate TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODiscountRate is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODiscountRateSpecified) {
                								
                // If the RODiscountRate is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODiscountRate);
                                
                this.RODiscountRate.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODiscountRate is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODiscountRate.Text = RepairOrdersTable.RODiscountRate.Format(RepairOrdersTable.RODiscountRate.DefaultValue);
            		
            }
            
              this.RODiscountRate.TextChanged += RODiscountRate_TextChanged;
                               
        }
                
        public virtual void SetRODiscountRate1()
        {
            
                    
            // Set the RODiscountRate Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODiscountRate1 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODiscountRateSpecified) {
                								
                // If the RODiscountRate is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODiscountRate);
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.RODiscountRate1.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODiscountRate is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODiscountRate1.Text = RepairOrdersTable.RODiscountRate.Format(RepairOrdersTable.RODiscountRate.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetROPayMethod()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROPayMethod DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROPayMethod is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROPayMethod();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROPayMethodSpecified)
            {
                            
                // If the ROPayMethod is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROPayMethod.ToString();
                
            }
            else
            {
                
                // ROPayMethod is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROPayMethod.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROPayMethodDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROPreapproved1()
        {
            
                    
            // Set the ROPreapproved TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROPreapproved1 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROPreapprovedSpecified) {
                								
                // If the ROPreapproved is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ROPreapproved, @"C");
                                
                this.ROPreapproved1.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROPreapproved is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROPreapproved1.Text = RepairOrdersTable.ROPreapproved.Format(RepairOrdersTable.ROPreapproved.DefaultValue, @"C");
            		
            }
            
              this.ROPreapproved1.TextChanged += ROPreapproved1_TextChanged;
                               
        }
                
        public virtual void Setro_grandtotal_nodiscLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ro_grandtotal_nodiscLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetroDiscountDollarLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.roDiscountDollarLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetRODiscountLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.RODiscountLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetRODiscountLabel1()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.RODiscountLabel1.Text = "Some value";
                    
                    
        }
                
        public virtual void SetRODiscountLabel2()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.RODiscountLabel2.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROLaborLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROLaborLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROPartsLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROPartsLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROPayMethodLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROPayMethodLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROPayTermsLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROPayTermsLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROPreapprovedLabel1()
                  {
                  
                        this.ROPreapprovedLabel1.Text = EvaluateFormula("\"Preapproved Amt.\"");
                      
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "InvoiceDetailsPanel");
            if ( (Panel != null && !Panel.Visible) || this.DataSource == null){
                return;
            }
          
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            Getnew_discountamt();
            GetPayTerms();
            Getro_grandntotal_nodisc();
            Getro_labortotal_calc();
            Getro_partstotal_calc();
            Getro_subtotal();
            GetroDiscountDollar();
            GetroDiscountDollar1();
            GetRODiscountRate();
            GetRODiscountRate1();
            GetROPayMethod();
            GetROPreapproved1();
        }
        
        
        public virtual void Getnew_discountamt()
        {
            
        }
                
        public virtual void GetPayTerms()
        {
         // Retrieve the value entered by the user on the ROPayTerms ASP:DropDownList, and
            // save it into the ROPayTerms field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.PayTerms), RepairOrdersTable.ROPayTerms);			
                			 
        }
                
        public virtual void Getro_grandntotal_nodisc()
        {
            
        }
                
        public virtual void Getro_labortotal_calc()
        {
            
        }
                
        public virtual void Getro_partstotal_calc()
        {
            
        }
                
        public virtual void Getro_subtotal()
        {
            
        }
                
        public virtual void GetroDiscountDollar()
        {
            
            // Retrieve the value entered by the user on the roDiscountDollar ASP:TextBox, and
            // save it into the roDiscountDollar field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the amount to ensure it is of the proper format
            // and valid.  The format is verified based on the current culture 
            // settings including the currency symbol and decimal separator
            // (no currency conversion is performed).
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.roDiscountDollar.Text, RepairOrdersTable.roDiscountDollar);							
                          
                      
        }
                
        public virtual void GetroDiscountDollar1()
        {
            
        }
                
        public virtual void GetRODiscountRate()
        {
            
            // Retrieve the value entered by the user on the RODiscountRate ASP:TextBox, and
            // save it into the RODiscountRate field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODiscountRate.Text, RepairOrdersTable.RODiscountRate);							
                          
                      
        }
                
        public virtual void GetRODiscountRate1()
        {
            
        }
                
        public virtual void GetROPayMethod()
        {
         // Retrieve the value entered by the user on the ROPayMethod ASP:DropDownList, and
            // save it into the ROPayMethod field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROPayMethod), RepairOrdersTable.ROPayMethod);			
                			 
        }
                
        public virtual void GetROPreapproved1()
        {
            
            // Retrieve the value entered by the user on the ROPreapproved ASP:TextBox, and
            // save it into the ROPreapproved field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the amount to ensure it is of the proper format
            // and valid.  The format is verified based on the current culture 
            // settings including the currency symbol and decimal separator
            // (no currency conversion is performed).
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROPreapproved1.Text, RepairOrdersTable.ROPreapproved);							
                          
                      
        }
                

      // To customize, override this method in InvoiceDetails.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            RepairOrdersTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

              
            // Retrieve the record id from the URL parameter.
              
            string recId = ((BaseApplicationPage)(this.Page)).Decrypt(this.Page.Request.QueryString["RepairOrders"]);
                
            if (recId == null || recId.Length == 0) {
                // Get the error message from the application resource file.
                throw new Exception(Page.GetResourceValue("Err:UrlParamMissing", "OEMConversion").Replace("{URL}", "RepairOrders"));
            }
            HttpContext.Current.Session["QueryString in Edit-RepairOrders"] = recId;
                  
            if (KeyValue.IsXmlKey(recId)) {
                // Keys are typically passed as XML structures to handle composite keys.
                // If XML, then add a Where clause based on the Primary Key in the XML.
                KeyValue pkValue = KeyValue.XmlToKey(recId);
            
          wc.iAND(RepairOrdersTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, pkValue.GetColumnValueString(RepairOrdersTable.RONo));
          
            }
            else {
                // The URL parameter contains the actual value, not an XML structure.
            
          wc.iAND(RepairOrdersTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, recId);
             
            }
              
            return wc;
          
        }
        
        
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            RepairOrdersTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          RepairOrdersTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                
            this.Page.Authorize((Control)PayTerms, "1;2;3");
					
            this.Page.Authorize((Control)roDiscountDollar1, "1;2");
					
            this.Page.Authorize((Control)RODiscountRate, "3");
					
            this.Page.Authorize((Control)RODiscountRate1, "1;2");
									
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        public virtual WhereClause CreateWhereClause_PayTermsDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_ROPayMethodDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.payment_method table.
            // Examples:
            // wc.iAND(Payment_methodTable.payment_method_id, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(Payment_methodTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        // Fill the PayTerms list.
        protected virtual void PopulatePayTermsDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.PayTerms.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("COD"), "0"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("5 Days"), "1"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("10 Days"), "2"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("15 Days"), "3"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("20 Days"), "4"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("25 Days"), "5"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("30 Days"), "6"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("35 Days"), "7"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("40 Days"), "8"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("45 Days"), "9"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("50 Days"), "10"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("55 Days"), "11"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("60 Days"), "12"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("65 Days"), "13"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("70 Days"), "14"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("75 Days"), "15"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("80 Days"), "16"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("85 Days"), "17"));
              
                this.PayTerms.Items.Add(new ListItem(this.Page.ExpandResourceValue("90 Days"), "18"));
              		  
            // Skip step 2 and 3 because no need to load data from database and insert data
            
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.PayTerms, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.PayTerms, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.PayTerms, RepairOrdersTable.ROPayTerms.Format(selectedValue)))
            {
                string fvalue = RepairOrdersTable.ROPayTerms.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.PayTerms, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the ROPayMethod list.
        protected virtual void PopulateROPayMethodDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROPayMethod.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROPayMethod.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROPayMethodDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROPayMethodDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(Payment_methodTable.payment_method_id, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROPayMethodDropDownList.
            Payment_methodRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = Payment_methodTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (Payment_methodRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.payment_method_idSpecified) 
                        {
                            cvalue = itemValue.payment_method_id.ToString().ToString();
                            if (counter < maxItems && this.ROPayMethod.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Payment_method.payment_method", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROPayMethod.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROPayMethod.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROPayMethod, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROPayMethod, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.payment_method.payment_method_id = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(Payment_methodTable.payment_method_id, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    Payment_methodRecord[] rc = Payment_methodTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        Payment_methodRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.payment_method_idSpecified)
                            cvalue = itemValue.payment_method_id.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Payment_method.payment_method", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROPayMethod, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        protected virtual void PayTerms_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[PayTerms.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[PayTerms.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.PayTerms.Items.Add(new ListItem(displayText, val));
	            this.PayTerms.SelectedIndex = this.PayTerms.Items.Count - 1;
	            this.Page.Session.Remove(PayTerms.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(PayTerms.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROPayMethod_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROPayMethod.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROPayMethod.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROPayMethod.Items.Add(new ListItem(displayText, val));
	            this.ROPayMethod.SelectedIndex = this.ROPayMethod.Items.Count - 1;
	            this.Page.Session.Remove(ROPayMethod.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROPayMethod.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void roDiscountDollar_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void RODiscountRate_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void ROPreapproved1_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseInvoiceDetails_Rec"];
            }
            set {
                this.ViewState["BaseInvoiceDetails_Rec"] = value;
            }
        }
        
        public RepairOrdersRecord DataSource {
            get {
                return (RepairOrdersRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.Literal new_discountamt {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "new_discountamt");
            }
        }
            
        public System.Web.UI.WebControls.DropDownList PayTerms {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "PayTerms");
            }
        }
            
        public System.Web.UI.WebControls.Literal ro_grandntotal_nodisc {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_grandntotal_nodisc");
            }
        }
            
        public System.Web.UI.WebControls.Literal ro_grandtotal_nodiscLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_grandtotal_nodiscLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal ro_labortotal_calc {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_labortotal_calc");
            }
        }
            
        public System.Web.UI.WebControls.Literal ro_partstotal_calc {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_partstotal_calc");
            }
        }
            
        public System.Web.UI.WebControls.Literal ro_subtotal {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ro_subtotal");
            }
        }
            
        public System.Web.UI.WebControls.TextBox roDiscountDollar {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "roDiscountDollar");
            }
        }
            
        public System.Web.UI.WebControls.Literal roDiscountDollar1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "roDiscountDollar1");
            }
        }
            
        public System.Web.UI.WebControls.Literal roDiscountDollarLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "roDiscountDollarLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal RODiscountLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODiscountLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal RODiscountLabel1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODiscountLabel1");
            }
        }
        
        public System.Web.UI.WebControls.Literal RODiscountLabel2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODiscountLabel2");
            }
        }
        
        public System.Web.UI.WebControls.TextBox RODiscountRate {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODiscountRate");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODiscountRate1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODiscountRate1");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROLaborLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROLaborLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROPartsLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPartsLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROPayMethod {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPayMethod");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROPayMethodLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPayMethodLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROPayTermsLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPayTermsLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox ROPreapproved1 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPreapproved1");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROPreapprovedLabel1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPreapprovedLabel1");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title8 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title8");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        RepairOrdersRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    RepairOrdersRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual RepairOrdersRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            throw new Exception(Page.GetResourceValue("Err:RetrieveRec", "OEMConversion"));
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the RepairOrdersRecordControl control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in RepairOrdersRecordControl.
public class BaseRepairOrdersRecordControl : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseRepairOrdersRecordControl()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in RepairOrdersRecordControl.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in RepairOrdersRecordControl.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
                    this.ImageButton.Click += ImageButton_Click;
                        
                    this.SignatureImage.Click += SignatureImage_Click;
                        
                    this.Button.Button.Click += Button_Click;
                        
                    this.Button1.Button.Click += Button1_Click;
                        
                    this.Button2.Button.Click += Button2_Click;
                        
              this.category_id.SelectedIndexChanged += category_id_SelectedIndexChanged;
            
              this.ROCondition.SelectedIndexChanged += ROCondition_SelectedIndexChanged;
            
              this.RODeptIDNew.SelectedIndexChanged += RODeptIDNew_SelectedIndexChanged;
            
              this.ROFaultCodes.SelectedIndexChanged += ROFaultCodes_SelectedIndexChanged;
            
              this.ROHowApproved.SelectedIndexChanged += ROHowApproved_SelectedIndexChanged;
            
              this.ROMake.SelectedIndexChanged += ROMake_SelectedIndexChanged;
            
              this.ROModel.SelectedIndexChanged += ROModel_SelectedIndexChanged;
            
              this.ROReference4.SelectedIndexChanged += ROReference4_SelectedIndexChanged;
            
              this.ROShipVia.SelectedIndexChanged += ROShipVia_SelectedIndexChanged;
            
              this.ROStatus.SelectedIndexChanged += ROStatus_SelectedIndexChanged;
            
              this.label_required.CheckedChanged += label_required_CheckedChanged;
            
              this.loaner_required.CheckedChanged += loaner_required_CheckedChanged;
            
              this.repair_replace.CheckedChanged += repair_replace_CheckedChanged;
            
              this.ROReEstimate.CheckedChanged += ROReEstimate_CheckedChanged;
            
              this.ROUnder_Contract.CheckedChanged += ROUnder_Contract_CheckedChanged;
            
              this.ROCustNo.TextChanged += ROCustNo_TextChanged;
            
              this.RODateEstimateApproved.TextChanged += RODateEstimateApproved_TextChanged;
            
              this.RODesc.TextChanged += RODesc_TextChanged;
            
              this.ROPreapproved.TextChanged += ROPreapproved_TextChanged;
            
              this.ROReference1.TextChanged += ROReference1_TextChanged;
            
              this.ROReference3.TextChanged += ROReference3_TextChanged;
            
              this.ROSerialNo.TextChanged += ROSerialNo_TextChanged;
            
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControlPanel");
            if (Panel != null){
                Panel.Visible = true;
            }
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new RepairOrdersRecord();
            
                if (Panel != null){
                    Panel.Visible = false;
                }
              
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            RepairOrdersRecord[] recList = RepairOrdersTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                if (Panel != null){
                    Panel.Visible = false;
                }
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = RepairOrdersTable.GetRecord(recList[0].GetID().ToXmlString(), true);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                
                
                
                
                
                Setcategory_id();
                
                
                
                
                
                
                
                SetLabel();
                Setlabel_required();
                Setlabel_requiredLabel();
                SetLabel1();
                SetLabel2();
                SetLabel3();
                Setloaner_required();
                Setloaner_requiredLabel();
                
                
                Setrepair_replace();
                Setrepair_replaceLabel();
                
                
                SetRepairOrdersRecordControlTabContainer();
                SetROCategoryLabel();
                SetROCondition();
                SetROConditionLabel();
                SetROCustNo();
                SetRODateEstimateApproved();
                SetRODateEstimateApprovedLabel();
                SetRODeptIDNew();
                SetRODeptIDNewLabel();
                SetRODesc();
                SetRODescLabel();
                SetROFaultCodes();
                SetROFaultCodesLabel();
                SetROHowApproved();
                SetROHowApprovedLabel();
                
                SetROMake();
                SetROMakeLabel();
                SetROModel();
                SetROModelLabel();
                SetRONo();
                SetRONo1();
                SetRONo3();
                SetRONo4();
                SetROPreapproved();
                SetROPreapprovedLabel();
                SetROReEstimate();
                SetROReEstimateLabel();
                SetROReference1();
                SetROReference1Label();
                SetROReference3();
                SetROReference3Label();
                SetROReference4();
                SetROReference4Label();
                SetROSerialNo();
                SetROSerialNoLabel();
                SetROShipVia();
                SetROShipViaLabel();
                SetROStatus();
                SetROStatusLabel();
                SetROUnder_Contract();
                SetROUnder_ContractLabel();
                Setsignature_datetime();
                SetSignatureImage();
                SetSignatureImageLabel();
                
                
                
                
                
                
                
                
                
                
                
                
                SetImageButton();
              
                SetButton();
              
                SetButton1();
              
                SetButton2();
              

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        SetAccessoriesRecordControl();


        
        SetCustomerContactsRecordControl();


                  
        SetCustomersRecordControl();

        
            if (shouldResetControl || this.Page.IsPageRefresh)
              DetailsParts.ResetControl();
                    
        SetDetailsParts();

        
            if (shouldResetControl || this.Page.IsPageRefresh)
              DetailsSC2.ResetControl();
                    
        SetDetailsSC2();

        
            if (shouldResetControl || this.Page.IsPageRefresh)
              DetailsServiceCodes.ResetControl();
                    
        SetDetailsServiceCodes();

        
        SetInvoiceDetails();


        
            if (shouldResetControl || this.Page.IsPageRefresh)
              Notification_logTableControl.ResetControl();
                    
        SetNotification_logTableControl();

        
            if (shouldResetControl || this.Page.IsPageRefresh)
              Repair_order_notesTableControl.ResetControl();
                    
        SetRepair_order_notesTableControl();

        
        SetRepairOrdersRecordControl1();


        
        SetRepairOrdersRecordControl2();


                  
        SetROIncomingRecordControl1();

        
        SetVendorsRecordControl();


        
        }
        
        
        public virtual void Setcategory_id()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the category_id DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.category_id is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcategory_id();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.category_idSpecified)
            {
                            
                // If the category_id is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.category_id.ToString();
                
            }
            else
            {
                
                // category_id is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.category_id.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecategory_idDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setlabel_required()
        {
            
                    
            // Set the label_required CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.label_required is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.label_requiredSpecified) {
                							
                // If the label_required is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.label_required.Checked = this.DataSource.label_required;
                    				
            } else {
            
                // label_required is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.label_required.Checked = RepairOrdersTable.label_required.ParseValue(RepairOrdersTable.label_required.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void Setloaner_required()
        {
            
                    
            // Set the loaner_required CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.loaner_required is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.loaner_requiredSpecified) {
                							
                // If the loaner_required is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.loaner_required.Checked = this.DataSource.loaner_required;
                    				
            } else {
            
                // loaner_required is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.loaner_required.Checked = RepairOrdersTable.loaner_required.ParseValue(RepairOrdersTable.loaner_required.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void Setrepair_replace()
        {
            
                    
            // Set the repair_replace CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.repair_replace is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.repair_replaceSpecified) {
                							
                // If the repair_replace is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.repair_replace.Checked = this.DataSource.repair_replace;
                    				
            } else {
            
                // repair_replace is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.repair_replace.Checked = RepairOrdersTable.repair_replace.ParseValue(RepairOrdersTable.repair_replace.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROCondition()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROCondition DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROCondition is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROCondition();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROConditionSpecified)
            {
                            
                // If the ROCondition is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROCondition;
                
            }
            else
            {
                
                // ROCondition is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROCondition.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROConditionDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROCustNo()
        {
            
            // Set AutoPostBack to true so that when the control value is changed, to refresh RODeptIDNew,ROSerialNo controls
            this.ROCustNo.AutoPostBack = true;
            
                    
            // Set the ROCustNo TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROCustNo is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROCustNoSpecified) {
                								
                // If the ROCustNo is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
               string formattedValue = this.DataSource.ROCustNo.ToString();
                            
                this.ROCustNo.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROCustNo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROCustNo.Text = RepairOrdersTable.ROCustNo.DefaultValue;
            		
            }
            
              this.ROCustNo.TextChanged += ROCustNo_TextChanged;
                               
        }
                
        public virtual void SetRODateEstimateApproved()
        {
            
                    
            // Set the RODateEstimateApproved TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODateEstimateApproved is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODateEstimateApprovedSpecified) {
                								
                // If the RODateEstimateApproved is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODateEstimateApproved, @"d");
                                
                this.RODateEstimateApproved.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODateEstimateApproved is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODateEstimateApproved.Text = RepairOrdersTable.RODateEstimateApproved.Format(RepairOrdersTable.RODateEstimateApproved.DefaultValue, @"d");
            		
            }
            
              this.RODateEstimateApproved.TextChanged += RODateEstimateApproved_TextChanged;
                               
        }
                
        public virtual void SetRODeptIDNew()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the RODeptIDNew DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODeptIDNew is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetRODeptIDNew();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.RODeptIDNewSpecified)
            {
                            
                // If the RODeptIDNew is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.RODeptIDNew.ToString();
                
            }
            else
            {
                
                // RODeptIDNew is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.RODeptIDNew.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateRODeptIDNewDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetRODesc()
        {
            
                    
            // Set the RODesc TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODesc is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODescSpecified) {
                								
                // If the RODesc is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODesc);
                                
                this.RODesc.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODesc is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODesc.Text = RepairOrdersTable.RODesc.Format(RepairOrdersTable.RODesc.DefaultValue);
            		
            }
            
              this.RODesc.TextChanged += RODesc_TextChanged;
                               
        }
                
        public virtual void SetROFaultCodes()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROFaultCodes DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROFaultCodes is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROFaultCodes();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROFaultCodesSpecified)
            {
                            
                // If the ROFaultCodes is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROFaultCodes;
                
            }
            else
            {
                
                // ROFaultCodes is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROFaultCodes.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROFaultCodesDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROHowApproved()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROHowApproved DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROHowApproved is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROHowApproved();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROHowApprovedSpecified)
            {
                            
                // If the ROHowApproved is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROHowApproved;
                
            }
            else
            {
                
                // ROHowApproved is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROHowApproved.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROHowApprovedDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROMake()
        {
            
            // Set AutoPostBack to true so that when the control value is changed, to refresh ROModel controls
            this.ROMake.AutoPostBack = true;
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROMake DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROMake is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROMake();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROMakeSpecified)
            {
                            
                // If the ROMake is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROMake;
                
            }
            else
            {
                
                // ROMake is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROMake.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROMakeDropDownList(selectedValue, 500);              
                
                  
        }
                
        public virtual void SetROModel()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROModel DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROModel is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROModel();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROModelSpecified)
            {
                            
                // If the ROModel is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROModel;
                
            }
            else
            {
                
                // ROModel is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROModel.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROModelDropDownList(selectedValue, 500);              
                
                  
        }
                
        public virtual void SetRONo()
        {
            
                    
            // Set the RONo Label on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RONo is the ASP:Label on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the RONo is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                string formattedValue = EvaluateFormula("\"<a href= 'http://166.62.86.196/ReportServer/Pages/ReportViewer.aspx?%2fOEM%2fRepairOrderSummary&rono=\" + RONo  + \"&rs:Command=Render&rs:Format=PDF' target='_blank'><img src=../images/pdf-icon.png align=absmiddle border=0></a>\"", this.DataSource);
                    
                this.RONo.Text = formattedValue;
                   
            } 
            
            else {
            
                // RONo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RONo.Text = RepairOrdersTable.RONo.Format(RepairOrdersTable.RONo.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetRONo1()
        {
            
                    
            // Set the RONo Label on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RONo1 is the ASP:Label on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the RONo is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                string formattedValue = EvaluateFormula("\"<a href= 'http://166.62.86.196/ReportServer/Pages/ReportViewer.aspx?%2fOEM%2fRepairOrderEstimate&rono=\" + RONo  + \"&rs:Command=Render&rs:Format=PDF' target='_blank'><img src=../images/pdf-icon.png align=absmiddle border=0></a>\"", this.DataSource);
                    
                this.RONo1.Text = formattedValue;
                   
            } 
            
            else {
            
                // RONo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RONo1.Text = RepairOrdersTable.RONo.Format(RepairOrdersTable.RONo.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetRONo3()
        {
            
                    
            // Set the RONo Label on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RONo3 is the ASP:Label on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the RONo is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                string formattedValue = EvaluateFormula("\"<a href= 'http://166.62.86.196/ReportServer/Pages/ReportViewer.aspx?%2fOEM%2fRepair+Order&rono=\" + RONo  + \"&rs:Command=Render&rs:Format=PDF' target='_blank'><img src=../images/pdf-icon.png align=absmiddle border=0></a>\"", this.DataSource);
                    
                this.RONo3.Text = formattedValue;
                   
            } 
            
            else {
            
                // RONo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RONo3.Text = RepairOrdersTable.RONo.Format(RepairOrdersTable.RONo.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetRONo4()
        {
            
                    
            // Set the RONo Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RONo4 is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the RONo is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                string formattedValue = EvaluateFormula("URL(\"repairorders\")", this.DataSource);
                    
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.RONo4.Text = formattedValue;
                   
            } 
            
            else {
            
                // RONo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RONo4.Text = RepairOrdersTable.RONo.Format(RepairOrdersTable.RONo.DefaultValue);
            		
            }
                               
        }
                
        public virtual void SetROPreapproved()
        {
            
                    
            // Set the ROPreapproved TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROPreapproved is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROPreapprovedSpecified) {
                								
                // If the ROPreapproved is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ROPreapproved, @"C");
                                
                this.ROPreapproved.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROPreapproved is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROPreapproved.Text = RepairOrdersTable.ROPreapproved.Format(RepairOrdersTable.ROPreapproved.DefaultValue, @"C");
            		
            }
            
              this.ROPreapproved.TextChanged += ROPreapproved_TextChanged;
                               
        }
                
        public virtual void SetROReEstimate()
        {
            
                    
            // Set the ROReEstimate CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROReEstimate is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROReEstimateSpecified) {
                							
                // If the ROReEstimate is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROReEstimate.Checked = this.DataSource.ROReEstimate;
                    				
            } else {
            
                // ROReEstimate is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROReEstimate.Checked = RepairOrdersTable.ROReEstimate.ParseValue(RepairOrdersTable.ROReEstimate.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROReference1()
        {
            
                    
            // Set the ROReference1 TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROReference1 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROReference1Specified) {
                								
                // If the ROReference1 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ROReference1);
                                
                this.ROReference1.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROReference1 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROReference1.Text = RepairOrdersTable.ROReference1.Format(RepairOrdersTable.ROReference1.DefaultValue);
            		
            }
            
              this.ROReference1.TextChanged += ROReference1_TextChanged;
                               
        }
                
        public virtual void SetROReference3()
        {
            
                    
            // Set the ROReference3 TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROReference3 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROReference3Specified) {
                								
                // If the ROReference3 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ROReference3);
                                
                this.ROReference3.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROReference3 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROReference3.Text = RepairOrdersTable.ROReference3.Format(RepairOrdersTable.ROReference3.DefaultValue);
            		
            }
            
              this.ROReference3.TextChanged += ROReference3_TextChanged;
                               
        }
                
        public virtual void SetROReference4()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROReference4 DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROReference4 is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROReference4();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROReference4Specified)
            {
                            
                // If the ROReference4 is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROReference4;
                
            }
            else
            {
                
                // ROReference4 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROReference4.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROReference4DropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROSerialNo()
        {
            
                    
            // Set the ROSerialNo TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROSerialNo is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROSerialNoSpecified) {
                								
                // If the ROSerialNo is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ROSerialNo);
                                
                this.ROSerialNo.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROSerialNo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROSerialNo.Text = RepairOrdersTable.ROSerialNo.Format(RepairOrdersTable.ROSerialNo.DefaultValue);
            		
            }
            
              this.ROSerialNo.TextChanged += ROSerialNo_TextChanged;
                               
        }
                
        public virtual void SetROShipVia()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROShipVia DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROShipVia is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROShipVia();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROShipViaSpecified)
            {
                            
                // If the ROShipVia is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROShipVia;
                
            }
            else
            {
                
                // ROShipVia is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROShipVia.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROShipViaDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROStatus()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROStatus DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROStatus is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROStatus();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROStatusSpecified)
            {
                            
                // If the ROStatus is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROStatus.ToString();
                
            }
            else
            {
                
                // ROStatus is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROStatus.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROStatusDropDownList(selectedValue, 500);              
                
                  
        }
                
        public virtual void SetROUnder_Contract()
        {
            
                    
            // Set the ROUnder_Contract CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROUnder_Contract is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROUnder_ContractSpecified) {
                							
                // If the ROUnder_Contract is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROUnder_Contract.Checked = this.DataSource.ROUnder_Contract;
                    				
            } else {
            
                // ROUnder_Contract is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROUnder_Contract.Checked = RepairOrdersTable.ROUnder_Contract.ParseValue(RepairOrdersTable.ROUnder_Contract.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void Setsignature_datetime()
        {
            
                    
            // Set the signature_datetime Literal on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.signature_datetime is the ASP:Literal on the webpage.
                  
            if (this.DataSource != null && this.DataSource.signature_datetimeSpecified) {
                								
                // If the signature_datetime is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.signature_datetime, @"g");
                                
                formattedValue = HttpUtility.HtmlEncode(formattedValue);
                this.signature_datetime.Text = formattedValue;
                   
            } 
            
            else {
            
                // signature_datetime is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.signature_datetime.Text = RepairOrdersTable.signature_datetime.Format(RepairOrdersTable.signature_datetime.DefaultValue, @"g");
            		
            }
                               
        }
                
        public virtual void SetSignatureImage()
        {
            // Set the SignatureImage ImageButton on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.SignatureImage is the ASP:ImageButton on the webpage.

            if (this.DataSource != null && this.DataSource.SignatureImageSpecified) {
                // If the SignatureImage is non-NULL, then format the value.
                // The Format method will use the Display Format
                // Shrunk image size specified by ImagePercentSize on Properties.
                this.SignatureImage.ImageUrl = this.DataSource.FormatImageUrl(RepairOrdersTable.SignatureImage, this.Page.Encrypt("RepairOrders"), this.Page.Encrypt("SignatureImage"), this.Page.Encrypt(this.DataSource.GetID().ToXmlString()));
                            
                this.SignatureImage.Visible = true;
                                    
            } 
            else {
                // SignatureImage is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                this.SignatureImage.Visible = false;
            }
                     
        }
                
        public virtual void SetLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.Label.Text = "Some value";
                    
                    
        }
                
        public virtual void Setlabel_requiredLabel()
                  {
                  
                    
        }
                
        public virtual void SetLabel1()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.Label1.Text = "Some value";
                    
                    
        }
                
        public virtual void SetLabel2()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.Label2.Text = "Some value";
                    
                    
        }
                
        public virtual void SetLabel3()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.Label3.Text = "Some value";
                    
                    
        }
                
        public virtual void Setloaner_requiredLabel()
                  {
                  
                    
        }
                
        public virtual void Setrepair_replaceLabel()
                  {
                  
                        this.repair_replaceLabel.Text = EvaluateFormula("\"Repair-Replace\"");
                      
                    
        }
                
        public virtual void SetROCategoryLabel()
                  {
                  
                        this.ROCategoryLabel.Text = EvaluateFormula("\"Category\"");
                      
                    
        }
                
        public virtual void SetROConditionLabel()
                  {
                  
                        this.ROConditionLabel.Text = EvaluateFormula("\"Condition\"");
                      
                    
        }
                
        public virtual void SetRODateEstimateApprovedLabel()
                  {
                  
                        this.RODateEstimateApprovedLabel.Text = EvaluateFormula("\"Date Est. Approved\"");
                      
                    
        }
                
        public virtual void SetRODeptIDNewLabel()
                  {
                  
                        this.RODeptIDNewLabel.Text = EvaluateFormula("\"Dept.\"");
                      
                    
        }
                
        public virtual void SetRODescLabel()
                  {
                  
                        this.RODescLabel.Text = EvaluateFormula("\"Description\"");
                      
                    
        }
                
        public virtual void SetROFaultCodesLabel()
                  {
                  
                        this.ROFaultCodesLabel.Text = EvaluateFormula("\"Fault Code\"");
                      
                    
        }
                
        public virtual void SetROHowApprovedLabel()
                  {
                  
                        this.ROHowApprovedLabel.Text = EvaluateFormula("\"How Approved\"");
                      
                    
        }
                
        public virtual void SetROMakeLabel()
                  {
                  
                        this.ROMakeLabel.Text = EvaluateFormula("\"Make\"");
                      
                    
        }
                
        public virtual void SetROModelLabel()
                  {
                  
                        this.ROModelLabel.Text = EvaluateFormula("\"Model\"");
                      
                    
        }
                
        public virtual void SetROPreapprovedLabel()
                  {
                  
                        this.ROPreapprovedLabel.Text = EvaluateFormula("\"Preapproved Amt.\"");
                      
                    
        }
                
        public virtual void SetROReEstimateLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROReEstimateLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROReference1Label()
                  {
                  
                        this.ROReference1Label.Text = EvaluateFormula("\"PO#\"");
                      
                    
        }
                
        public virtual void SetROReference3Label()
                  {
                  
                        this.ROReference3Label.Text = EvaluateFormula("\"Case/Box\"");
                      
                    
        }
                
        public virtual void SetROReference4Label()
                  {
                  
                        this.ROReference4Label.Text = EvaluateFormula("\"Approved By\"");
                      
                    
        }
                
        public virtual void SetROSerialNoLabel()
                  {
                  
                        this.ROSerialNoLabel.Text = EvaluateFormula("\"Serial Number\"");
                      
                    
        }
                
        public virtual void SetROShipViaLabel()
                  {
                  
                        this.ROShipViaLabel.Text = EvaluateFormula("\"Shipping\"");
                      
                    
        }
                
        public virtual void SetROStatusLabel()
                  {
                  
                        this.ROStatusLabel.Text = EvaluateFormula("\"Status\"");
                      
                    
        }
                
        public virtual void SetROUnder_ContractLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROUnder_ContractLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetSignatureImageLabel()
                  {
                  
                    
        }
                
        public virtual void SetRepairOrdersRecordControlTabContainer()    
        
        {
                            
                   
            if (EvaluateFormula("URL(\"TabVisible\")").ToLower() == "true") 
                MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControlTabContainer").Visible = true;
            else if (EvaluateFormula("URL(\"TabVisible\")").ToLower() == "false") 
                MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControlTabContainer").Visible = false;
         
  
        }      
      
        public virtual void SetAccessoriesRecordControl()           
        
        {        
            if (AccessoriesRecordControl.Visible)
            {
                AccessoriesRecordControl.LoadData();
                AccessoriesRecordControl.DataBind();
            }
        }
      
        public virtual void SetCustomerContactsRecordControl()           
        
        {        
            if (CustomerContactsRecordControl.Visible)
            {
                CustomerContactsRecordControl.LoadData();
                CustomerContactsRecordControl.DataBind();
            }
        }
      
        public virtual void SetCustomersRecordControl()           
        
        {        
            if (CustomersRecordControl.Visible)
            {
                CustomersRecordControl.LoadData();
                CustomersRecordControl.DataBind();
            }
        }
      
        public virtual void SetDetailsParts()           
        
        {        
            if (DetailsParts.Visible)
            {
                DetailsParts.LoadData();
                DetailsParts.DataBind();
            }
        }
      
        public virtual void SetDetailsSC2()           
        
        {        
            if (DetailsSC2.Visible)
            {
                DetailsSC2.LoadData();
                DetailsSC2.DataBind();
            }
        }
      
        public virtual void SetDetailsServiceCodes()           
        
        {        
            if (DetailsServiceCodes.Visible)
            {
                DetailsServiceCodes.LoadData();
                DetailsServiceCodes.DataBind();
            }
        }
      
        public virtual void SetInvoiceDetails()           
        
        {        
            if (InvoiceDetails.Visible)
            {
                InvoiceDetails.LoadData();
                InvoiceDetails.DataBind();
            }
        }
      
        public virtual void SetNotification_logTableControl()           
        
        {        
            if (Notification_logTableControl.Visible)
            {
                Notification_logTableControl.LoadData();
                Notification_logTableControl.DataBind();
            }
        }
      
        public virtual void SetRepair_order_notesTableControl()           
        
        {        
            if (Repair_order_notesTableControl.Visible)
            {
                Repair_order_notesTableControl.LoadData();
                Repair_order_notesTableControl.DataBind();
            }
        }
      
        public virtual void SetRepairOrdersRecordControl1()           
        
        {        
            if (RepairOrdersRecordControl1.Visible)
            {
                RepairOrdersRecordControl1.LoadData();
                RepairOrdersRecordControl1.DataBind();
            }
        }
      
        public virtual void SetRepairOrdersRecordControl2()           
        
        {        
            if (RepairOrdersRecordControl2.Visible)
            {
                RepairOrdersRecordControl2.LoadData();
                RepairOrdersRecordControl2.DataBind();
            }
        }
      
        public virtual void SetROIncomingRecordControl1()           
        
        {        
            if (ROIncomingRecordControl1.Visible)
            {
                ROIncomingRecordControl1.LoadData();
                ROIncomingRecordControl1.DataBind();
            }
        }
      
        public virtual void SetVendorsRecordControl()           
        
        {        
            if (VendorsRecordControl.Visible)
            {
                VendorsRecordControl.LoadData();
                VendorsRecordControl.DataBind();
            }
        }
      
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControlPanel");
            if ( (Panel != null && !Panel.Visible) || this.DataSource == null){
                return;
            }
          
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          AccessoriesRecordControl recAccessoriesRecordControl = (AccessoriesRecordControl)(MiscUtils.FindControlRecursively(this, "AccessoriesRecordControl"));
        recAccessoriesRecordControl.SaveData();
        CustomerContactsRecordControl recCustomerContactsRecordControl = (CustomerContactsRecordControl)(MiscUtils.FindControlRecursively(this, "CustomerContactsRecordControl"));
        recCustomerContactsRecordControl.SaveData();
        CustomersRecordControl recCustomersRecordControl = (CustomersRecordControl)(MiscUtils.FindControlRecursively(this, "CustomersRecordControl"));
        recCustomersRecordControl.SaveData();
        DetailsParts recDetailsParts = (DetailsParts)(MiscUtils.FindControlRecursively(this, "DetailsParts"));
        recDetailsParts.SaveData();
        DetailsSC2 recDetailsSC2 = (DetailsSC2)(MiscUtils.FindControlRecursively(this, "DetailsSC2"));
        recDetailsSC2.SaveData();
        DetailsServiceCodes recDetailsServiceCodes = (DetailsServiceCodes)(MiscUtils.FindControlRecursively(this, "DetailsServiceCodes"));
        recDetailsServiceCodes.SaveData();
        InvoiceDetails recInvoiceDetails = (InvoiceDetails)(MiscUtils.FindControlRecursively(this, "InvoiceDetails"));
        recInvoiceDetails.SaveData();
        Notification_logTableControl recNotification_logTableControl = (Notification_logTableControl)(MiscUtils.FindControlRecursively(this, "Notification_logTableControl"));
        recNotification_logTableControl.SaveData();
        Repair_order_notesTableControl recRepair_order_notesTableControl = (Repair_order_notesTableControl)(MiscUtils.FindControlRecursively(this, "Repair_order_notesTableControl"));
        recRepair_order_notesTableControl.SaveData();
        RepairOrdersRecordControl1 recRepairOrdersRecordControl1 = (RepairOrdersRecordControl1)(MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControl1"));
        recRepairOrdersRecordControl1.SaveData();
        RepairOrdersRecordControl2 recRepairOrdersRecordControl2 = (RepairOrdersRecordControl2)(MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControl2"));
        recRepairOrdersRecordControl2.SaveData();
        ROIncomingRecordControl1 recROIncomingRecordControl1 = (ROIncomingRecordControl1)(MiscUtils.FindControlRecursively(this, "ROIncomingRecordControl1"));
        recROIncomingRecordControl1.SaveData();
        VendorsRecordControl recVendorsRecordControl = (VendorsRecordControl)(MiscUtils.FindControlRecursively(this, "VendorsRecordControl"));
        recVendorsRecordControl.SaveData();
        
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            Getcategory_id();
            Getlabel_required();
            Getloaner_required();
            Getrepair_replace();
            GetROCondition();
            GetROCustNo();
            GetRODateEstimateApproved();
            GetRODeptIDNew();
            GetRODesc();
            GetROFaultCodes();
            GetROHowApproved();
            GetROMake();
            GetROModel();
            GetRONo();
            GetRONo1();
            GetRONo3();
            GetRONo4();
            GetROPreapproved();
            GetROReEstimate();
            GetROReference1();
            GetROReference3();
            GetROReference4();
            GetROSerialNo();
            GetROShipVia();
            GetROStatus();
            GetROUnder_Contract();
            Getsignature_datetime();
        }
        
        
        public virtual void Getcategory_id()
        {
         // Retrieve the value entered by the user on the category_id ASP:DropDownList, and
            // save it into the category_id field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.category_id), RepairOrdersTable.category_id);			
                			 
        }
                
        public virtual void Getlabel_required()
        {	
        		
            // Retrieve the value entered by the user on the label_required ASP:CheckBox, and
            // save it into the label_required field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.label_required = this.label_required.Checked;						
                    
        }
                
        public virtual void Getloaner_required()
        {	
        		
            // Retrieve the value entered by the user on the loaner_required ASP:CheckBox, and
            // save it into the loaner_required field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.loaner_required = this.loaner_required.Checked;						
                    
        }
                
        public virtual void Getrepair_replace()
        {	
        		
            // Retrieve the value entered by the user on the repair_replace ASP:CheckBox, and
            // save it into the repair_replace field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.repair_replace = this.repair_replace.Checked;						
                    
        }
                
        public virtual void GetROCondition()
        {
         // Retrieve the value entered by the user on the ROCondition ASP:DropDownList, and
            // save it into the ROCondition field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROCondition), RepairOrdersTable.ROCondition);			
                			 
        }
                
        public virtual void GetROCustNo()
        {
            
            // Retrieve the value entered by the user on the ROCustNo ASP:TextBox, and
            // save it into the ROCustNo field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROCustNo.Text, RepairOrdersTable.ROCustNo);							
                          
                      
        }
                
        public virtual void GetRODateEstimateApproved()
        {
            
            // Retrieve the value entered by the user on the RODateEstimateApproved ASP:TextBox, and
            // save it into the RODateEstimateApproved field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the date to ensure it is of the proper format
            // and a valid date.  The format is verified based on the current culture 
            // settings including the order of month, day and year and the separator character.
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODateEstimateApproved.Text, RepairOrdersTable.RODateEstimateApproved);							
                          
                      
        }
                
        public virtual void GetRODeptIDNew()
        {
         // Retrieve the value entered by the user on the RODeptIDNew ASP:DropDownList, and
            // save it into the RODeptIDNew field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.RODeptIDNew), RepairOrdersTable.RODeptIDNew);			
                			 
        }
                
        public virtual void GetRODesc()
        {
            
            // Retrieve the value entered by the user on the RODesc ASP:TextBox, and
            // save it into the RODesc field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODesc.Text, RepairOrdersTable.RODesc);							
                          
                      
        }
                
        public virtual void GetROFaultCodes()
        {
         // Retrieve the value entered by the user on the ROFaultCodes ASP:DropDownList, and
            // save it into the ROFaultCodes field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROFaultCodes), RepairOrdersTable.ROFaultCodes);			
                			 
        }
                
        public virtual void GetROHowApproved()
        {
         // Retrieve the value entered by the user on the ROHowApproved ASP:DropDownList, and
            // save it into the ROHowApproved field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROHowApproved), RepairOrdersTable.ROHowApproved);			
                			 
        }
                
        public virtual void GetROMake()
        {
         // Retrieve the value entered by the user on the ROMake ASP:DropDownList, and
            // save it into the ROMake field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROMake), RepairOrdersTable.ROMake);			
                			 
        }
                
        public virtual void GetROModel()
        {
         // Retrieve the value entered by the user on the ROModel ASP:DropDownList, and
            // save it into the ROModel field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROModel), RepairOrdersTable.ROModel);			
                			 
        }
                
        public virtual void GetRONo()
        {
            
        }
                
        public virtual void GetRONo1()
        {
            
        }
                
        public virtual void GetRONo3()
        {
            
        }
                
        public virtual void GetRONo4()
        {
            
        }
                
        public virtual void GetROPreapproved()
        {
            
            // Retrieve the value entered by the user on the ROPreapproved ASP:TextBox, and
            // save it into the ROPreapproved field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the amount to ensure it is of the proper format
            // and valid.  The format is verified based on the current culture 
            // settings including the currency symbol and decimal separator
            // (no currency conversion is performed).
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROPreapproved.Text, RepairOrdersTable.ROPreapproved);							
                          
                      
        }
                
        public virtual void GetROReEstimate()
        {	
        		
            // Retrieve the value entered by the user on the ROReEstimate ASP:CheckBox, and
            // save it into the ROReEstimate field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROReEstimate = this.ROReEstimate.Checked;						
                    
        }
                
        public virtual void GetROReference1()
        {
            
            // Retrieve the value entered by the user on the ROReference1 ASP:TextBox, and
            // save it into the ROReference1 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROReference1.Text, RepairOrdersTable.ROReference1);							
                          
                      
        }
                
        public virtual void GetROReference3()
        {
            
            // Retrieve the value entered by the user on the ROReference3 ASP:TextBox, and
            // save it into the ROReference3 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROReference3.Text, RepairOrdersTable.ROReference3);							
                          
                      
        }
                
        public virtual void GetROReference4()
        {
         // Retrieve the value entered by the user on the ROReference4 ASP:DropDownList, and
            // save it into the ROReference4 field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROReference4), RepairOrdersTable.ROReference4);			
                			 
        }
                
        public virtual void GetROSerialNo()
        {
            
            // Retrieve the value entered by the user on the ROSerialNo ASP:TextBox, and
            // save it into the ROSerialNo field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROSerialNo.Text, RepairOrdersTable.ROSerialNo);							
                          
                      
        }
                
        public virtual void GetROShipVia()
        {
         // Retrieve the value entered by the user on the ROShipVia ASP:DropDownList, and
            // save it into the ROShipVia field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROShipVia), RepairOrdersTable.ROShipVia);			
                			 
        }
                
        public virtual void GetROStatus()
        {
         // Retrieve the value entered by the user on the ROStatus ASP:DropDownList, and
            // save it into the ROStatus field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROStatus), RepairOrdersTable.ROStatus);			
                			 
        }
                
        public virtual void GetROUnder_Contract()
        {	
        		
            // Retrieve the value entered by the user on the ROUnder_Contract ASP:CheckBox, and
            // save it into the ROUnder_Contract field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROUnder_Contract = this.ROUnder_Contract.Checked;						
                    
        }
                
        public virtual void Getsignature_datetime()
        {
            
        }
                

      // To customize, override this method in RepairOrdersRecordControl.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            RepairOrdersTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

              
            // Retrieve the record id from the URL parameter.
              
            string recId = ((BaseApplicationPage)(this.Page)).Decrypt(this.Page.Request.QueryString["RepairOrders"]);
                
            if (recId == null || recId.Length == 0) {
                // Get the error message from the application resource file.
                throw new Exception(Page.GetResourceValue("Err:UrlParamMissing", "OEMConversion").Replace("{URL}", "RepairOrders"));
            }
            HttpContext.Current.Session["QueryString in Edit-RepairOrders"] = recId;
                  
            if (KeyValue.IsXmlKey(recId)) {
                // Keys are typically passed as XML structures to handle composite keys.
                // If XML, then add a Where clause based on the Primary Key in the XML.
                KeyValue pkValue = KeyValue.XmlToKey(recId);
            
          wc.iAND(RepairOrdersTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, pkValue.GetColumnValueString(RepairOrdersTable.RONo));
          
            }
            else {
                // The URL parameter contains the actual value, not an XML structure.
            
          wc.iAND(RepairOrdersTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, recId);
             
            }
              
            return wc;
          
        }
        
        
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            RepairOrdersTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          RepairOrdersTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                
            this.Page.Authorize((Control)Button1, "3");
					
			if (!(((Control)(this.FindControl("RepairOrdersRecordControlTabContainer"))) == null)) {
				Control parentTC = ((Control)(this.FindControl("RepairOrdersRecordControlTabContainer")));
				this.Page.Authorize(((Control)(parentTC.FindControl("TabPanel9"))), "2;3");
			}
					
			if (!(((Control)(this.FindControl("RepairOrdersRecordControlTabContainer"))) == null)) {
				Control parentTC = ((Control)(this.FindControl("RepairOrdersRecordControlTabContainer")));
				parentTC.Visible = MiscUtils.IsTabContainerVisible(parentTC);
			}
			  				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        public virtual void SetImageButton()                
              
        {
        
   
        }
            
        public virtual void SetButton()                
              
        {
        
   
        }
            
        public virtual void SetButton1()                
              
        {
        
   
        }
            
        public virtual void SetButton2()                
              
        {
        
              try
              {
                    string url = "../department/Add-Department.aspx?TabVisible=False&SaveAndNewVisible=False&custno={RepairOrdersRecordControl:FV:ROCustNo}";
              
                      
                    url = this.ModifyRedirectUrl(url, "", true);
                    
                    url = this.Page.ModifyRedirectUrl(url, "", true);                                  
                    
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(this.RODeptIDNew.ClientID) + "&Formula=" + (this.Page as BaseApplicationPage).Encrypt("= Department.department_name")+ "&IndexField=" + (this.Page as BaseApplicationPage).Encrypt("department_id");                      
                              
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(this, '" + url + "', false, event);";                                      
                       
                    this.Button2.Button.Attributes["onClick"] = javascriptCall + "return false;";            
                }
                catch
                {
                    // do nothing.  If the code above fails, server side click event, Button2_ClickButton2_Click will be trigger when user click the button.
                }
                  
   
        }
            
        public virtual WhereClause CreateWhereClause_category_idDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.categories table.
            // Examples:
            // wc.iAND(CategoriesTable.category_name, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(CategoriesTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.CategoriesTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"categories_.category_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROConditionDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Conditions table.
            // Examples:
            // wc.iAND(ConditionsTable.Condition, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(ConditionsTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.ConditionsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Conditions_.condition_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_RODeptIDNewDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.department table.
            // Examples:
            // wc.iAND(DepartmentTable.department_id, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(DepartmentTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("RepairOrdersRecordControl.ROCustNo.Text", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.DepartmentTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"department_.custno"), EvaluateFormula("RepairOrdersRecordControl.ROCustNo.Text", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.DepartmentTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"department_.department_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("RepairOrdersRecordControl.ROCustNo.Text", false) == "--PLEASE_SELECT--" || EvaluateFormula("RepairOrdersRecordControl.ROCustNo.Text", false) == "--ANY--") whereClause.RunQuery = false;
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROFaultCodesDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.FaultCodes table.
            // Examples:
            // wc.iAND(FaultCodesTable.FaultCode, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(FaultCodesTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.FaultCodesTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"FaultCodes_.fault_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROHowApprovedDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.ApprovalMethods table.
            // Examples:
            // wc.iAND(ApprovalMethodsTable.ApprovalMethod, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(ApprovalMethodsTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.ApprovalMethodsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"ApprovalMethods_.Approve_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROMakeDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.MakesModels table.
            // Examples:
            // wc.iAND(MakesModelsTable.Make, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(MakesModelsTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.MakesModelsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"MakesModels_.makesmodels_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROModelDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.MakesModels table.
            // Examples:
            // wc.iAND(MakesModelsTable.Model, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(MakesModelsTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("RepairOrdersRecordControl.ROMake.SelectedValue", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.MakesModelsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"MakesModels_.Make"), EvaluateFormula("RepairOrdersRecordControl.ROMake.SelectedValue", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.MakesModelsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"MakesModels_.makesmodels_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("RepairOrdersRecordControl.ROMake.SelectedValue", false) == "--PLEASE_SELECT--" || EvaluateFormula("RepairOrdersRecordControl.ROMake.SelectedValue", false) == "--ANY--") whereClause.RunQuery = false;
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROReference4DropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.CustomerContacts table.
            // Examples:
            // wc.iAND(CustomerContactsTable.CustContactName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(CustomerContactsTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            filter.AddFilter(new BaseClasses.Data.ColumnJoinFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.CustomerContactsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"CustomerContacts_.CustNo"), new BaseClasses.Data.IdentifierAliasInfo(@"CustomerContacts_", null), BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RepairOrdersTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RepairOrders_.ROCustNo"), new BaseClasses.Data.IdentifierAliasInfo(@"RepairOrders_", null),  BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
            if (EvaluateFormula("URL(\"RepairOrders\")", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RepairOrdersTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RepairOrders_.RONo"), EvaluateFormula("URL(\"RepairOrders\")", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("URL(\"RepairOrders\")", false) == "--PLEASE_SELECT--" || EvaluateFormula("URL(\"RepairOrders\")", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROShipViaDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Shipping table.
            // Examples:
            // wc.iAND(ShippingTable.ShipVia, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(ShippingTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.ShippingTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Shipping_.shipping_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROStatusDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Statuses table.
            // Examples:
            // wc.iAND(StatusesTable.StaNumber, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(StatusesTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.StatusesTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Statuses_.status_active"), EvaluateFormula("\"True\"", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("\"True\"", false) == "--PLEASE_SELECT--" || EvaluateFormula("\"True\"", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        // Fill the category_id list.
        protected virtual void Populatecategory_idDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.category_id.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.category_id.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_category_idDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_category_idDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(CategoriesTable.category_name, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the category_idDropDownList.
            CategoriesRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = CategoriesTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (CategoriesRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.category_idSpecified) 
                        {
                            cvalue = itemValue.category_id.ToString().ToString();
                            if (counter < maxItems && this.category_id.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("= Categories.category_name", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.category_id.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.category_id.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.category_id, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.category_id, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.categories.category_id = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(CategoriesTable.category_id, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    CategoriesRecord[] rc = CategoriesTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        CategoriesRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.category_idSpecified)
                            cvalue = itemValue.category_id.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("= Categories.category_name", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.category_id, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROCondition list.
        protected virtual void PopulateROConditionDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROCondition.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROCondition.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROConditionDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROConditionDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(ConditionsTable.Condition, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROConditionDropDownList.
            ConditionsRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = ConditionsTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (ConditionsRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.ConditionSpecified) 
                        {
                            cvalue = itemValue.Condition.ToString();
                            if (counter < maxItems && this.ROCondition.Items.FindByValue(cvalue) == null)
                            {
                                     
                                Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROCondition);
                                if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROCondition.IsApplyDisplayAs)
                                    fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROCondition);
                                if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                                    fvalue = itemValue.Format(ConditionsTable.Condition);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROCondition.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROCondition.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROCondition, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROCondition, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Conditions.Condition = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(ConditionsTable.Condition, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    ConditionsRecord[] rc = ConditionsTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        ConditionsRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.ConditionSpecified)
                            cvalue = itemValue.Condition.ToString(); 
                        Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROCondition);
                        if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROCondition.IsApplyDisplayAs)
                            fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROCondition);
                        if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                            fvalue = itemValue.Format(ConditionsTable.Condition);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROCondition, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the RODeptIDNew list.
        protected virtual void PopulateRODeptIDNewDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.RODeptIDNew.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.RODeptIDNew.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_RODeptIDNewDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_RODeptIDNewDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(DepartmentTable.department_name, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the RODeptIDNewDropDownList.
            DepartmentRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = DepartmentTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (DepartmentRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.department_idSpecified) 
                        {
                            cvalue = itemValue.department_id.ToString().ToString();
                            if (counter < maxItems && this.RODeptIDNew.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("= Department.department_name", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.RODeptIDNew.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.RODeptIDNew.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.RODeptIDNew, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.RODeptIDNew, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.department.department_id = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(DepartmentTable.department_id, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    DepartmentRecord[] rc = DepartmentTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        DepartmentRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.department_idSpecified)
                            cvalue = itemValue.department_id.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("= Department.department_name", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.RODeptIDNew, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROFaultCodes list.
        protected virtual void PopulateROFaultCodesDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROFaultCodes.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROFaultCodes.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROFaultCodesDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROFaultCodesDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(FaultCodesTable.FaultCode, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROFaultCodesDropDownList.
            FaultCodesRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = FaultCodesTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (FaultCodesRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.FaultCodeSpecified) 
                        {
                            cvalue = itemValue.FaultCode.ToString();
                            if (counter < maxItems && this.ROFaultCodes.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=FaultCodes.FaultCode + \" \" + FaultCodes.FaultDesc", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROFaultCodes.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROFaultCodes.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROFaultCodes, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROFaultCodes, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.FaultCodes.FaultCode = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(FaultCodesTable.FaultCode, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    FaultCodesRecord[] rc = FaultCodesTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        FaultCodesRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.FaultCodeSpecified)
                            cvalue = itemValue.FaultCode.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=FaultCodes.FaultCode + \" \" + FaultCodes.FaultDesc", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROFaultCodes, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROHowApproved list.
        protected virtual void PopulateROHowApprovedDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROHowApproved.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROHowApproved.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROHowApprovedDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROHowApprovedDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(ApprovalMethodsTable.ApprovalMethod, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROHowApprovedDropDownList.
            ApprovalMethodsRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = ApprovalMethodsTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (ApprovalMethodsRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.ApprovalMethodSpecified) 
                        {
                            cvalue = itemValue.ApprovalMethod.ToString();
                            if (counter < maxItems && this.ROHowApproved.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("= ApprovalMethods.ApprovalMethod", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROHowApproved.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROHowApproved.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROHowApproved, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROHowApproved, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.ApprovalMethods.ApprovalMethod = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(ApprovalMethodsTable.ApprovalMethod, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    ApprovalMethodsRecord[] rc = ApprovalMethodsTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        ApprovalMethodsRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.ApprovalMethodSpecified)
                            cvalue = itemValue.ApprovalMethod.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("= ApprovalMethods.ApprovalMethod", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROHowApproved, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROMake list.
        protected virtual void PopulateROMakeDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROMake.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROMake.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROMakeDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROMakeDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(MakesModelsTable.Make, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROMakeDropDownList.
            MakesModelsRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = MakesModelsTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (MakesModelsRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.MakeSpecified) 
                        {
                            cvalue = itemValue.Make.ToString();
                            if (counter < maxItems && this.ROMake.Items.FindByValue(cvalue) == null)
                            {
                                     
                                Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROMake);
                                if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROMake.IsApplyDisplayAs)
                                    fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROMake);
                                if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                                    fvalue = itemValue.Format(MakesModelsTable.Make);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROMake.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROMake.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROMake, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROMake, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.MakesModels.Make = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(MakesModelsTable.Make, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    MakesModelsRecord[] rc = MakesModelsTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        MakesModelsRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.MakeSpecified)
                            cvalue = itemValue.Make.ToString(); 
                        Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROMake);
                        if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROMake.IsApplyDisplayAs)
                            fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROMake);
                        if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                            fvalue = itemValue.Format(MakesModelsTable.Make);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROMake, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROModel list.
        protected virtual void PopulateROModelDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROModel.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROModel.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROModelDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROModelDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(MakesModelsTable.Model, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROModelDropDownList.
            MakesModelsRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = MakesModelsTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (MakesModelsRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.ModelSpecified) 
                        {
                            cvalue = itemValue.Model.ToString();
                            if (counter < maxItems && this.ROModel.Items.FindByValue(cvalue) == null)
                            {
                                     
                                Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROModel);
                                if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROModel.IsApplyDisplayAs)
                                    fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROModel);
                                if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                                    fvalue = itemValue.Format(MakesModelsTable.Model);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROModel.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROModel.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROModel, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROModel, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.MakesModels.Model = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(MakesModelsTable.Model, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    MakesModelsRecord[] rc = MakesModelsTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        MakesModelsRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.ModelSpecified)
                            cvalue = itemValue.Model.ToString(); 
                        Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROModel);
                        if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROModel.IsApplyDisplayAs)
                            fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROModel);
                        if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                            fvalue = itemValue.Format(MakesModelsTable.Model);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROModel, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROReference4 list.
        protected virtual void PopulateROReference4DropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROReference4.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROReference4.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROReference4DropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROReference4DropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
            
            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROReference4DropDownList.
            CustomerContactsRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = CustomerContactsTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (CustomerContactsRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.CustContactNameSpecified) 
                        {
                            cvalue = itemValue.CustContactName.ToString();
                            if (counter < maxItems && this.ROReference4.Items.FindByValue(cvalue) == null)
                            {
                                     
                                Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROReference4);
                                if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROReference4.IsApplyDisplayAs)
                                    fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROReference4);
                                if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                                    fvalue = itemValue.Format(CustomerContactsTable.CustContactName);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROReference4.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROReference4.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROReference4, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROReference4, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.CustomerContacts.CustContactName = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(CustomerContactsTable.CustContactName, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    CustomerContactsRecord[] rc = CustomerContactsTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        CustomerContactsRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.CustContactNameSpecified)
                            cvalue = itemValue.CustContactName.ToString(); 
                        Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROReference4);
                        if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROReference4.IsApplyDisplayAs)
                            fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROReference4);
                        if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                            fvalue = itemValue.Format(CustomerContactsTable.CustContactName);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROReference4, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROShipVia list.
        protected virtual void PopulateROShipViaDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROShipVia.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROShipVia.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROShipViaDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROShipViaDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(ShippingTable.ShipVia, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROShipViaDropDownList.
            ShippingRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = ShippingTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (ShippingRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.ShipViaSpecified) 
                        {
                            cvalue = itemValue.ShipVia.ToString();
                            if (counter < maxItems && this.ROShipVia.Items.FindByValue(cvalue) == null)
                            {
                                     
                                Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROShipVia);
                                if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROShipVia.IsApplyDisplayAs)
                                    fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROShipVia);
                                if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                                    fvalue = itemValue.Format(ShippingTable.ShipVia);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROShipVia.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROShipVia.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROShipVia, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROShipVia, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Shipping.ShipVia = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(ShippingTable.ShipVia, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    ShippingRecord[] rc = ShippingTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        ShippingRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.ShipViaSpecified)
                            cvalue = itemValue.ShipVia.ToString(); 
                        Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROShipVia);
                        if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROShipVia.IsApplyDisplayAs)
                            fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROShipVia);
                        if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                            fvalue = itemValue.Format(ShippingTable.ShipVia);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROShipVia, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROStatus list.
        protected virtual void PopulateROStatusDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROStatus.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROStatus.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROStatusDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROStatusDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(StatusesTable.StaCustomCaption, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROStatusDropDownList.
            StatusesRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = StatusesTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (StatusesRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.StaNumberSpecified) 
                        {
                            cvalue = itemValue.StaNumber.ToString().ToString();
                            if (counter < maxItems && this.ROStatus.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Statuses.StaCustomCaption", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROStatus.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROStatus.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROStatus, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROStatus, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Statuses.StaNumber = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(StatusesTable.StaNumber, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    StatusesRecord[] rc = StatusesTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        StatusesRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.StaNumberSpecified)
                            cvalue = itemValue.StaNumber.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Statuses.StaCustomCaption", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROStatus, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // event handler for ImageButton
        public virtual void ImageButton_Click(object sender, ImageClickEventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../RepairOrders/RepairOrder-POD.aspx?repairorders={RepairOrdersRecordControl:FV:RONo}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
        // event handler for ImageButton
        public virtual void SignatureImage_Click(object sender, ImageClickEventArgs args)
        {
              
            try {
                
            } catch (Exception ex) {
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
    
            }
    
        }
            
            
        
        // event handler for Button
        public virtual void Button_Click(object sender, EventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../notification_log/Add-Notification-log.aspx?RepairOrders={RepairOrdersRecordControl:PK}&custno={RepairOrdersRecordControl:FV:ROCustNo}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
        // event handler for Button
        public virtual void Button1_Click(object sender, EventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../CustomerContacts/Add-CustomerContacts.aspx?Custno={RepairOrdersRecordControl:FV:ROCustNo}";
            
            if (!string.IsNullOrEmpty(this.Page.Request["RedirectStyle"]))
                url += "&RedirectStyle=" + this.Page.Request["RedirectStyle"];
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      this.Page.Response.Redirect(url);
        
            }
        
        }
            
            
        
        // event handler for Button
        public virtual void Button2_Click(object sender, EventArgs args)
        {
              
            // The redirect URL is set on the Properties, Custom Properties or Actions.
            // The ModifyRedirectURL call resolves the parameters before the
            // Response.Redirect redirects the page to the URL.  
            // Any code after the Response.Redirect call will not be executed, since the page is
            // redirected to the URL.
            
            string url = @"../department/Add-Department.aspx?TabVisible=False&SaveAndNewVisible=False&custno={RepairOrdersRecordControl:FV:ROCustNo}";
            
        bool shouldRedirect = true;
        string target = null;
        if (target == null) target = ""; // avoid warning on VS
      
            try {
                // Enclose all database retrieval/update code within a Transaction boundary
                DbUtils.StartTransaction();
                
                url = this.ModifyRedirectUrl(url, "",true);
                url = this.Page.ModifyRedirectUrl(url, "",true);
              
            } catch (Exception ex) {
                  // Upon error, rollback the transaction
                  this.Page.RollBackTransaction(sender);
                  shouldRedirect = false;
                  this.Page.ErrorOnPage = true;

            // Report the error message to the end user
            BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
    
            } finally {
                DbUtils.EndTransaction();
            }
            if (shouldRedirect) {
                this.Page.ShouldSaveControlsToSession = true;
      
                    url = url + "&RedirectStyle=" + (this.Page as BaseApplicationPage).Encrypt("Popup") + "&Target=" + (this.Page as BaseApplicationPage).Encrypt(this.RODeptIDNew.ClientID) + "&Formula=" + (this.Page as BaseApplicationPage).Encrypt("= Department.department_name")+ "&IndexField=" + (this.Page as BaseApplicationPage).Encrypt("department_id");                      
                              
                string javascriptCall = "";
                
                    javascriptCall = "initializePopupPage(this, '" + url + "', false, event);";                                      
                AjaxControlToolkit.ToolkitScriptManager.RegisterStartupScript(this, this.GetType(), "Button2_Click", javascriptCall, true);
        
            }
        
        }
            
            
        
        protected virtual void category_id_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[category_id.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[category_id.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.category_id.Items.Add(new ListItem(displayText, val));
	            this.category_id.SelectedIndex = this.category_id.Items.Count - 1;
	            this.Page.Session.Remove(category_id.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(category_id.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROCondition_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROCondition.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROCondition.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROCondition.Items.Add(new ListItem(displayText, val));
	            this.ROCondition.SelectedIndex = this.ROCondition.Items.Count - 1;
	            this.Page.Session.Remove(ROCondition.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROCondition.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void RODeptIDNew_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[RODeptIDNew.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[RODeptIDNew.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.RODeptIDNew.Items.Add(new ListItem(displayText, val));
	            this.RODeptIDNew.SelectedIndex = this.RODeptIDNew.Items.Count - 1;
	            this.Page.Session.Remove(RODeptIDNew.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(RODeptIDNew.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROFaultCodes_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROFaultCodes.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROFaultCodes.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROFaultCodes.Items.Add(new ListItem(displayText, val));
	            this.ROFaultCodes.SelectedIndex = this.ROFaultCodes.Items.Count - 1;
	            this.Page.Session.Remove(ROFaultCodes.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROFaultCodes.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROHowApproved_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROHowApproved.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROHowApproved.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROHowApproved.Items.Add(new ListItem(displayText, val));
	            this.ROHowApproved.SelectedIndex = this.ROHowApproved.Items.Count - 1;
	            this.Page.Session.Remove(ROHowApproved.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROHowApproved.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROMake_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROMake.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROMake.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROMake.Items.Add(new ListItem(displayText, val));
	            this.ROMake.SelectedIndex = this.ROMake.Items.Count - 1;
	            this.Page.Session.Remove(ROMake.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROMake.ClientID + "_SelectedDisplayText");
            }
           
                try
                {
                    // Enclose all database retrieval/update code within a Transaction boundary
                    DbUtils.StartTransaction();
                    // Because Set methods will be called, it is important to initialize the data source ahead of time
                    
                    if (this.RecordUniqueId != null)
                        this.DataSource = this.GetRecord();                        
                      
                SetROModel();
                            
                    this.Page.CommitTransaction(sender);
                }
                catch
                {
                    // Upon error, rollback the transaction
                    this.Page.RollBackTransaction(sender);
                }
                finally
                {
                    DbUtils.EndTransaction();
                }
    
                        						
        }
            
        protected virtual void ROModel_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROModel.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROModel.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROModel.Items.Add(new ListItem(displayText, val));
	            this.ROModel.SelectedIndex = this.ROModel.Items.Count - 1;
	            this.Page.Session.Remove(ROModel.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROModel.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROReference4_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROReference4.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROReference4.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROReference4.Items.Add(new ListItem(displayText, val));
	            this.ROReference4.SelectedIndex = this.ROReference4.Items.Count - 1;
	            this.Page.Session.Remove(ROReference4.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROReference4.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROShipVia_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROShipVia.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROShipVia.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROShipVia.Items.Add(new ListItem(displayText, val));
	            this.ROShipVia.SelectedIndex = this.ROShipVia.Items.Count - 1;
	            this.Page.Session.Remove(ROShipVia.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROShipVia.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROStatus_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROStatus.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROStatus.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROStatus.Items.Add(new ListItem(displayText, val));
	            this.ROStatus.SelectedIndex = this.ROStatus.Items.Count - 1;
	            this.Page.Session.Remove(ROStatus.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROStatus.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void label_required_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void loaner_required_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void repair_replace_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROReEstimate_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROUnder_Contract_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
        protected virtual void ROCustNo_TextChanged(object sender, EventArgs args)
        {
                    
                try
                {
                    // Enclose all database retrieval/update code within a Transaction boundary
                    DbUtils.StartTransaction();
                    // Because Set methods will be called, it is important to initialize the data source ahead of time
                    
                    if (this.RecordUniqueId != null)
                        this.DataSource = this.GetRecord();                        
                      
                SetRODeptIDNew();
                SetROSerialNo();
                            
                    this.Page.CommitTransaction(sender);
                }
                catch
                {
                    // Upon error, rollback the transaction
                    this.Page.RollBackTransaction(sender);
                }
                finally
                {
                    DbUtils.EndTransaction();
                }
    
                        
              }
            
        protected virtual void RODateEstimateApproved_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void RODesc_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void ROPreapproved_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void ROReference1_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void ROReference3_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void ROSerialNo_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseRepairOrdersRecordControl_Rec"];
            }
            set {
                this.ViewState["BaseRepairOrdersRecordControl_Rec"] = value;
            }
        }
        
        public RepairOrdersRecord DataSource {
            get {
                return (RepairOrdersRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public AccessoriesRecordControl AccessoriesRecordControl {
            get {
                return (AccessoriesRecordControl)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "AccessoriesRecordControl");
            }
        }
        
        public OEMConversion.UI.IThemeButton Button {
            get {
                return (OEMConversion.UI.IThemeButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Button");
            }
        }
        
        public OEMConversion.UI.IThemeButton Button1 {
            get {
                return (OEMConversion.UI.IThemeButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Button1");
            }
        }
        
        public OEMConversion.UI.IThemeButton Button2 {
            get {
                return (OEMConversion.UI.IThemeButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Button2");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList category_id {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "category_id");
            }
        }
            
        public CustomerContactsRecordControl CustomerContactsRecordControl {
            get {
                return (CustomerContactsRecordControl)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustomerContactsRecordControl");
            }
        }
        
        public CustomersRecordControl CustomersRecordControl {
            get {
                return (CustomersRecordControl)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "CustomersRecordControl");
            }
        }
        
        public DetailsParts DetailsParts {
            get {
                return (DetailsParts)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsParts");
            }
        }
        
        public DetailsSC2 DetailsSC2 {
            get {
                return (DetailsSC2)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsSC2");
            }
        }
        
        public DetailsServiceCodes DetailsServiceCodes {
            get {
                return (DetailsServiceCodes)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "DetailsServiceCodes");
            }
        }
        
        public System.Web.UI.WebControls.ImageButton ImageButton {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ImageButton");
            }
        }
        
        public InvoiceDetails InvoiceDetails {
            get {
                return (InvoiceDetails)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "InvoiceDetails");
            }
        }
        
        public System.Web.UI.WebControls.Label Label {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Label");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox label_required {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "label_required");
            }
        }
            
        public System.Web.UI.WebControls.Literal label_requiredLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "label_requiredLabel");
            }
        }
        
        public System.Web.UI.WebControls.Label Label1 {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Label1");
            }
        }
        
        public System.Web.UI.WebControls.Label Label2 {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Label2");
            }
        }
        
        public System.Web.UI.WebControls.Label Label3 {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Label3");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox loaner_required {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "loaner_required");
            }
        }
            
        public System.Web.UI.WebControls.Literal loaner_requiredLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "loaner_requiredLabel");
            }
        }
        
        public Notification_logTableControl Notification_logTableControl {
            get {
                return (Notification_logTableControl)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Notification_logTableControl");
            }
        }
        
        public Repair_order_notesTableControl Repair_order_notesTableControl {
            get {
                return (Repair_order_notesTableControl)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Repair_order_notesTableControl");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox repair_replace {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "repair_replace");
            }
        }
            
        public System.Web.UI.WebControls.Literal repair_replaceLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "repair_replaceLabel");
            }
        }
        
        public RepairOrdersRecordControl1 RepairOrdersRecordControl1 {
            get {
                return (RepairOrdersRecordControl1)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControl1");
            }
        }
        
        public RepairOrdersRecordControl2 RepairOrdersRecordControl2 {
            get {
                return (RepairOrdersRecordControl2)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControl2");
            }
        }
        
        public AjaxControlToolkit.TabContainer RepairOrdersRecordControlTabContainer {
            get {
                return (AjaxControlToolkit.TabContainer)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControlTabContainer");
            }
        }
        
        public System.Web.UI.WebControls.Literal ROCategoryLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROCategoryLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROCondition {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROCondition");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROConditionLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROConditionLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox ROCustNo {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROCustNo");
            }
        }
            
        public System.Web.UI.WebControls.TextBox RODateEstimateApproved {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateEstimateApproved");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODateEstimateApprovedLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateEstimateApprovedLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList RODeptIDNew {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODeptIDNew");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODeptIDNewLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODeptIDNewLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox RODesc {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODesc");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODescLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODescLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROFaultCodes {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROFaultCodes");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROFaultCodesLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROFaultCodesLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROHowApproved {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROHowApproved");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROHowApprovedLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROHowApprovedLabel");
            }
        }
        
        public ROIncomingRecordControl1 ROIncomingRecordControl1 {
            get {
                return (ROIncomingRecordControl1)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROIncomingRecordControl1");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROMake {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROMake");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROMakeLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROMakeLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROModel {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROModel");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROModelLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROModelLabel");
            }
        }
        
        public System.Web.UI.WebControls.Label RONo {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RONo");
            }
        }
            
        public System.Web.UI.WebControls.Label RONo1 {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RONo1");
            }
        }
            
        public System.Web.UI.WebControls.Label RONo3 {
            get {
                return (System.Web.UI.WebControls.Label)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RONo3");
            }
        }
            
        public System.Web.UI.WebControls.Literal RONo4 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RONo4");
            }
        }
            
        public System.Web.UI.WebControls.TextBox ROPreapproved {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPreapproved");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROPreapprovedLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROPreapprovedLabel");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROReEstimate {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReEstimate");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROReEstimateLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReEstimateLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox ROReference1 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReference1");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROReference1Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReference1Label");
            }
        }
        
        public System.Web.UI.WebControls.TextBox ROReference3 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReference3");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROReference3Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReference3Label");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROReference4 {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReference4");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROReference4Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReference4Label");
            }
        }
        
        public System.Web.UI.WebControls.TextBox ROSerialNo {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSerialNo");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROSerialNoLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSerialNoLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROShipVia {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROShipVia");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROShipViaLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROShipViaLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROStatus {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROStatus");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROStatusLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROStatusLabel");
            }
        }
        
        public System.Web.UI.WebControls.CheckBox ROUnder_Contract {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROUnder_Contract");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROUnder_ContractLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROUnder_ContractLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal signature_datetime {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "signature_datetime");
            }
        }
            
        public System.Web.UI.WebControls.ImageButton SignatureImage {
            get {
                return (System.Web.UI.WebControls.ImageButton)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "SignatureImage");
            }
        }
            
        public System.Web.UI.WebControls.Literal SignatureImageLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "SignatureImageLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title");
            }
        }
        
        public VendorsRecordControl VendorsRecordControl {
            get {
                return (VendorsRecordControl)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendorsRecordControl");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        RepairOrdersRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    RepairOrdersRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual RepairOrdersRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            throw new Exception(Page.GetResourceValue("Err:RetrieveRec", "OEMConversion"));
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the RepairOrdersRecordControl1 control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in RepairOrdersRecordControl1.
public class BaseRepairOrdersRecordControl1 : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseRepairOrdersRecordControl1()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in RepairOrdersRecordControl1.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in RepairOrdersRecordControl1.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
              this.ROEstimatedBy1.SelectedIndexChanged += ROEstimatedBy1_SelectedIndexChanged;
            
              this.ROReceivedBy.SelectedIndexChanged += ROReceivedBy_SelectedIndexChanged;
            
              this.ROTechnician1.SelectedIndexChanged += ROTechnician1_SelectedIndexChanged;
            
              this.RODateEstimatedCompletion1.TextChanged += RODateEstimatedCompletion1_TextChanged;
            
              this.RODateEstimateRefused.TextChanged += RODateEstimateRefused_TextChanged;
            
              this.RODateReceivedFromVendor.TextChanged += RODateReceivedFromVendor_TextChanged;
            
              this.RODateRepairCompleted1.TextChanged += RODateRepairCompleted1_TextChanged;
            
              this.RODateReturned1.TextChanged += RODateReturned1_TextChanged;
            
              this.RODateSubcontracted.TextChanged += RODateSubcontracted_TextChanged;
            
              this.ROProblem.TextChanged += ROProblem_TextChanged;
            
              this.ROSubcontractNotes.TextChanged += ROSubcontractNotes_TextChanged;
            
              this.ROWorkDoneNotes2.TextChanged += ROWorkDoneNotes2_TextChanged;
            
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControl1Panel");
            if (Panel != null){
                Panel.Visible = true;
            }
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new RepairOrdersRecord();
            
                if (Panel != null){
                    Panel.Visible = false;
                }
              
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            RepairOrdersRecord[] recList = RepairOrdersTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                if (Panel != null){
                    Panel.Visible = false;
                }
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = RepairOrdersTable.GetRecord(recList[0].GetID().ToXmlString(), true);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                SetRODateEstimatedCompletion1();
                SetRODateEstimatedCompletionLabel1();
                SetRODateEstimateRefused();
                SetRODateEstimateRefusedLabel();
                SetRODateReceivedFromVendor();
                SetRODateReceivedFromVendorLabel();
                SetRODateRepairCompleted1();
                SetRODateRepairCompletedLabel1();
                SetRODateReturned1();
                SetRODateReturnedLabel1();
                SetRODateSubcontracted();
                SetRODateSubcontractedLabel();
                SetROEstimatedBy1();
                SetROEstimatedByLabel();
                SetROProblem();
                SetROProblemLabel();
                SetROReceivedBy();
                SetROReceivedByLabel();
                SetROSubcontractNotes();
                SetROSubcontractNotesLabel();
                SetROTechnician1();
                SetROTechnicianLabel2();
                SetROWorkDoneNotes2();
                SetROWorkDoneNotesLabel2();
                

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void SetRODateEstimatedCompletion1()
        {
            
                    
            // Set the RODateEstimatedCompletion TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODateEstimatedCompletion1 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODateEstimatedCompletionSpecified) {
                								
                // If the RODateEstimatedCompletion is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODateEstimatedCompletion, @"d");
                                
                this.RODateEstimatedCompletion1.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODateEstimatedCompletion is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODateEstimatedCompletion1.Text = RepairOrdersTable.RODateEstimatedCompletion.Format(RepairOrdersTable.RODateEstimatedCompletion.DefaultValue, @"d");
            		
            }
            
              this.RODateEstimatedCompletion1.TextChanged += RODateEstimatedCompletion1_TextChanged;
                               
        }
                
        public virtual void SetRODateEstimateRefused()
        {
            
                    
            // Set the RODateEstimateRefused TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODateEstimateRefused is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODateEstimateRefusedSpecified) {
                								
                // If the RODateEstimateRefused is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODateEstimateRefused, @"g");
                                
                this.RODateEstimateRefused.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODateEstimateRefused is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODateEstimateRefused.Text = RepairOrdersTable.RODateEstimateRefused.Format(RepairOrdersTable.RODateEstimateRefused.DefaultValue, @"g");
            		
            }
            
              this.RODateEstimateRefused.TextChanged += RODateEstimateRefused_TextChanged;
                               
        }
                
        public virtual void SetRODateReceivedFromVendor()
        {
            
                    
            // Set the RODateReceivedFromVendor TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODateReceivedFromVendor is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODateReceivedFromVendorSpecified) {
                								
                // If the RODateReceivedFromVendor is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODateReceivedFromVendor, @"d");
                                
                this.RODateReceivedFromVendor.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODateReceivedFromVendor is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODateReceivedFromVendor.Text = RepairOrdersTable.RODateReceivedFromVendor.Format(RepairOrdersTable.RODateReceivedFromVendor.DefaultValue, @"d");
            		
            }
            
              this.RODateReceivedFromVendor.TextChanged += RODateReceivedFromVendor_TextChanged;
                               
        }
                
        public virtual void SetRODateRepairCompleted1()
        {
            
                    
            // Set the RODateRepairCompleted TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODateRepairCompleted1 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODateRepairCompletedSpecified) {
                								
                // If the RODateRepairCompleted is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODateRepairCompleted, @"d");
                                
                this.RODateRepairCompleted1.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODateRepairCompleted is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODateRepairCompleted1.Text = RepairOrdersTable.RODateRepairCompleted.Format(RepairOrdersTable.RODateRepairCompleted.DefaultValue, @"d");
            		
            }
            
              this.RODateRepairCompleted1.TextChanged += RODateRepairCompleted1_TextChanged;
                               
        }
                
        public virtual void SetRODateReturned1()
        {
            
                    
            // Set the RODateReturned TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODateReturned1 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODateReturnedSpecified) {
                								
                // If the RODateReturned is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODateReturned, @"d");
                                
                this.RODateReturned1.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODateReturned is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODateReturned1.Text = RepairOrdersTable.RODateReturned.Format(RepairOrdersTable.RODateReturned.DefaultValue, @"d");
            		
            }
            
              this.RODateReturned1.TextChanged += RODateReturned1_TextChanged;
                               
        }
                
        public virtual void SetRODateSubcontracted()
        {
            
                    
            // Set the RODateSubcontracted TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.RODateSubcontracted is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.RODateSubcontractedSpecified) {
                								
                // If the RODateSubcontracted is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.RODateSubcontracted, @"d");
                                
                this.RODateSubcontracted.Text = formattedValue;
                   
            } 
            
            else {
            
                // RODateSubcontracted is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.RODateSubcontracted.Text = RepairOrdersTable.RODateSubcontracted.Format(RepairOrdersTable.RODateSubcontracted.DefaultValue, @"d");
            		
            }
            
              this.RODateSubcontracted.TextChanged += RODateSubcontracted_TextChanged;
                               
        }
                
        public virtual void SetROEstimatedBy1()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROEstimatedBy DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROEstimatedBy1 is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROEstimatedBy1();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROEstimatedBySpecified)
            {
                            
                // If the ROEstimatedBy is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROEstimatedBy;
                
            }
            else
            {
                
                // ROEstimatedBy is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROEstimatedBy.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROEstimatedBy1DropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROProblem()
        {
            
                    
            // Set the ROProblem TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROProblem is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROProblemSpecified) {
                								
                // If the ROProblem is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ROProblem);
                                
                this.ROProblem.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROProblem is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROProblem.Text = RepairOrdersTable.ROProblem.Format(RepairOrdersTable.ROProblem.DefaultValue);
            		
            }
            
              this.ROProblem.TextChanged += ROProblem_TextChanged;
                               
        }
                
        public virtual void SetROReceivedBy()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROReceivedBy DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROReceivedBy is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROReceivedBy();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROReceivedBySpecified)
            {
                            
                // If the ROReceivedBy is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROReceivedBy;
                
            }
            else
            {
                
                // ROReceivedBy is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROReceivedBy.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROReceivedByDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROSubcontractNotes()
        {
            
                    
            // Set the ROSubcontractNotes TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROSubcontractNotes is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROSubcontractNotesSpecified) {
                								
                // If the ROSubcontractNotes is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ROSubcontractNotes);
                                
                this.ROSubcontractNotes.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROSubcontractNotes is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROSubcontractNotes.Text = RepairOrdersTable.ROSubcontractNotes.Format(RepairOrdersTable.ROSubcontractNotes.DefaultValue);
            		
            }
            
              this.ROSubcontractNotes.TextChanged += ROSubcontractNotes_TextChanged;
                               
        }
                
        public virtual void SetROTechnician1()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROTechnician DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROTechnician1 is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROTechnician1();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROTechnicianSpecified)
            {
                            
                // If the ROTechnician is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROTechnician;
                
            }
            else
            {
                
                // ROTechnician is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROTechnician.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROTechnician1DropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROWorkDoneNotes2()
        {
            
                    
            // Set the ROWorkDoneNotes TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROWorkDoneNotes2 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROWorkDoneNotesSpecified) {
                								
                // If the ROWorkDoneNotes is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(RepairOrdersTable.ROWorkDoneNotes);
                                
                this.ROWorkDoneNotes2.Text = formattedValue;
                   
            } 
            
            else {
            
                // ROWorkDoneNotes is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.ROWorkDoneNotes2.Text = RepairOrdersTable.ROWorkDoneNotes.Format(RepairOrdersTable.ROWorkDoneNotes.DefaultValue);
            		
            }
            
              this.ROWorkDoneNotes2.TextChanged += ROWorkDoneNotes2_TextChanged;
                               
        }
                
        public virtual void SetRODateEstimatedCompletionLabel1()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.RODateEstimatedCompletionLabel1.Text = "Some value";
                    
                    
        }
                
        public virtual void SetRODateEstimateRefusedLabel()
                  {
                  
                        this.RODateEstimateRefusedLabel.Text = EvaluateFormula("\"Date Est. Refused\"");
                      
                    
        }
                
        public virtual void SetRODateReceivedFromVendorLabel()
                  {
                  
                        this.RODateReceivedFromVendorLabel.Text = EvaluateFormula("\"Date Rec. from Vendor\"");
                      
                    
        }
                
        public virtual void SetRODateRepairCompletedLabel1()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.RODateRepairCompletedLabel1.Text = "Some value";
                    
                    
        }
                
        public virtual void SetRODateReturnedLabel1()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.RODateReturnedLabel1.Text = "Some value";
                    
                    
        }
                
        public virtual void SetRODateSubcontractedLabel()
                  {
                  
                        this.RODateSubcontractedLabel.Text = EvaluateFormula("\"Date Subcontracted\"");
                      
                    
        }
                
        public virtual void SetROEstimatedByLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROEstimatedByLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROProblemLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROProblemLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROReceivedByLabel()
                  {
                  
                        this.ROReceivedByLabel.Text = EvaluateFormula("\"Received By\"");
                      
                    
        }
                
        public virtual void SetROSubcontractNotesLabel()
                  {
                  
                        this.ROSubcontractNotesLabel.Text = EvaluateFormula("\"Subcontract Notes\"");
                      
                    
        }
                
        public virtual void SetROTechnicianLabel2()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.ROTechnicianLabel2.Text = "Some value";
                    
                    
        }
                
        public virtual void SetROWorkDoneNotesLabel2()
                  {
                  
                        this.ROWorkDoneNotesLabel2.Text = EvaluateFormula("\"Work Done Notes\"");
                      
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControl1Panel");
            if ( (Panel != null && !Panel.Visible) || this.DataSource == null){
                return;
            }
          
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            GetRODateEstimatedCompletion1();
            GetRODateEstimateRefused();
            GetRODateReceivedFromVendor();
            GetRODateRepairCompleted1();
            GetRODateReturned1();
            GetRODateSubcontracted();
            GetROEstimatedBy1();
            GetROProblem();
            GetROReceivedBy();
            GetROSubcontractNotes();
            GetROTechnician1();
            GetROWorkDoneNotes2();
        }
        
        
        public virtual void GetRODateEstimatedCompletion1()
        {
            
            // Retrieve the value entered by the user on the RODateEstimatedCompletion ASP:TextBox, and
            // save it into the RODateEstimatedCompletion field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the date to ensure it is of the proper format
            // and a valid date.  The format is verified based on the current culture 
            // settings including the order of month, day and year and the separator character.
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODateEstimatedCompletion1.Text, RepairOrdersTable.RODateEstimatedCompletion);							
                          
                      
        }
                
        public virtual void GetRODateEstimateRefused()
        {
            
            // Retrieve the value entered by the user on the RODateEstimateRefused ASP:TextBox, and
            // save it into the RODateEstimateRefused field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the date to ensure it is of the proper format
            // and a valid date.  The format is verified based on the current culture 
            // settings including the order of month, day and year and the separator character.
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODateEstimateRefused.Text, RepairOrdersTable.RODateEstimateRefused);							
                          
                      
        }
                
        public virtual void GetRODateReceivedFromVendor()
        {
            
            // Retrieve the value entered by the user on the RODateReceivedFromVendor ASP:TextBox, and
            // save it into the RODateReceivedFromVendor field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the date to ensure it is of the proper format
            // and a valid date.  The format is verified based on the current culture 
            // settings including the order of month, day and year and the separator character.
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODateReceivedFromVendor.Text, RepairOrdersTable.RODateReceivedFromVendor);							
                          
                      
        }
                
        public virtual void GetRODateRepairCompleted1()
        {
            
            // Retrieve the value entered by the user on the RODateRepairCompleted ASP:TextBox, and
            // save it into the RODateRepairCompleted field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the date to ensure it is of the proper format
            // and a valid date.  The format is verified based on the current culture 
            // settings including the order of month, day and year and the separator character.
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODateRepairCompleted1.Text, RepairOrdersTable.RODateRepairCompleted);							
                          
                      
        }
                
        public virtual void GetRODateReturned1()
        {
            
            // Retrieve the value entered by the user on the RODateReturned ASP:TextBox, and
            // save it into the RODateReturned field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the date to ensure it is of the proper format
            // and a valid date.  The format is verified based on the current culture 
            // settings including the order of month, day and year and the separator character.
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODateReturned1.Text, RepairOrdersTable.RODateReturned);							
                          
                      
        }
                
        public virtual void GetRODateSubcontracted()
        {
            
            // Retrieve the value entered by the user on the RODateSubcontracted ASP:TextBox, and
            // save it into the RODateSubcontracted field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Parse will also validate the date to ensure it is of the proper format
            // and a valid date.  The format is verified based on the current culture 
            // settings including the order of month, day and year and the separator character.
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.RODateSubcontracted.Text, RepairOrdersTable.RODateSubcontracted);							
                          
                      
        }
                
        public virtual void GetROEstimatedBy1()
        {
         // Retrieve the value entered by the user on the ROEstimatedBy ASP:DropDownList, and
            // save it into the ROEstimatedBy field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROEstimatedBy1), RepairOrdersTable.ROEstimatedBy);			
                			 
        }
                
        public virtual void GetROProblem()
        {
            
            // Retrieve the value entered by the user on the ROProblem ASP:TextBox, and
            // save it into the ROProblem field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROProblem.Text, RepairOrdersTable.ROProblem);							
                          
                      
        }
                
        public virtual void GetROReceivedBy()
        {
         // Retrieve the value entered by the user on the ROReceivedBy ASP:DropDownList, and
            // save it into the ROReceivedBy field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROReceivedBy), RepairOrdersTable.ROReceivedBy);			
                			 
        }
                
        public virtual void GetROSubcontractNotes()
        {
            
            // Retrieve the value entered by the user on the ROSubcontractNotes ASP:TextBox, and
            // save it into the ROSubcontractNotes field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROSubcontractNotes.Text, RepairOrdersTable.ROSubcontractNotes);							
                          
                      
        }
                
        public virtual void GetROTechnician1()
        {
         // Retrieve the value entered by the user on the ROTechnician ASP:DropDownList, and
            // save it into the ROTechnician field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROTechnician1), RepairOrdersTable.ROTechnician);			
                			 
        }
                
        public virtual void GetROWorkDoneNotes2()
        {
            
            // Retrieve the value entered by the user on the ROWorkDoneNotes ASP:TextBox, and
            // save it into the ROWorkDoneNotes field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.ROWorkDoneNotes2.Text, RepairOrdersTable.ROWorkDoneNotes);							
                          
                      
        }
                

      // To customize, override this method in RepairOrdersRecordControl1.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            RepairOrdersTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

              
            // Retrieve the record id from the URL parameter.
              
            string recId = ((BaseApplicationPage)(this.Page)).Decrypt(this.Page.Request.QueryString["RepairOrders"]);
                
            if (recId == null || recId.Length == 0) {
                // Get the error message from the application resource file.
                throw new Exception(Page.GetResourceValue("Err:UrlParamMissing", "OEMConversion").Replace("{URL}", "RepairOrders"));
            }
            HttpContext.Current.Session["QueryString in Edit-RepairOrders"] = recId;
                  
            if (KeyValue.IsXmlKey(recId)) {
                // Keys are typically passed as XML structures to handle composite keys.
                // If XML, then add a Where clause based on the Primary Key in the XML.
                KeyValue pkValue = KeyValue.XmlToKey(recId);
            
          wc.iAND(RepairOrdersTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, pkValue.GetColumnValueString(RepairOrdersTable.RONo));
          
            }
            else {
                // The URL parameter contains the actual value, not an XML structure.
            
          wc.iAND(RepairOrdersTable.RONo, BaseFilter.ComparisonOperator.EqualsTo, recId);
             
            }
              
            return wc;
          
        }
        
        
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            RepairOrdersTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          RepairOrdersTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        public virtual WhereClause CreateWhereClause_ROEstimatedBy1DropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Technicians table.
            // Examples:
            // wc.iAND(TechniciansTable.TechName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(TechniciansTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.TechniciansTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Technicians_.technician_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_ROReceivedByDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Technicians table.
            // Examples:
            // wc.iAND(TechniciansTable.TechInitials, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(TechniciansTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_ROTechnician1DropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Technicians table.
            // Examples:
            // wc.iAND(TechniciansTable.TechInitials, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(TechniciansTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.TechniciansTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Technicians_.technician_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        // Fill the ROEstimatedBy1 list.
        protected virtual void PopulateROEstimatedBy1DropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROEstimatedBy1.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROEstimatedBy1.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROEstimatedBy1DropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROEstimatedBy1DropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(TechniciansTable.TechName, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROEstimatedBy1DropDownList.
            TechniciansRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = TechniciansTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (TechniciansRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.TechInitialsSpecified) 
                        {
                            cvalue = itemValue.TechInitials.ToString();
                            if (counter < maxItems && this.ROEstimatedBy1.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Technicians.TechInitials", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROEstimatedBy1.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROEstimatedBy1.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROEstimatedBy1, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROEstimatedBy1, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Technicians.TechInitials = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(TechniciansTable.TechInitials, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    TechniciansRecord[] rc = TechniciansTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        TechniciansRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.TechInitialsSpecified)
                            cvalue = itemValue.TechInitials.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Technicians.TechInitials", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROEstimatedBy1, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROReceivedBy list.
        protected virtual void PopulateROReceivedByDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROReceivedBy.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROReceivedBy.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROReceivedByDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROReceivedByDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(TechniciansTable.TechName, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROReceivedByDropDownList.
            TechniciansRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = TechniciansTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (TechniciansRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.TechInitialsSpecified) 
                        {
                            cvalue = itemValue.TechInitials.ToString();
                            if (counter < maxItems && this.ROReceivedBy.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Technicians.TechInitials", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROReceivedBy.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROReceivedBy.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROReceivedBy, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROReceivedBy, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Technicians.TechInitials = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(TechniciansTable.TechInitials, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    TechniciansRecord[] rc = TechniciansTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        TechniciansRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.TechInitialsSpecified)
                            cvalue = itemValue.TechInitials.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Technicians.TechInitials", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROReceivedBy, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROTechnician1 list.
        protected virtual void PopulateROTechnician1DropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROTechnician1.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROTechnician1.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROTechnician1DropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROTechnician1DropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(TechniciansTable.TechName, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROTechnician1DropDownList.
            TechniciansRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = TechniciansTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (TechniciansRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.TechInitialsSpecified) 
                        {
                            cvalue = itemValue.TechInitials.ToString();
                            if (counter < maxItems && this.ROTechnician1.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Technicians.TechInitials", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROTechnician1.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROTechnician1.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROTechnician1, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROTechnician1, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Technicians.TechInitials = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(TechniciansTable.TechInitials, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    TechniciansRecord[] rc = TechniciansTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        TechniciansRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.TechInitialsSpecified)
                            cvalue = itemValue.TechInitials.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Technicians.TechInitials", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROTechnician1, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        protected virtual void ROEstimatedBy1_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROEstimatedBy1.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROEstimatedBy1.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROEstimatedBy1.Items.Add(new ListItem(displayText, val));
	            this.ROEstimatedBy1.SelectedIndex = this.ROEstimatedBy1.Items.Count - 1;
	            this.Page.Session.Remove(ROEstimatedBy1.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROEstimatedBy1.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROReceivedBy_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROReceivedBy.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROReceivedBy.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROReceivedBy.Items.Add(new ListItem(displayText, val));
	            this.ROReceivedBy.SelectedIndex = this.ROReceivedBy.Items.Count - 1;
	            this.Page.Session.Remove(ROReceivedBy.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROReceivedBy.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROTechnician1_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROTechnician1.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROTechnician1.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROTechnician1.Items.Add(new ListItem(displayText, val));
	            this.ROTechnician1.SelectedIndex = this.ROTechnician1.Items.Count - 1;
	            this.Page.Session.Remove(ROTechnician1.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROTechnician1.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void RODateEstimatedCompletion1_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void RODateEstimateRefused_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void RODateReceivedFromVendor_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void RODateRepairCompleted1_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void RODateReturned1_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void RODateSubcontracted_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void ROProblem_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void ROSubcontractNotes_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void ROWorkDoneNotes2_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseRepairOrdersRecordControl1_Rec"];
            }
            set {
                this.ViewState["BaseRepairOrdersRecordControl1_Rec"] = value;
            }
        }
        
        public RepairOrdersRecord DataSource {
            get {
                return (RepairOrdersRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.TextBox RODateEstimatedCompletion1 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateEstimatedCompletion1");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODateEstimatedCompletionLabel1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateEstimatedCompletionLabel1");
            }
        }
        
        public System.Web.UI.WebControls.TextBox RODateEstimateRefused {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateEstimateRefused");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODateEstimateRefusedLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateEstimateRefusedLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox RODateReceivedFromVendor {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateReceivedFromVendor");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODateReceivedFromVendorLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateReceivedFromVendorLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox RODateRepairCompleted1 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateRepairCompleted1");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODateRepairCompletedLabel1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateRepairCompletedLabel1");
            }
        }
        
        public System.Web.UI.WebControls.TextBox RODateReturned1 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateReturned1");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODateReturnedLabel1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateReturnedLabel1");
            }
        }
        
        public System.Web.UI.WebControls.TextBox RODateSubcontracted {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateSubcontracted");
            }
        }
            
        public System.Web.UI.WebControls.Literal RODateSubcontractedLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "RODateSubcontractedLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROEstimatedBy1 {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROEstimatedBy1");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROEstimatedByLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROEstimatedByLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox ROProblem {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROProblem");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROProblemLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROProblemLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROReceivedBy {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReceivedBy");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROReceivedByLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROReceivedByLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox ROSubcontractNotes {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSubcontractNotes");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROSubcontractNotesLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROSubcontractNotesLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROTechnician1 {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROTechnician1");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROTechnicianLabel2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROTechnicianLabel2");
            }
        }
        
        public System.Web.UI.WebControls.TextBox ROWorkDoneNotes2 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROWorkDoneNotes2");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROWorkDoneNotesLabel2 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROWorkDoneNotesLabel2");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title13 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title13");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        RepairOrdersRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    RepairOrdersRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual RepairOrdersRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            throw new Exception(Page.GetResourceValue("Err:RetrieveRec", "OEMConversion"));
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the RepairOrdersRecordControl2 control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in RepairOrdersRecordControl2.
public class BaseRepairOrdersRecordControl2 : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseRepairOrdersRecordControl2()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in RepairOrdersRecordControl2.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in RepairOrdersRecordControl2.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
              this.ROWarranty.SelectedIndexChanged += ROWarranty_SelectedIndexChanged;
            
              this.ROWarrantyPlan1.SelectedIndexChanged += ROWarrantyPlan1_SelectedIndexChanged;
            
              this.ROUnderWarranty1.CheckedChanged += ROUnderWarranty1_CheckedChanged;
            
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControl2Panel");
            if (Panel != null){
                Panel.Visible = true;
            }
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new RepairOrdersRecord();
            
                if (Panel != null){
                    Panel.Visible = false;
                }
              
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            RepairOrdersRecord[] recList = RepairOrdersTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                if (Panel != null){
                    Panel.Visible = false;
                }
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = RepairOrdersTable.GetRecord(recList[0].GetID().ToXmlString(), true);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                SetROUnderWarranty1();
                SetROUnderWarrantyLabel1();
                SetROWarranty();
                SetROWarrantyLabel1();
                SetROWarrantyPlan1();
                SetROWarrantyPlanLabel1();
                

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void SetROUnderWarranty1()
        {
            
                    
            // Set the ROUnderWarranty CheckBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROUnderWarranty1 is the ASP:CheckBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.ROUnderWarrantySpecified) {
                							
                // If the ROUnderWarranty is non-NULL, then format the value.
                // The Format method will use the Display Format
                this.ROUnderWarranty1.Checked = this.DataSource.ROUnderWarranty;
                    				
            } else {
            
                // ROUnderWarranty is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (!this.DataSource.IsCreated) 
                    this.ROUnderWarranty1.Checked = RepairOrdersTable.ROUnderWarranty.ParseValue(RepairOrdersTable.ROUnderWarranty.DefaultValue).ToBoolean();                
                    									
            }
            
        }
                
        public virtual void SetROWarranty()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROWarranty DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROWarranty is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROWarranty();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROWarrantySpecified)
            {
                            
                // If the ROWarranty is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROWarranty.ToString();
                
            }
            else
            {
                
                // ROWarranty is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROWarranty.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROWarrantyDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROWarrantyPlan1()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the ROWarrantyPlan DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.RepairOrders database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.RepairOrders record retrieved from the database.
            // this.ROWarrantyPlan1 is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetROWarrantyPlan1();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.ROWarrantyPlanSpecified)
            {
                            
                // If the ROWarrantyPlan is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.ROWarrantyPlan;
                
            }
            else
            {
                
                // ROWarrantyPlan is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = RepairOrdersTable.ROWarrantyPlan.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateROWarrantyPlan1DropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetROUnderWarrantyLabel1()
                  {
                  
                        this.ROUnderWarrantyLabel1.Text = EvaluateFormula("\"Under Warranty\"");
                      
                    
        }
                
        public virtual void SetROWarrantyLabel1()
                  {
                  
                        this.ROWarrantyLabel1.Text = EvaluateFormula("\"Warranty Term\"");
                      
                    
        }
                
        public virtual void SetROWarrantyPlanLabel1()
                  {
                  
                        this.ROWarrantyPlanLabel1.Text = EvaluateFormula("\"Warranty Plan\"");
                      
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "RepairOrdersRecordControl2Panel");
            if ( (Panel != null && !Panel.Visible) || this.DataSource == null){
                return;
            }
          
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            GetROUnderWarranty1();
            GetROWarranty();
            GetROWarrantyPlan1();
        }
        
        
        public virtual void GetROUnderWarranty1()
        {	
        		
            // Retrieve the value entered by the user on the ROUnderWarranty ASP:CheckBox, and
            // save it into the ROUnderWarranty field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.ROUnderWarranty = this.ROUnderWarranty1.Checked;						
                    
        }
                
        public virtual void GetROWarranty()
        {
         // Retrieve the value entered by the user on the ROWarranty ASP:DropDownList, and
            // save it into the ROWarranty field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROWarranty), RepairOrdersTable.ROWarranty);			
                			 
        }
                
        public virtual void GetROWarrantyPlan1()
        {
         // Retrieve the value entered by the user on the ROWarrantyPlan ASP:DropDownList, and
            // save it into the ROWarrantyPlan field in DataSource DatabaseAYS_OEM%dbo.RepairOrders record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.ROWarrantyPlan1), RepairOrdersTable.ROWarrantyPlan);			
                			 
        }
                

      // To customize, override this method in RepairOrdersRecordControl2.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            RepairOrdersTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

              
            // Get the static clause defined at design time on the Record Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
            
            return wc;
          
        }
        
        
        protected virtual WhereClause CreateQueryClause()
        {
            // Create a where clause for the Static clause defined at design time.
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("URL(\"RepairOrders\")", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RepairOrdersTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RepairOrders_.RONo"), EvaluateFormula("URL(\"RepairOrders\")", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("URL(\"RepairOrders\")", false) == "--PLEASE_SELECT--" || EvaluateFormula("URL(\"RepairOrders\")", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;
        }
          
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            RepairOrdersTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          RepairOrdersTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        public virtual WhereClause CreateWhereClause_ROWarrantyDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.WarrantyPlans table.
            // Examples:
            // wc.iAND(WarrantyPlansTable.LockKey, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(WarrantyPlansTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_ROWarrantyPlan1DropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.WarrantyPlans table.
            // Examples:
            // wc.iAND(WarrantyPlansTable.PlanName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(WarrantyPlansTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        // Fill the ROWarranty list.
        protected virtual void PopulateROWarrantyDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROWarranty.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.ROWarranty.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROWarrantyDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROWarrantyDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(WarrantyPlansTable.PlanName, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROWarrantyDropDownList.
            WarrantyPlansRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = WarrantyPlansTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (WarrantyPlansRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.LockKeySpecified) 
                        {
                            cvalue = itemValue.LockKey.ToString().ToString();
                            if (counter < maxItems && this.ROWarranty.Items.FindByValue(cvalue) == null)
                            {
                                     
                                Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROWarranty);
                                if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROWarranty.IsApplyDisplayAs)
                                    fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROWarranty);
                                if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                                    fvalue = itemValue.Format(WarrantyPlansTable.LockKey);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROWarranty.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROWarranty.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROWarranty, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROWarranty, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.WarrantyPlans.LockKey = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(WarrantyPlansTable.LockKey, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    WarrantyPlansRecord[] rc = WarrantyPlansTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        WarrantyPlansRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.LockKeySpecified)
                            cvalue = itemValue.LockKey.ToString(); 
                        Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROWarranty);
                        if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROWarranty.IsApplyDisplayAs)
                            fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROWarranty);
                        if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                            fvalue = itemValue.Format(WarrantyPlansTable.LockKey);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROWarranty, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the ROWarrantyPlan1 list.
        protected virtual void PopulateROWarrantyPlan1DropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.ROWarrantyPlan1.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("None"), "0"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("30 days"), "1"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("60 days"), "2"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("90 days"), "3"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("100 days"), "4"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("120 days"), "5"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("150 days"), "6"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("180 days"), "7"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("6 months"), "8"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("1 year"), "9"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("18 months"), "10"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("2 years"), "11"));
              
                this.ROWarrantyPlan1.Items.Add(new ListItem(this.Page.ExpandResourceValue("3 years"), "12"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_ROWarrantyPlan1DropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_ROWarrantyPlan1DropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(WarrantyPlansTable.PlanName, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the ROWarrantyPlan1DropDownList.
            WarrantyPlansRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = WarrantyPlansTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (WarrantyPlansRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.PlanNameSpecified) 
                        {
                            cvalue = itemValue.PlanName.ToString();
                            if (counter < maxItems && this.ROWarrantyPlan1.Items.FindByValue(cvalue) == null)
                            {
                                     
                                Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROWarrantyPlan);
                                if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROWarrantyPlan.IsApplyDisplayAs)
                                    fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROWarrantyPlan);
                                if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                                    fvalue = itemValue.Format(WarrantyPlansTable.PlanName);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.ROWarrantyPlan1.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.ROWarrantyPlan1.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.ROWarrantyPlan1, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.ROWarrantyPlan1, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.WarrantyPlans.PlanName = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(WarrantyPlansTable.PlanName, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    WarrantyPlansRecord[] rc = WarrantyPlansTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        WarrantyPlansRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.PlanNameSpecified)
                            cvalue = itemValue.PlanName.ToString(); 
                        Boolean _isExpandableNonCompositeForeignKey = RepairOrdersTable.Instance.TableDefinition.IsExpandableNonCompositeForeignKey(RepairOrdersTable.ROWarrantyPlan);
                        if(_isExpandableNonCompositeForeignKey && RepairOrdersTable.ROWarrantyPlan.IsApplyDisplayAs)
                            fvalue = RepairOrdersTable.GetDFKA(itemValue, RepairOrdersTable.ROWarrantyPlan);
                        if ((!_isExpandableNonCompositeForeignKey) || (String.IsNullOrEmpty(fvalue)))
                            fvalue = itemValue.Format(WarrantyPlansTable.PlanName);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.ROWarrantyPlan1, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        protected virtual void ROWarranty_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROWarranty.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROWarranty.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROWarranty.Items.Add(new ListItem(displayText, val));
	            this.ROWarranty.SelectedIndex = this.ROWarranty.Items.Count - 1;
	            this.Page.Session.Remove(ROWarranty.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROWarranty.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROWarrantyPlan1_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[ROWarrantyPlan1.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[ROWarrantyPlan1.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.ROWarrantyPlan1.Items.Add(new ListItem(displayText, val));
	            this.ROWarrantyPlan1.SelectedIndex = this.ROWarrantyPlan1.Items.Count - 1;
	            this.Page.Session.Remove(ROWarrantyPlan1.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(ROWarrantyPlan1.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void ROUnderWarranty1_CheckedChanged(object sender, EventArgs args)
        {
           						
        }
            
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseRepairOrdersRecordControl2_Rec"];
            }
            set {
                this.ViewState["BaseRepairOrdersRecordControl2_Rec"] = value;
            }
        }
        
        public RepairOrdersRecord DataSource {
            get {
                return (RepairOrdersRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.CheckBox ROUnderWarranty1 {
            get {
                return (System.Web.UI.WebControls.CheckBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROUnderWarranty1");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROUnderWarrantyLabel1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROUnderWarrantyLabel1");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROWarranty {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROWarranty");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROWarrantyLabel1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROWarrantyLabel1");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList ROWarrantyPlan1 {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROWarrantyPlan1");
            }
        }
            
        public System.Web.UI.WebControls.Literal ROWarrantyPlanLabel1 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "ROWarrantyPlanLabel1");
            }
        }
        
        public System.Web.UI.WebControls.Literal Title11 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title11");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        RepairOrdersRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    RepairOrdersRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual RepairOrdersRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return RepairOrdersTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            throw new Exception(Page.GetResourceValue("Err:RetrieveRec", "OEMConversion"));
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the ROIncomingRecordControl1 control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in ROIncomingRecordControl1.
public class BaseROIncomingRecordControl1 : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseROIncomingRecordControl1()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in ROIncomingRecordControl1.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in ROIncomingRecordControl1.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
              this.comp_aw.SelectedIndexChanged += comp_aw_SelectedIndexChanged;
            
              this.comp_bending.SelectedIndexChanged += comp_bending_SelectedIndexChanged;
            
              this.comp_bendrubber.SelectedIndexChanged += comp_bendrubber_SelectedIndexChanged;
            
              this.comp_biopsy.SelectedIndexChanged += comp_biopsy_SelectedIndexChanged;
            
              this.comp_boots.SelectedIndexChanged += comp_boots_SelectedIndexChanged;
            
              this.comp_ccover.SelectedIndexChanged += comp_ccover_SelectedIndexChanged;
            
              this.comp_control.SelectedIndexChanged += comp_control_SelectedIndexChanged;
            
              this.comp_controlbody.SelectedIndexChanged += comp_controlbody_SelectedIndexChanged;
            
              this.comp_elevation.SelectedIndexChanged += comp_elevation_SelectedIndexChanged;
            
              this.comp_fluidcheck.SelectedIndexChanged += comp_fluidcheck_SelectedIndexChanged;
            
              this.comp_image.SelectedIndexChanged += comp_image_SelectedIndexChanged;
            
              this.comp_insertion.SelectedIndexChanged += comp_insertion_SelectedIndexChanged;
            
              this.comp_leaktest.SelectedIndexChanged += comp_leaktest_SelectedIndexChanged;
            
              this.comp_lgconn.SelectedIndexChanged += comp_lgconn_SelectedIndexChanged;
            
              this.comp_lightguide.SelectedIndexChanged += comp_lightguide_SelectedIndexChanged;
            
              this.comp_lightlens.SelectedIndexChanged += comp_lightlens_SelectedIndexChanged;
            
              this.comp_lightout.SelectedIndexChanged += comp_lightout_SelectedIndexChanged;
            
              this.comp_objective.SelectedIndexChanged += comp_objective_SelectedIndexChanged;
            
              this.comp_ocular.SelectedIndexChanged += comp_ocular_SelectedIndexChanged;
            
              this.comp_other1.SelectedIndexChanged += comp_other1_SelectedIndexChanged;
            
              this.comp_other2.SelectedIndexChanged += comp_other2_SelectedIndexChanged;
            
              this.comp_suction.SelectedIndexChanged += comp_suction_SelectedIndexChanged;
            
              this.comp_switches.SelectedIndexChanged += comp_switches_SelectedIndexChanged;
            
              this.technician_id.SelectedIndexChanged += technician_id_SelectedIndexChanged;
            
              this.comp_aw_obs.TextChanged += comp_aw_obs_TextChanged;
            
              this.comp_bending_obs.TextChanged += comp_bending_obs_TextChanged;
            
              this.comp_bending_obs1.TextChanged += comp_bending_obs1_TextChanged;
            
              this.comp_biopsy_obs.TextChanged += comp_biopsy_obs_TextChanged;
            
              this.comp_boots_obs.TextChanged += comp_boots_obs_TextChanged;
            
              this.comp_ccover_obs.TextChanged += comp_ccover_obs_TextChanged;
            
              this.comp_control_obs.TextChanged += comp_control_obs_TextChanged;
            
              this.comp_controlbody_obs.TextChanged += comp_controlbody_obs_TextChanged;
            
              this.comp_elevation_obs.TextChanged += comp_elevation_obs_TextChanged;
            
              this.comp_fluidcheck_obs.TextChanged += comp_fluidcheck_obs_TextChanged;
            
              this.comp_image_obs.TextChanged += comp_image_obs_TextChanged;
            
              this.comp_insertion_obs.TextChanged += comp_insertion_obs_TextChanged;
            
              this.comp_leaktest_obs.TextChanged += comp_leaktest_obs_TextChanged;
            
              this.comp_lgconn_obs.TextChanged += comp_lgconn_obs_TextChanged;
            
              this.comp_lightguide_obs.TextChanged += comp_lightguide_obs_TextChanged;
            
              this.comp_lightlens_obs.TextChanged += comp_lightlens_obs_TextChanged;
            
              this.comp_lightout_obs.TextChanged += comp_lightout_obs_TextChanged;
            
              this.comp_objective_obs.TextChanged += comp_objective_obs_TextChanged;
            
              this.comp_ocular_obs.TextChanged += comp_ocular_obs_TextChanged;
            
              this.comp_other1_name.TextChanged += comp_other1_name_TextChanged;
            
              this.comp_other1_obs.TextChanged += comp_other1_obs_TextChanged;
            
              this.comp_other2_name.TextChanged += comp_other2_name_TextChanged;
            
              this.comp_other2_obs.TextChanged += comp_other2_obs_TextChanged;
            
              this.comp_suction_obs.TextChanged += comp_suction_obs_TextChanged;
            
              this.comp_switches_obs.TextChanged += comp_switches_obs_TextChanged;
            
              this.in_angulation_l.TextChanged += in_angulation_l_TextChanged;
            
              this.in_angulatoin_r.TextChanged += in_angulatoin_r_TextChanged;
            
              this.incoming_d.TextChanged += incoming_d_TextChanged;
            
              this.incoming_datetime.TextChanged += incoming_datetime_TextChanged;
            
              this.incoming_u.TextChanged += incoming_u_TextChanged;
            
              this.out_angulation_d.TextChanged += out_angulation_d_TextChanged;
            
              this.out_angulation_l.TextChanged += out_angulation_l_TextChanged;
            
              this.outgoing_d.TextChanged += outgoing_d_TextChanged;
            
              this.outgoing_u.TextChanged += outgoing_u_TextChanged;
            
              this.rono2.TextChanged += rono2_TextChanged;
            
              this.tech_notes.TextChanged += tech_notes_TextChanged;
            
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new ROIncomingRecord();
            
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            ROIncomingRecord[] recList = ROIncomingTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = (ROIncomingRecord)ROIncomingRecord.Copy(recList[0], false);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                Setcomp_aw();
                Setcomp_aw_obs();
                Setcomp_awLabel();
                Setcomp_bending();
                Setcomp_bending_obs();
                Setcomp_bending_obs1();
                Setcomp_bendingLabel();
                Setcomp_bendrubber();
                Setcomp_bendrubberLabel();
                Setcomp_biopsy();
                Setcomp_biopsy_obs();
                Setcomp_biopsyLabel();
                Setcomp_boots();
                Setcomp_boots_obs();
                Setcomp_bootsLabel();
                Setcomp_ccover();
                Setcomp_ccover_obs();
                Setcomp_ccoverLabel();
                Setcomp_control();
                Setcomp_control_obs();
                Setcomp_controlbody();
                Setcomp_controlbody_obs();
                Setcomp_controlbodyLabel();
                Setcomp_controlLabel();
                Setcomp_elevation();
                Setcomp_elevation_obs();
                Setcomp_elevationLabel();
                Setcomp_fluidcheck();
                Setcomp_fluidcheck_obs();
                Setcomp_fluidcheckLabel();
                Setcomp_image();
                Setcomp_image_obs();
                Setcomp_imageLabel();
                Setcomp_insertion();
                Setcomp_insertion_obs();
                Setcomp_insertionLabel();
                Setcomp_leaktest();
                Setcomp_leaktest_obs();
                Setcomp_leaktestLabel();
                Setcomp_lgconn();
                Setcomp_lgconn_obs();
                Setcomp_lgconnLabel();
                Setcomp_lightguide();
                Setcomp_lightguide_obs();
                Setcomp_lightguideLabel();
                Setcomp_lightlens();
                Setcomp_lightlens_obs();
                Setcomp_lightlensLabel();
                Setcomp_lightout();
                Setcomp_lightout_obs();
                Setcomp_lightoutLabel();
                Setcomp_objective();
                Setcomp_objective_obs();
                Setcomp_objectiveLabel();
                Setcomp_ocular();
                Setcomp_ocular_obs();
                Setcomp_ocularLabel();
                Setcomp_other1();
                Setcomp_other1_name();
                Setcomp_other1_obs();
                Setcomp_other2();
                Setcomp_other2_name();
                Setcomp_other2_obs();
                Setcomp_suction();
                Setcomp_suction_obs();
                Setcomp_suctionLabel();
                Setcomp_switches();
                Setcomp_switches_obs();
                Setcomp_switchesLabel();
                Setin_angulation_l();
                Setin_angulation_lLabel();
                Setin_angulatoin_r();
                Setin_angulatoin_rLabel();
                Setincoming_d();
                Setincoming_datetime();
                Setincoming_dLabel();
                Setincoming_u();
                Setincoming_uLabel();
                Setout_angulation_d();
                Setout_angulation_dLabel();
                Setout_angulation_l();
                Setout_angulation_lLabel();
                Setoutgoing_d();
                Setoutgoing_dLabel();
                Setoutgoing_u();
                Setoutgoing_uLabel();
                Setrono2();
                Settech_notes();
                Settech_notesLabel();
                Settechnician_id();
                

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void Setcomp_aw()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_aw DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_aw is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_aw();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_awSpecified)
            {
                            
                // If the comp_aw is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_aw.ToString();
                
            }
            else
            {
                
                // comp_aw is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_aw.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_awDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_aw_obs()
        {
            
                    
            // Set the comp_aw_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_aw_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_aw_obsSpecified) {
                								
                // If the comp_aw_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_aw_obs);
                                
                this.comp_aw_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_aw_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_aw_obs.Text = ROIncomingTable.comp_aw_obs.Format(ROIncomingTable.comp_aw_obs.DefaultValue);
            		
            }
            
              this.comp_aw_obs.TextChanged += comp_aw_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_bending()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_bending DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_bending is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_bending();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_bendingSpecified)
            {
                            
                // If the comp_bending is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_bending.ToString();
                
            }
            else
            {
                
                // comp_bending is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_bending.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_bendingDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_bending_obs()
        {
            
                    
            // Set the comp_bending_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_bending_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_bending_obsSpecified) {
                								
                // If the comp_bending_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_bending_obs);
                                
                this.comp_bending_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_bending_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_bending_obs.Text = ROIncomingTable.comp_bending_obs.Format(ROIncomingTable.comp_bending_obs.DefaultValue);
            		
            }
            
              this.comp_bending_obs.TextChanged += comp_bending_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_bending_obs1()
        {
            
                    
            // Set the comp_bending_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_bending_obs1 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_bending_obsSpecified) {
                								
                // If the comp_bending_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_bending_obs);
                                
                this.comp_bending_obs1.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_bending_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_bending_obs1.Text = ROIncomingTable.comp_bending_obs.Format(ROIncomingTable.comp_bending_obs.DefaultValue);
            		
            }
            
              this.comp_bending_obs1.TextChanged += comp_bending_obs1_TextChanged;
                               
        }
                
        public virtual void Setcomp_bendrubber()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_bendrubber DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_bendrubber is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_bendrubber();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_bendrubberSpecified)
            {
                            
                // If the comp_bendrubber is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_bendrubber.ToString();
                
            }
            else
            {
                
                // comp_bendrubber is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_bendrubber.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_bendrubberDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_biopsy()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_biopsy DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_biopsy is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_biopsy();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_biopsySpecified)
            {
                            
                // If the comp_biopsy is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_biopsy.ToString();
                
            }
            else
            {
                
                // comp_biopsy is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_biopsy.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_biopsyDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_biopsy_obs()
        {
            
                    
            // Set the comp_biopsy_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_biopsy_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_biopsy_obsSpecified) {
                								
                // If the comp_biopsy_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_biopsy_obs);
                                
                this.comp_biopsy_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_biopsy_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_biopsy_obs.Text = ROIncomingTable.comp_biopsy_obs.Format(ROIncomingTable.comp_biopsy_obs.DefaultValue);
            		
            }
            
              this.comp_biopsy_obs.TextChanged += comp_biopsy_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_boots()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_boots DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_boots is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_boots();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_bootsSpecified)
            {
                            
                // If the comp_boots is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_boots.ToString();
                
            }
            else
            {
                
                // comp_boots is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_boots.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_bootsDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_boots_obs()
        {
            
                    
            // Set the comp_boots_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_boots_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_boots_obsSpecified) {
                								
                // If the comp_boots_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_boots_obs);
                                
                this.comp_boots_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_boots_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_boots_obs.Text = ROIncomingTable.comp_boots_obs.Format(ROIncomingTable.comp_boots_obs.DefaultValue);
            		
            }
            
              this.comp_boots_obs.TextChanged += comp_boots_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_ccover()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_ccover DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_ccover is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_ccover();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_ccoverSpecified)
            {
                            
                // If the comp_ccover is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_ccover.ToString();
                
            }
            else
            {
                
                // comp_ccover is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_ccover.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_ccoverDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_ccover_obs()
        {
            
                    
            // Set the comp_ccover_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_ccover_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_ccover_obsSpecified) {
                								
                // If the comp_ccover_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_ccover_obs);
                                
                this.comp_ccover_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_ccover_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_ccover_obs.Text = ROIncomingTable.comp_ccover_obs.Format(ROIncomingTable.comp_ccover_obs.DefaultValue);
            		
            }
            
              this.comp_ccover_obs.TextChanged += comp_ccover_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_control()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_control DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_control is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_control();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_controlSpecified)
            {
                            
                // If the comp_control is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_control.ToString();
                
            }
            else
            {
                
                // comp_control is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_control.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_controlDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_control_obs()
        {
            
                    
            // Set the comp_control_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_control_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_control_obsSpecified) {
                								
                // If the comp_control_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_control_obs);
                                
                this.comp_control_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_control_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_control_obs.Text = ROIncomingTable.comp_control_obs.Format(ROIncomingTable.comp_control_obs.DefaultValue);
            		
            }
            
              this.comp_control_obs.TextChanged += comp_control_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_controlbody()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_controlbody DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_controlbody is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_controlbody();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_controlbodySpecified)
            {
                            
                // If the comp_controlbody is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_controlbody.ToString();
                
            }
            else
            {
                
                // comp_controlbody is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_controlbody.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_controlbodyDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_controlbody_obs()
        {
            
                    
            // Set the comp_controlbody_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_controlbody_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_controlbody_obsSpecified) {
                								
                // If the comp_controlbody_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_controlbody_obs);
                                
                this.comp_controlbody_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_controlbody_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_controlbody_obs.Text = ROIncomingTable.comp_controlbody_obs.Format(ROIncomingTable.comp_controlbody_obs.DefaultValue);
            		
            }
            
              this.comp_controlbody_obs.TextChanged += comp_controlbody_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_elevation()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_elevation DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_elevation is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_elevation();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_elevationSpecified)
            {
                            
                // If the comp_elevation is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_elevation.ToString();
                
            }
            else
            {
                
                // comp_elevation is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_elevation.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_elevationDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_elevation_obs()
        {
            
                    
            // Set the comp_elevation_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_elevation_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_elevation_obsSpecified) {
                								
                // If the comp_elevation_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_elevation_obs);
                                
                this.comp_elevation_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_elevation_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_elevation_obs.Text = ROIncomingTable.comp_elevation_obs.Format(ROIncomingTable.comp_elevation_obs.DefaultValue);
            		
            }
            
              this.comp_elevation_obs.TextChanged += comp_elevation_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_fluidcheck()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_fluidcheck DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_fluidcheck is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_fluidcheck();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_fluidcheckSpecified)
            {
                            
                // If the comp_fluidcheck is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_fluidcheck.ToString();
                
            }
            else
            {
                
                // comp_fluidcheck is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_fluidcheck.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_fluidcheckDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_fluidcheck_obs()
        {
            
                    
            // Set the comp_fluidcheck_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_fluidcheck_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_fluidcheck_obsSpecified) {
                								
                // If the comp_fluidcheck_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_fluidcheck_obs);
                                
                this.comp_fluidcheck_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_fluidcheck_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_fluidcheck_obs.Text = ROIncomingTable.comp_fluidcheck_obs.Format(ROIncomingTable.comp_fluidcheck_obs.DefaultValue);
            		
            }
            
              this.comp_fluidcheck_obs.TextChanged += comp_fluidcheck_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_image()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_image DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_image is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_image();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_imageSpecified)
            {
                            
                // If the comp_image is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_image.ToString();
                
            }
            else
            {
                
                // comp_image is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_image.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_imageDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_image_obs()
        {
            
                    
            // Set the comp_image_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_image_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_image_obsSpecified) {
                								
                // If the comp_image_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_image_obs);
                                
                this.comp_image_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_image_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_image_obs.Text = ROIncomingTable.comp_image_obs.Format(ROIncomingTable.comp_image_obs.DefaultValue);
            		
            }
            
              this.comp_image_obs.TextChanged += comp_image_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_insertion()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_insertion DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_insertion is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_insertion();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_insertionSpecified)
            {
                            
                // If the comp_insertion is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_insertion.ToString();
                
            }
            else
            {
                
                // comp_insertion is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_insertion.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_insertionDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_insertion_obs()
        {
            
                    
            // Set the comp_insertion_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_insertion_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_insertion_obsSpecified) {
                								
                // If the comp_insertion_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_insertion_obs);
                                
                this.comp_insertion_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_insertion_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_insertion_obs.Text = ROIncomingTable.comp_insertion_obs.Format(ROIncomingTable.comp_insertion_obs.DefaultValue);
            		
            }
            
              this.comp_insertion_obs.TextChanged += comp_insertion_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_leaktest()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_leaktest DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_leaktest is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_leaktest();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_leaktestSpecified)
            {
                            
                // If the comp_leaktest is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_leaktest.ToString();
                
            }
            else
            {
                
                // comp_leaktest is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_leaktest.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_leaktestDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_leaktest_obs()
        {
            
                    
            // Set the comp_leaktest_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_leaktest_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_leaktest_obsSpecified) {
                								
                // If the comp_leaktest_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_leaktest_obs);
                                
                this.comp_leaktest_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_leaktest_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_leaktest_obs.Text = ROIncomingTable.comp_leaktest_obs.Format(ROIncomingTable.comp_leaktest_obs.DefaultValue);
            		
            }
            
              this.comp_leaktest_obs.TextChanged += comp_leaktest_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_lgconn()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_lgconn DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_lgconn is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_lgconn();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_lgconnSpecified)
            {
                            
                // If the comp_lgconn is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_lgconn.ToString();
                
            }
            else
            {
                
                // comp_lgconn is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_lgconn.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_lgconnDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_lgconn_obs()
        {
            
                    
            // Set the comp_lgconn_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_lgconn_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_lgconn_obsSpecified) {
                								
                // If the comp_lgconn_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_lgconn_obs);
                                
                this.comp_lgconn_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_lgconn_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_lgconn_obs.Text = ROIncomingTable.comp_lgconn_obs.Format(ROIncomingTable.comp_lgconn_obs.DefaultValue);
            		
            }
            
              this.comp_lgconn_obs.TextChanged += comp_lgconn_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_lightguide()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_lightguide DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_lightguide is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_lightguide();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_lightguideSpecified)
            {
                            
                // If the comp_lightguide is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_lightguide.ToString();
                
            }
            else
            {
                
                // comp_lightguide is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_lightguide.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_lightguideDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_lightguide_obs()
        {
            
                    
            // Set the comp_lightguide_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_lightguide_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_lightguide_obsSpecified) {
                								
                // If the comp_lightguide_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_lightguide_obs);
                                
                this.comp_lightguide_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_lightguide_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_lightguide_obs.Text = ROIncomingTable.comp_lightguide_obs.Format(ROIncomingTable.comp_lightguide_obs.DefaultValue);
            		
            }
            
              this.comp_lightguide_obs.TextChanged += comp_lightguide_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_lightlens()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_lightlens DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_lightlens is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_lightlens();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_lightlensSpecified)
            {
                            
                // If the comp_lightlens is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_lightlens.ToString();
                
            }
            else
            {
                
                // comp_lightlens is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_lightlens.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_lightlensDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_lightlens_obs()
        {
            
                    
            // Set the comp_lightlens_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_lightlens_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_lightlens_obsSpecified) {
                								
                // If the comp_lightlens_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_lightlens_obs);
                                
                this.comp_lightlens_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_lightlens_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_lightlens_obs.Text = ROIncomingTable.comp_lightlens_obs.Format(ROIncomingTable.comp_lightlens_obs.DefaultValue);
            		
            }
            
              this.comp_lightlens_obs.TextChanged += comp_lightlens_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_lightout()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_lightout DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_lightout is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_lightout();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_lightoutSpecified)
            {
                            
                // If the comp_lightout is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_lightout.ToString();
                
            }
            else
            {
                
                // comp_lightout is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_lightout.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_lightoutDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_lightout_obs()
        {
            
                    
            // Set the comp_lightout_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_lightout_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_lightout_obsSpecified) {
                								
                // If the comp_lightout_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_lightout_obs);
                                
                this.comp_lightout_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_lightout_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_lightout_obs.Text = ROIncomingTable.comp_lightout_obs.Format(ROIncomingTable.comp_lightout_obs.DefaultValue);
            		
            }
            
              this.comp_lightout_obs.TextChanged += comp_lightout_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_objective()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_objective DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_objective is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_objective();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_objectiveSpecified)
            {
                            
                // If the comp_objective is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_objective.ToString();
                
            }
            else
            {
                
                // comp_objective is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_objective.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_objectiveDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_objective_obs()
        {
            
                    
            // Set the comp_objective_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_objective_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_objective_obsSpecified) {
                								
                // If the comp_objective_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_objective_obs);
                                
                this.comp_objective_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_objective_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_objective_obs.Text = ROIncomingTable.comp_objective_obs.Format(ROIncomingTable.comp_objective_obs.DefaultValue);
            		
            }
            
              this.comp_objective_obs.TextChanged += comp_objective_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_ocular()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_ocular DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_ocular is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_ocular();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_ocularSpecified)
            {
                            
                // If the comp_ocular is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_ocular.ToString();
                
            }
            else
            {
                
                // comp_ocular is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_ocular.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_ocularDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_ocular_obs()
        {
            
                    
            // Set the comp_ocular_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_ocular_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_ocular_obsSpecified) {
                								
                // If the comp_ocular_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_ocular_obs);
                                
                this.comp_ocular_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_ocular_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_ocular_obs.Text = ROIncomingTable.comp_ocular_obs.Format(ROIncomingTable.comp_ocular_obs.DefaultValue);
            		
            }
            
              this.comp_ocular_obs.TextChanged += comp_ocular_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_other1()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_other1 DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_other1 is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_other1();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_other1Specified)
            {
                            
                // If the comp_other1 is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_other1.ToString();
                
            }
            else
            {
                
                // comp_other1 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_other1.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_other1DropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_other1_name()
        {
            
                    
            // Set the comp_other1_name TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_other1_name is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_other1_nameSpecified) {
                								
                // If the comp_other1_name is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_other1_name);
                                
                this.comp_other1_name.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_other1_name is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_other1_name.Text = ROIncomingTable.comp_other1_name.Format(ROIncomingTable.comp_other1_name.DefaultValue);
            		
            }
            
              this.comp_other1_name.TextChanged += comp_other1_name_TextChanged;
                               
        }
                
        public virtual void Setcomp_other1_obs()
        {
            
                    
            // Set the comp_other1_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_other1_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_other1_obsSpecified) {
                								
                // If the comp_other1_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_other1_obs);
                                
                this.comp_other1_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_other1_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_other1_obs.Text = ROIncomingTable.comp_other1_obs.Format(ROIncomingTable.comp_other1_obs.DefaultValue);
            		
            }
            
              this.comp_other1_obs.TextChanged += comp_other1_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_other2()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_other2 DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_other2 is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_other2();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_other2Specified)
            {
                            
                // If the comp_other2 is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_other2.ToString();
                
            }
            else
            {
                
                // comp_other2 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_other2.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_other2DropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_other2_name()
        {
            
                    
            // Set the comp_other2_name TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_other2_name is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_other2_nameSpecified) {
                								
                // If the comp_other2_name is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_other2_name);
                                
                this.comp_other2_name.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_other2_name is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_other2_name.Text = ROIncomingTable.comp_other2_name.Format(ROIncomingTable.comp_other2_name.DefaultValue);
            		
            }
            
              this.comp_other2_name.TextChanged += comp_other2_name_TextChanged;
                               
        }
                
        public virtual void Setcomp_other2_obs()
        {
            
                    
            // Set the comp_other2_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_other2_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_other2_obsSpecified) {
                								
                // If the comp_other2_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_other2_obs);
                                
                this.comp_other2_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_other2_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_other2_obs.Text = ROIncomingTable.comp_other2_obs.Format(ROIncomingTable.comp_other2_obs.DefaultValue);
            		
            }
            
              this.comp_other2_obs.TextChanged += comp_other2_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_suction()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_suction DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_suction is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_suction();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_suctionSpecified)
            {
                            
                // If the comp_suction is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_suction.ToString();
                
            }
            else
            {
                
                // comp_suction is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_suction.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_suctionDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_suction_obs()
        {
            
                    
            // Set the comp_suction_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_suction_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_suction_obsSpecified) {
                								
                // If the comp_suction_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_suction_obs);
                                
                this.comp_suction_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_suction_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_suction_obs.Text = ROIncomingTable.comp_suction_obs.Format(ROIncomingTable.comp_suction_obs.DefaultValue);
            		
            }
            
              this.comp_suction_obs.TextChanged += comp_suction_obs_TextChanged;
                               
        }
                
        public virtual void Setcomp_switches()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the comp_switches DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_switches is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Setcomp_switches();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.comp_switchesSpecified)
            {
                            
                // If the comp_switches is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.comp_switches.ToString();
                
            }
            else
            {
                
                // comp_switches is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = ROIncomingTable.comp_switches.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.Populatecomp_switchesDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_switches_obs()
        {
            
                    
            // Set the comp_switches_obs TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.comp_switches_obs is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.comp_switches_obsSpecified) {
                								
                // If the comp_switches_obs is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.comp_switches_obs);
                                
                this.comp_switches_obs.Text = formattedValue;
                   
            } 
            
            else {
            
                // comp_switches_obs is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.comp_switches_obs.Text = ROIncomingTable.comp_switches_obs.Format(ROIncomingTable.comp_switches_obs.DefaultValue);
            		
            }
            
              this.comp_switches_obs.TextChanged += comp_switches_obs_TextChanged;
                               
        }
                
        public virtual void Setin_angulation_l()
        {
            
                    
            // Set the in_angulation_l TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.in_angulation_l is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.in_angulation_lSpecified) {
                								
                // If the in_angulation_l is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.in_angulation_l);
                                
                this.in_angulation_l.Text = formattedValue;
                   
            } 
            
            else {
            
                // in_angulation_l is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.in_angulation_l.Text = ROIncomingTable.in_angulation_l.Format(ROIncomingTable.in_angulation_l.DefaultValue);
            		
            }
            
              this.in_angulation_l.TextChanged += in_angulation_l_TextChanged;
                               
        }
                
        public virtual void Setin_angulatoin_r()
        {
            
                    
            // Set the in_angulatoin_r TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.in_angulatoin_r is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.in_angulatoin_rSpecified) {
                								
                // If the in_angulatoin_r is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.in_angulatoin_r);
                                
                this.in_angulatoin_r.Text = formattedValue;
                   
            } 
            
            else {
            
                // in_angulatoin_r is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.in_angulatoin_r.Text = ROIncomingTable.in_angulatoin_r.Format(ROIncomingTable.in_angulatoin_r.DefaultValue);
            		
            }
            
              this.in_angulatoin_r.TextChanged += in_angulatoin_r_TextChanged;
                               
        }
                
        public virtual void Setincoming_d()
        {
            
                    
            // Set the incoming_d TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.incoming_d is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.incoming_dSpecified) {
                								
                // If the incoming_d is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.incoming_d);
                                
                this.incoming_d.Text = formattedValue;
                   
            } 
            
            else {
            
                // incoming_d is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.incoming_d.Text = ROIncomingTable.incoming_d.Format(ROIncomingTable.incoming_d.DefaultValue);
            		
            }
            
              this.incoming_d.TextChanged += incoming_d_TextChanged;
                               
        }
                
        public virtual void Setincoming_datetime()
        {
            
                    
            // Set the incoming_datetime TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.incoming_datetime is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the incoming_datetime is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.incoming_datetime, @"g");
                                
                this.incoming_datetime.Text = formattedValue;
                   
            } 
            
            else {
            
                // incoming_datetime is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.incoming_datetime.Text = EvaluateFormula("Now()", this.DataSource, @"g");
            		
            }
            
              this.incoming_datetime.TextChanged += incoming_datetime_TextChanged;
                               
        }
                
        public virtual void Setincoming_u()
        {
            
                    
            // Set the incoming_u TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.incoming_u is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.incoming_uSpecified) {
                								
                // If the incoming_u is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.incoming_u);
                                
                this.incoming_u.Text = formattedValue;
                   
            } 
            
            else {
            
                // incoming_u is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.incoming_u.Text = ROIncomingTable.incoming_u.Format(ROIncomingTable.incoming_u.DefaultValue);
            		
            }
            
              this.incoming_u.TextChanged += incoming_u_TextChanged;
                               
        }
                
        public virtual void Setout_angulation_d()
        {
            
                    
            // Set the out_angulation_d TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.out_angulation_d is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.out_angulation_dSpecified) {
                								
                // If the out_angulation_d is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.out_angulation_d);
                                
                this.out_angulation_d.Text = formattedValue;
                   
            } 
            
            else {
            
                // out_angulation_d is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.out_angulation_d.Text = ROIncomingTable.out_angulation_d.Format(ROIncomingTable.out_angulation_d.DefaultValue);
            		
            }
            
              this.out_angulation_d.TextChanged += out_angulation_d_TextChanged;
                               
        }
                
        public virtual void Setout_angulation_l()
        {
            
                    
            // Set the out_angulation_l TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.out_angulation_l is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.out_angulation_lSpecified) {
                								
                // If the out_angulation_l is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.out_angulation_l);
                                
                this.out_angulation_l.Text = formattedValue;
                   
            } 
            
            else {
            
                // out_angulation_l is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.out_angulation_l.Text = ROIncomingTable.out_angulation_l.Format(ROIncomingTable.out_angulation_l.DefaultValue);
            		
            }
            
              this.out_angulation_l.TextChanged += out_angulation_l_TextChanged;
                               
        }
                
        public virtual void Setoutgoing_d()
        {
            
                    
            // Set the outgoing_d TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.outgoing_d is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.outgoing_dSpecified) {
                								
                // If the outgoing_d is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.outgoing_d);
                                
                this.outgoing_d.Text = formattedValue;
                   
            } 
            
            else {
            
                // outgoing_d is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.outgoing_d.Text = ROIncomingTable.outgoing_d.Format(ROIncomingTable.outgoing_d.DefaultValue);
            		
            }
            
              this.outgoing_d.TextChanged += outgoing_d_TextChanged;
                               
        }
                
        public virtual void Setoutgoing_u()
        {
            
                    
            // Set the outgoing_u TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.outgoing_u is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.outgoing_uSpecified) {
                								
                // If the outgoing_u is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.outgoing_u);
                                
                this.outgoing_u.Text = formattedValue;
                   
            } 
            
            else {
            
                // outgoing_u is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.outgoing_u.Text = ROIncomingTable.outgoing_u.Format(ROIncomingTable.outgoing_u.DefaultValue);
            		
            }
            
              this.outgoing_u.TextChanged += outgoing_u_TextChanged;
                               
        }
                
        public virtual void Setrono2()
        {
            
                    
            // Set the rono TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.rono2 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.IsCreated) {
                								
                // If the rono is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
               string formattedValue = this.DataSource.rono.ToString();
                            
                this.rono2.Text = formattedValue;
                   
            } 
            
            else {
            
                // rono is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.rono2.Text = EvaluateFormula("URL(\"repairorders\")", this.DataSource);
            		
            }
            
              this.rono2.TextChanged += rono2_TextChanged;
                               
        }
                
        public virtual void Settech_notes()
        {
            
                    
            // Set the tech_notes TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.tech_notes is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.tech_notesSpecified) {
                								
                // If the tech_notes is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(ROIncomingTable.tech_notes);
                                
                this.tech_notes.Text = formattedValue;
                   
            } 
            
            else {
            
                // tech_notes is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.tech_notes.Text = ROIncomingTable.tech_notes.Format(ROIncomingTable.tech_notes.DefaultValue);
            		
            }
            
              this.tech_notes.TextChanged += tech_notes_TextChanged;
                               
        }
                
        public virtual void Settechnician_id()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the technician_id DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.ROIncoming database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.ROIncoming record retrieved from the database.
            // this.technician_id is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.Settechnician_id();
            // and add your own custom code before or after the call to the base function.

            
            // Default Value could also be NULL.
            if (this.DataSource != null && this.DataSource.IsCreated)
            {
                
                selectedValue = this.DataSource.technician_id.ToString();
                
            }
            else
            {
                
            
                selectedValue = EvaluateFormula("URL(\"technician_id\")");
                
            }

                        
                  
            // Populate the item(s) to the control
            
            this.Populatetechnician_idDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void Setcomp_awLabel()
                  {
                  
                        this.comp_awLabel.Text = EvaluateFormula("\"A/W System\"");
                      
                    
        }
                
        public virtual void Setcomp_bendingLabel()
                  {
                  
                        this.comp_bendingLabel.Text = EvaluateFormula("\"Bending Section\"");
                      
                    
        }
                
        public virtual void Setcomp_bendrubberLabel()
                  {
                  
                        this.comp_bendrubberLabel.Text = EvaluateFormula("\"Bending Rubber\"");
                      
                    
        }
                
        public virtual void Setcomp_biopsyLabel()
                  {
                  
                        this.comp_biopsyLabel.Text = EvaluateFormula("\"Biopsy Channel\"");
                      
                    
        }
                
        public virtual void Setcomp_bootsLabel()
                  {
                  
                        this.comp_bootsLabel.Text = EvaluateFormula("\"Boots\"");
                      
                    
        }
                
        public virtual void Setcomp_ccoverLabel()
                  {
                  
                        this.comp_ccoverLabel.Text = EvaluateFormula("\"C-Cover\"");
                      
                    
        }
                
        public virtual void Setcomp_controlbodyLabel()
                  {
                  
                        this.comp_controlbodyLabel.Text = EvaluateFormula("\"Control Body\"");
                      
                    
        }
                
        public virtual void Setcomp_controlLabel()
                  {
                  
                        this.comp_controlLabel.Text = EvaluateFormula("\"Control Knobs\"");
                      
                    
        }
                
        public virtual void Setcomp_elevationLabel()
                  {
                  
                        this.comp_elevationLabel.Text = EvaluateFormula("\"Elevation Sys\"");
                      
                    
        }
                
        public virtual void Setcomp_fluidcheckLabel()
                  {
                  
                        this.comp_fluidcheckLabel.Text = EvaluateFormula("\"Fluid Check\"");
                      
                    
        }
                
        public virtual void Setcomp_imageLabel()
                  {
                  
                        this.comp_imageLabel.Text = EvaluateFormula("\"Image\"");
                      
                    
        }
                
        public virtual void Setcomp_insertionLabel()
                  {
                  
                        this.comp_insertionLabel.Text = EvaluateFormula("\"Insertion Tube\"");
                      
                    
        }
                
        public virtual void Setcomp_leaktestLabel()
                  {
                  
                        this.comp_leaktestLabel.Text = EvaluateFormula("\"Leak Test\"");
                      
                    
        }
                
        public virtual void Setcomp_lgconnLabel()
                  {
                  
                        this.comp_lgconnLabel.Text = EvaluateFormula("\"LG Connector\"");
                      
                    
        }
                
        public virtual void Setcomp_lightguideLabel()
                  {
                  
                        this.comp_lightguideLabel.Text = EvaluateFormula("\"Light Guide Tube\"");
                      
                    
        }
                
        public virtual void Setcomp_lightlensLabel()
                  {
                  
                        this.comp_lightlensLabel.Text = EvaluateFormula("\"Light Guide Lens\"");
                      
                    
        }
                
        public virtual void Setcomp_lightoutLabel()
                  {
                  
                        this.comp_lightoutLabel.Text = EvaluateFormula("\"Light Output\"");
                      
                    
        }
                
        public virtual void Setcomp_objectiveLabel()
                  {
                  
                        this.comp_objectiveLabel.Text = EvaluateFormula("\"Objective Lens\"");
                      
                    
        }
                
        public virtual void Setcomp_ocularLabel()
                  {
                  
                        this.comp_ocularLabel.Text = EvaluateFormula("\"Ocular\"");
                      
                    
        }
                
        public virtual void Setcomp_suctionLabel()
                  {
                  
                        this.comp_suctionLabel.Text = EvaluateFormula("\"Suction Sys\"");
                      
                    
        }
                
        public virtual void Setcomp_switchesLabel()
                  {
                  
                        this.comp_switchesLabel.Text = EvaluateFormula("\" Switches 1-4\"");
                      
                    
        }
                
        public virtual void Setin_angulation_lLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.in_angulation_lLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void Setin_angulatoin_rLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.in_angulatoin_rLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void Setincoming_dLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.incoming_dLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void Setincoming_uLabel()
                  {
                  
                      //Code for the text property is generated inside the .aspx file. 
                      //To override this property you can uncomment the following property and add you own value.
                      //this.incoming_uLabel.Text = "Some value";
                    
                    
        }
                
        public virtual void Setout_angulation_dLabel()
                  {
                  
                    
        }
                
        public virtual void Setout_angulation_lLabel()
                  {
                  
                    
        }
                
        public virtual void Setoutgoing_dLabel()
                  {
                  
                    
        }
                
        public virtual void Setoutgoing_uLabel()
                  {
                  
                    
        }
                
        public virtual void Settech_notesLabel()
                  {
                  
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        RepairOrdersRecordControl parentCtrl;
      
            parentCtrl = (RepairOrdersRecordControl)MiscUtils.GetParentControlObject(this, "RepairOrdersRecordControl");
          
        if (parentCtrl != null && parentCtrl.DataSource == null) {
        // Load the record if it is not loaded yet.
        parentCtrl.LoadData();
        }
        if (parentCtrl == null || parentCtrl.DataSource == null) {
        // Get the error message from the application resource file.
        throw new Exception(Page.GetResourceValue("Err:NoParentRecId", "OEMConversion"));
        }
        
          this.DataSource.rono = parentCtrl.DataSource.RONo;
        
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            Getcomp_aw();
            Getcomp_aw_obs();
            Getcomp_bending();
            Getcomp_bending_obs();
            Getcomp_bending_obs1();
            Getcomp_bendrubber();
            Getcomp_biopsy();
            Getcomp_biopsy_obs();
            Getcomp_boots();
            Getcomp_boots_obs();
            Getcomp_ccover();
            Getcomp_ccover_obs();
            Getcomp_control();
            Getcomp_control_obs();
            Getcomp_controlbody();
            Getcomp_controlbody_obs();
            Getcomp_elevation();
            Getcomp_elevation_obs();
            Getcomp_fluidcheck();
            Getcomp_fluidcheck_obs();
            Getcomp_image();
            Getcomp_image_obs();
            Getcomp_insertion();
            Getcomp_insertion_obs();
            Getcomp_leaktest();
            Getcomp_leaktest_obs();
            Getcomp_lgconn();
            Getcomp_lgconn_obs();
            Getcomp_lightguide();
            Getcomp_lightguide_obs();
            Getcomp_lightlens();
            Getcomp_lightlens_obs();
            Getcomp_lightout();
            Getcomp_lightout_obs();
            Getcomp_objective();
            Getcomp_objective_obs();
            Getcomp_ocular();
            Getcomp_ocular_obs();
            Getcomp_other1();
            Getcomp_other1_name();
            Getcomp_other1_obs();
            Getcomp_other2();
            Getcomp_other2_name();
            Getcomp_other2_obs();
            Getcomp_suction();
            Getcomp_suction_obs();
            Getcomp_switches();
            Getcomp_switches_obs();
            Getin_angulation_l();
            Getin_angulatoin_r();
            Getincoming_d();
            Getincoming_datetime();
            Getincoming_u();
            Getout_angulation_d();
            Getout_angulation_l();
            Getoutgoing_d();
            Getoutgoing_u();
            Getrono2();
            Gettech_notes();
            Gettechnician_id();
        }
        
        
        public virtual void Getcomp_aw()
        {
         // Retrieve the value entered by the user on the comp_aw ASP:DropDownList, and
            // save it into the comp_aw field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_aw), ROIncomingTable.comp_aw);			
                			 
        }
                
        public virtual void Getcomp_aw_obs()
        {
            
            // Retrieve the value entered by the user on the comp_aw_obs ASP:TextBox, and
            // save it into the comp_aw_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_aw_obs.Text, ROIncomingTable.comp_aw_obs);							
                          
                      
        }
                
        public virtual void Getcomp_bending()
        {
         // Retrieve the value entered by the user on the comp_bending ASP:DropDownList, and
            // save it into the comp_bending field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_bending), ROIncomingTable.comp_bending);			
                			 
        }
                
        public virtual void Getcomp_bending_obs()
        {
            
            // Retrieve the value entered by the user on the comp_bending_obs ASP:TextBox, and
            // save it into the comp_bending_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_bending_obs.Text, ROIncomingTable.comp_bending_obs);							
                          
                      
        }
                
        public virtual void Getcomp_bending_obs1()
        {
            
            // Retrieve the value entered by the user on the comp_bending_obs ASP:TextBox, and
            // save it into the comp_bending_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_bending_obs1.Text, ROIncomingTable.comp_bending_obs);							
                          
                      
        }
                
        public virtual void Getcomp_bendrubber()
        {
         // Retrieve the value entered by the user on the comp_bendrubber ASP:DropDownList, and
            // save it into the comp_bendrubber field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_bendrubber), ROIncomingTable.comp_bendrubber);			
                			 
        }
                
        public virtual void Getcomp_biopsy()
        {
         // Retrieve the value entered by the user on the comp_biopsy ASP:DropDownList, and
            // save it into the comp_biopsy field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_biopsy), ROIncomingTable.comp_biopsy);			
                			 
        }
                
        public virtual void Getcomp_biopsy_obs()
        {
            
            // Retrieve the value entered by the user on the comp_biopsy_obs ASP:TextBox, and
            // save it into the comp_biopsy_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_biopsy_obs.Text, ROIncomingTable.comp_biopsy_obs);							
                          
                      
        }
                
        public virtual void Getcomp_boots()
        {
         // Retrieve the value entered by the user on the comp_boots ASP:DropDownList, and
            // save it into the comp_boots field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_boots), ROIncomingTable.comp_boots);			
                			 
        }
                
        public virtual void Getcomp_boots_obs()
        {
            
            // Retrieve the value entered by the user on the comp_boots_obs ASP:TextBox, and
            // save it into the comp_boots_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_boots_obs.Text, ROIncomingTable.comp_boots_obs);							
                          
                      
        }
                
        public virtual void Getcomp_ccover()
        {
         // Retrieve the value entered by the user on the comp_ccover ASP:DropDownList, and
            // save it into the comp_ccover field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_ccover), ROIncomingTable.comp_ccover);			
                			 
        }
                
        public virtual void Getcomp_ccover_obs()
        {
            
            // Retrieve the value entered by the user on the comp_ccover_obs ASP:TextBox, and
            // save it into the comp_ccover_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_ccover_obs.Text, ROIncomingTable.comp_ccover_obs);							
                          
                      
        }
                
        public virtual void Getcomp_control()
        {
         // Retrieve the value entered by the user on the comp_control ASP:DropDownList, and
            // save it into the comp_control field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_control), ROIncomingTable.comp_control);			
                			 
        }
                
        public virtual void Getcomp_control_obs()
        {
            
            // Retrieve the value entered by the user on the comp_control_obs ASP:TextBox, and
            // save it into the comp_control_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_control_obs.Text, ROIncomingTable.comp_control_obs);							
                          
                      
        }
                
        public virtual void Getcomp_controlbody()
        {
         // Retrieve the value entered by the user on the comp_controlbody ASP:DropDownList, and
            // save it into the comp_controlbody field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_controlbody), ROIncomingTable.comp_controlbody);			
                			 
        }
                
        public virtual void Getcomp_controlbody_obs()
        {
            
            // Retrieve the value entered by the user on the comp_controlbody_obs ASP:TextBox, and
            // save it into the comp_controlbody_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_controlbody_obs.Text, ROIncomingTable.comp_controlbody_obs);							
                          
                      
        }
                
        public virtual void Getcomp_elevation()
        {
         // Retrieve the value entered by the user on the comp_elevation ASP:DropDownList, and
            // save it into the comp_elevation field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_elevation), ROIncomingTable.comp_elevation);			
                			 
        }
                
        public virtual void Getcomp_elevation_obs()
        {
            
            // Retrieve the value entered by the user on the comp_elevation_obs ASP:TextBox, and
            // save it into the comp_elevation_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_elevation_obs.Text, ROIncomingTable.comp_elevation_obs);							
                          
                      
        }
                
        public virtual void Getcomp_fluidcheck()
        {
         // Retrieve the value entered by the user on the comp_fluidcheck ASP:DropDownList, and
            // save it into the comp_fluidcheck field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_fluidcheck), ROIncomingTable.comp_fluidcheck);			
                			 
        }
                
        public virtual void Getcomp_fluidcheck_obs()
        {
            
            // Retrieve the value entered by the user on the comp_fluidcheck_obs ASP:TextBox, and
            // save it into the comp_fluidcheck_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_fluidcheck_obs.Text, ROIncomingTable.comp_fluidcheck_obs);							
                          
                      
        }
                
        public virtual void Getcomp_image()
        {
         // Retrieve the value entered by the user on the comp_image ASP:DropDownList, and
            // save it into the comp_image field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_image), ROIncomingTable.comp_image);			
                			 
        }
                
        public virtual void Getcomp_image_obs()
        {
            
            // Retrieve the value entered by the user on the comp_image_obs ASP:TextBox, and
            // save it into the comp_image_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_image_obs.Text, ROIncomingTable.comp_image_obs);							
                          
                      
        }
                
        public virtual void Getcomp_insertion()
        {
         // Retrieve the value entered by the user on the comp_insertion ASP:DropDownList, and
            // save it into the comp_insertion field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_insertion), ROIncomingTable.comp_insertion);			
                			 
        }
                
        public virtual void Getcomp_insertion_obs()
        {
            
            // Retrieve the value entered by the user on the comp_insertion_obs ASP:TextBox, and
            // save it into the comp_insertion_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_insertion_obs.Text, ROIncomingTable.comp_insertion_obs);							
                          
                      
        }
                
        public virtual void Getcomp_leaktest()
        {
         // Retrieve the value entered by the user on the comp_leaktest ASP:DropDownList, and
            // save it into the comp_leaktest field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_leaktest), ROIncomingTable.comp_leaktest);			
                			 
        }
                
        public virtual void Getcomp_leaktest_obs()
        {
            
            // Retrieve the value entered by the user on the comp_leaktest_obs ASP:TextBox, and
            // save it into the comp_leaktest_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_leaktest_obs.Text, ROIncomingTable.comp_leaktest_obs);							
                          
                      
        }
                
        public virtual void Getcomp_lgconn()
        {
         // Retrieve the value entered by the user on the comp_lgconn ASP:DropDownList, and
            // save it into the comp_lgconn field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_lgconn), ROIncomingTable.comp_lgconn);			
                			 
        }
                
        public virtual void Getcomp_lgconn_obs()
        {
            
            // Retrieve the value entered by the user on the comp_lgconn_obs ASP:TextBox, and
            // save it into the comp_lgconn_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_lgconn_obs.Text, ROIncomingTable.comp_lgconn_obs);							
                          
                      
        }
                
        public virtual void Getcomp_lightguide()
        {
         // Retrieve the value entered by the user on the comp_lightguide ASP:DropDownList, and
            // save it into the comp_lightguide field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_lightguide), ROIncomingTable.comp_lightguide);			
                			 
        }
                
        public virtual void Getcomp_lightguide_obs()
        {
            
            // Retrieve the value entered by the user on the comp_lightguide_obs ASP:TextBox, and
            // save it into the comp_lightguide_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_lightguide_obs.Text, ROIncomingTable.comp_lightguide_obs);							
                          
                      
        }
                
        public virtual void Getcomp_lightlens()
        {
         // Retrieve the value entered by the user on the comp_lightlens ASP:DropDownList, and
            // save it into the comp_lightlens field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_lightlens), ROIncomingTable.comp_lightlens);			
                			 
        }
                
        public virtual void Getcomp_lightlens_obs()
        {
            
            // Retrieve the value entered by the user on the comp_lightlens_obs ASP:TextBox, and
            // save it into the comp_lightlens_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_lightlens_obs.Text, ROIncomingTable.comp_lightlens_obs);							
                          
                      
        }
                
        public virtual void Getcomp_lightout()
        {
         // Retrieve the value entered by the user on the comp_lightout ASP:DropDownList, and
            // save it into the comp_lightout field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_lightout), ROIncomingTable.comp_lightout);			
                			 
        }
                
        public virtual void Getcomp_lightout_obs()
        {
            
            // Retrieve the value entered by the user on the comp_lightout_obs ASP:TextBox, and
            // save it into the comp_lightout_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_lightout_obs.Text, ROIncomingTable.comp_lightout_obs);							
                          
                      
        }
                
        public virtual void Getcomp_objective()
        {
         // Retrieve the value entered by the user on the comp_objective ASP:DropDownList, and
            // save it into the comp_objective field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_objective), ROIncomingTable.comp_objective);			
                			 
        }
                
        public virtual void Getcomp_objective_obs()
        {
            
            // Retrieve the value entered by the user on the comp_objective_obs ASP:TextBox, and
            // save it into the comp_objective_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_objective_obs.Text, ROIncomingTable.comp_objective_obs);							
                          
                      
        }
                
        public virtual void Getcomp_ocular()
        {
         // Retrieve the value entered by the user on the comp_ocular ASP:DropDownList, and
            // save it into the comp_ocular field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_ocular), ROIncomingTable.comp_ocular);			
                			 
        }
                
        public virtual void Getcomp_ocular_obs()
        {
            
            // Retrieve the value entered by the user on the comp_ocular_obs ASP:TextBox, and
            // save it into the comp_ocular_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_ocular_obs.Text, ROIncomingTable.comp_ocular_obs);							
                          
                      
        }
                
        public virtual void Getcomp_other1()
        {
         // Retrieve the value entered by the user on the comp_other1 ASP:DropDownList, and
            // save it into the comp_other1 field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_other1), ROIncomingTable.comp_other1);			
                			 
        }
                
        public virtual void Getcomp_other1_name()
        {
            
            // Retrieve the value entered by the user on the comp_other1_name ASP:TextBox, and
            // save it into the comp_other1_name field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_other1_name.Text, ROIncomingTable.comp_other1_name);							
                          
                      
        }
                
        public virtual void Getcomp_other1_obs()
        {
            
            // Retrieve the value entered by the user on the comp_other1_obs ASP:TextBox, and
            // save it into the comp_other1_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_other1_obs.Text, ROIncomingTable.comp_other1_obs);							
                          
                      
        }
                
        public virtual void Getcomp_other2()
        {
         // Retrieve the value entered by the user on the comp_other2 ASP:DropDownList, and
            // save it into the comp_other2 field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_other2), ROIncomingTable.comp_other2);			
                			 
        }
                
        public virtual void Getcomp_other2_name()
        {
            
            // Retrieve the value entered by the user on the comp_other2_name ASP:TextBox, and
            // save it into the comp_other2_name field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_other2_name.Text, ROIncomingTable.comp_other2_name);							
                          
                      
        }
                
        public virtual void Getcomp_other2_obs()
        {
            
            // Retrieve the value entered by the user on the comp_other2_obs ASP:TextBox, and
            // save it into the comp_other2_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_other2_obs.Text, ROIncomingTable.comp_other2_obs);							
                          
                      
        }
                
        public virtual void Getcomp_suction()
        {
         // Retrieve the value entered by the user on the comp_suction ASP:DropDownList, and
            // save it into the comp_suction field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_suction), ROIncomingTable.comp_suction);			
                			 
        }
                
        public virtual void Getcomp_suction_obs()
        {
            
            // Retrieve the value entered by the user on the comp_suction_obs ASP:TextBox, and
            // save it into the comp_suction_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_suction_obs.Text, ROIncomingTable.comp_suction_obs);							
                          
                      
        }
                
        public virtual void Getcomp_switches()
        {
         // Retrieve the value entered by the user on the comp_switches ASP:DropDownList, and
            // save it into the comp_switches field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.comp_switches), ROIncomingTable.comp_switches);			
                			 
        }
                
        public virtual void Getcomp_switches_obs()
        {
            
            // Retrieve the value entered by the user on the comp_switches_obs ASP:TextBox, and
            // save it into the comp_switches_obs field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.comp_switches_obs.Text, ROIncomingTable.comp_switches_obs);							
                          
                      
        }
                
        public virtual void Getin_angulation_l()
        {
            
            // Retrieve the value entered by the user on the in_angulation_l ASP:TextBox, and
            // save it into the in_angulation_l field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.in_angulation_l.Text, ROIncomingTable.in_angulation_l);							
                          
                      
        }
                
        public virtual void Getin_angulatoin_r()
        {
            
            // Retrieve the value entered by the user on the in_angulatoin_r ASP:TextBox, and
            // save it into the in_angulatoin_r field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.in_angulatoin_r.Text, ROIncomingTable.in_angulatoin_r);							
                          
                      
        }
                
        public virtual void Getincoming_d()
        {
            
            // Retrieve the value entered by the user on the incoming_d ASP:TextBox, and
            // save it into the incoming_d field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.incoming_d.Text, ROIncomingTable.incoming_d);							
                          
                      
        }
                
        public virtual void Getincoming_datetime()
        {
            
            // Retrieve the value entered by the user on the incoming_datetime ASP:TextBox, and
            // save it into the incoming_datetime field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            // Parse will also validate the date to ensure it is of the proper format
            // and a valid date.  The format is verified based on the current culture 
            // settings including the order of month, day and year and the separator character.
            // Parse throws an exception if the date is invalid.
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.incoming_datetime.Text, ROIncomingTable.incoming_datetime);							
                          
                      
        }
                
        public virtual void Getincoming_u()
        {
            
            // Retrieve the value entered by the user on the incoming_u ASP:TextBox, and
            // save it into the incoming_u field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.incoming_u.Text, ROIncomingTable.incoming_u);							
                          
                      
        }
                
        public virtual void Getout_angulation_d()
        {
            
            // Retrieve the value entered by the user on the out_angulation_d ASP:TextBox, and
            // save it into the out_angulation_d field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.out_angulation_d.Text, ROIncomingTable.out_angulation_d);							
                          
                      
        }
                
        public virtual void Getout_angulation_l()
        {
            
            // Retrieve the value entered by the user on the out_angulation_l ASP:TextBox, and
            // save it into the out_angulation_l field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.out_angulation_l.Text, ROIncomingTable.out_angulation_l);							
                          
                      
        }
                
        public virtual void Getoutgoing_d()
        {
            
            // Retrieve the value entered by the user on the outgoing_d ASP:TextBox, and
            // save it into the outgoing_d field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.outgoing_d.Text, ROIncomingTable.outgoing_d);							
                          
                      
        }
                
        public virtual void Getoutgoing_u()
        {
            
            // Retrieve the value entered by the user on the outgoing_u ASP:TextBox, and
            // save it into the outgoing_u field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.outgoing_u.Text, ROIncomingTable.outgoing_u);							
                          
                      
        }
                
        public virtual void Getrono2()
        {
            
            // Retrieve the value entered by the user on the rono ASP:TextBox, and
            // save it into the rono field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.rono2.Text, ROIncomingTable.rono);							
                          
                      
        }
                
        public virtual void Gettech_notes()
        {
            
            // Retrieve the value entered by the user on the tech_notes ASP:TextBox, and
            // save it into the tech_notes field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.tech_notes.Text, ROIncomingTable.tech_notes);							
                          
                      
        }
                
        public virtual void Gettechnician_id()
        {
         // Retrieve the value entered by the user on the technician_id ASP:DropDownList, and
            // save it into the technician_id field in DataSource DatabaseAYS_OEM%dbo.ROIncoming record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.technician_id), ROIncomingTable.technician_id);			
                			 
        }
                

      // To customize, override this method in ROIncomingRecordControl1.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            ROIncomingTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

            
            return null;
            
        }
        
        
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            ROIncomingTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
      string selectedRecordInRepairOrdersRecordControl = HttpContext.Current.Session["ROIncomingRecordControl1WhereClause"] as string;
      
      if (selectedRecordInRepairOrdersRecordControl != null && KeyValue.IsXmlKey(selectedRecordInRepairOrdersRecordControl))
      {
      KeyValue selectedRecordKeyValue = KeyValue.XmlToKey(selectedRecordInRepairOrdersRecordControl);
      
      if (selectedRecordKeyValue != null && selectedRecordKeyValue.ContainsColumn(ROIncomingTable.rono))
      {
      wc.iAND(ROIncomingTable.rono, BaseFilter.ComparisonOperator.EqualsTo, selectedRecordKeyValue.GetColumnValue(ROIncomingTable.rono).ToString());
      }
    
      }
    
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          ROIncomingTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        public virtual WhereClause CreateWhereClause_comp_awDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_bendingDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_bendrubberDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_biopsyDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_bootsDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_ccoverDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_controlDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_controlbodyDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_elevationDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_fluidcheckDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_imageDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_insertionDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_leaktestDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_lgconnDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_lightguideDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_lightlensDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_lightoutDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_objectiveDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_ocularDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_other1DropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_other2DropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_suctionDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_comp_switchesDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            
            WhereClause wc = new WhereClause();
            return wc;
            				
        }
        
        public virtual WhereClause CreateWhereClause_technician_idDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Technicians table.
            // Examples:
            // wc.iAND(TechniciansTable.TechName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(TechniciansTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            filter.AddFilter(new BaseClasses.Data.ColumnJoinFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.TechniciansTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Technicians_.technician_id"), new BaseClasses.Data.IdentifierAliasInfo(@"Technicians_", null), BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.LoginTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"login_.technician_id"), new BaseClasses.Data.IdentifierAliasInfo(@"login_", null),  BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
            if (EvaluateFormula("UserId()", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.LoginTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"login_.login_id"), EvaluateFormula("UserId()", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("UserId()", false) == "--PLEASE_SELECT--" || EvaluateFormula("UserId()", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        // Fill the comp_aw list.
        protected virtual void Populatecomp_awDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_aw.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_aw.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_aw.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_aw.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_awDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_awDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_aw, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_aw, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_aw.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_aw.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_aw.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_aw, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_aw, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_aw, ROIncomingTable.comp_aw.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_aw.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_aw, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_bending list.
        protected virtual void Populatecomp_bendingDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_bending.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_bending.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_bending.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_bending.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_bendingDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_bendingDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_bending, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_bending, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_bending.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_bending.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_bending.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_bending, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_bending, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_bending, ROIncomingTable.comp_bending.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_bending.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_bending, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_bendrubber list.
        protected virtual void Populatecomp_bendrubberDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_bendrubber.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_bendrubber.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_bendrubber.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_bendrubber.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail "), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_bendrubberDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_bendrubberDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_bendrubber, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_bendrubber, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_bendrubber.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_bendrubber.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_bendrubber.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_bendrubber, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_bendrubber, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_bendrubber, ROIncomingTable.comp_bendrubber.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_bendrubber.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_bendrubber, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_biopsy list.
        protected virtual void Populatecomp_biopsyDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_biopsy.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_biopsy.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_biopsy.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_biopsy.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_biopsyDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_biopsyDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_biopsy, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_biopsy, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_biopsy.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_biopsy.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_biopsy.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_biopsy, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_biopsy, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_biopsy, ROIncomingTable.comp_biopsy.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_biopsy.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_biopsy, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_boots list.
        protected virtual void Populatecomp_bootsDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_boots.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_boots.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_boots.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_boots.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_bootsDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_bootsDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_boots, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_boots, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_boots.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_boots.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_boots.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_boots, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_boots, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_boots, ROIncomingTable.comp_boots.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_boots.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_boots, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_ccover list.
        protected virtual void Populatecomp_ccoverDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_ccover.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_ccover.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_ccover.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_ccover.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_ccoverDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_ccoverDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_ccover, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_ccover, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_ccover.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_ccover.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_ccover.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_ccover, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_ccover, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_ccover, ROIncomingTable.comp_ccover.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_ccover.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_ccover, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_control list.
        protected virtual void Populatecomp_controlDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_control.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_control.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_control.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_control.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_controlDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_controlDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_control, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_control, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_control.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_control.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_control.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_control, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_control, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_control, ROIncomingTable.comp_control.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_control.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_control, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_controlbody list.
        protected virtual void Populatecomp_controlbodyDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_controlbody.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_controlbody.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_controlbody.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_controlbody.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_controlbodyDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_controlbodyDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_controlbody, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_controlbody, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_controlbody.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_controlbody.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_controlbody.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_controlbody, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_controlbody, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_controlbody, ROIncomingTable.comp_controlbody.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_controlbody.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_controlbody, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_elevation list.
        protected virtual void Populatecomp_elevationDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_elevation.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_elevation.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_elevation.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_elevation.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_elevationDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_elevationDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_elevation, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_elevation, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_elevation.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_elevation.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_elevation.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_elevation, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_elevation, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_elevation, ROIncomingTable.comp_elevation.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_elevation.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_elevation, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_fluidcheck list.
        protected virtual void Populatecomp_fluidcheckDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_fluidcheck.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_fluidcheck.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_fluidcheck.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_fluidcheck.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_fluidcheckDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_fluidcheckDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_fluidcheck, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_fluidcheck, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_fluidcheck.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_fluidcheck.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_fluidcheck.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_fluidcheck, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_fluidcheck, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_fluidcheck, ROIncomingTable.comp_fluidcheck.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_fluidcheck.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_fluidcheck, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_image list.
        protected virtual void Populatecomp_imageDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_image.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_image.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_image.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_image.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_imageDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_imageDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_image, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_image, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_image.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_image.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_image.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_image, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_image, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_image, ROIncomingTable.comp_image.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_image.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_image, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_insertion list.
        protected virtual void Populatecomp_insertionDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_insertion.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_insertion.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_insertion.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_insertion.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_insertionDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_insertionDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_insertion, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_insertion, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_insertion.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_insertion.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_insertion.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_insertion, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_insertion, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_insertion, ROIncomingTable.comp_insertion.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_insertion.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_insertion, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_leaktest list.
        protected virtual void Populatecomp_leaktestDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_leaktest.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_leaktest.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_leaktest.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_leaktest.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  
            // Skip step 2 and 3 because no need to load data from database and insert data
            
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_leaktest, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_leaktest, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_leaktest, ROIncomingTable.comp_leaktest.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_leaktest.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_leaktest, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_lgconn list.
        protected virtual void Populatecomp_lgconnDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_lgconn.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_lgconn.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_lgconn.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_lgconn.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_lgconnDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_lgconnDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_lgconn, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_lgconn, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_lgconn.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_lgconn.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_lgconn.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_lgconn, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_lgconn, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_lgconn, ROIncomingTable.comp_lgconn.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_lgconn.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_lgconn, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_lightguide list.
        protected virtual void Populatecomp_lightguideDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_lightguide.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_lightguide.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_lightguide.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_lightguide.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_lightguideDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_lightguideDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_lightguide, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_lightguide, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_lightguide.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_lightguide.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_lightguide.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_lightguide, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_lightguide, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_lightguide, ROIncomingTable.comp_lightguide.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_lightguide.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_lightguide, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_lightlens list.
        protected virtual void Populatecomp_lightlensDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_lightlens.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_lightlens.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_lightlens.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_lightlens.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_lightlensDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_lightlensDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_lightlens, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_lightlens, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_lightlens.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_lightlens.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_lightlens.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_lightlens, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_lightlens, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_lightlens, ROIncomingTable.comp_lightlens.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_lightlens.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_lightlens, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_lightout list.
        protected virtual void Populatecomp_lightoutDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_lightout.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_lightout.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_lightout.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_lightout.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_lightoutDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_lightoutDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_lightout, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_lightout, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_lightout.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_lightout.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_lightout.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_lightout, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_lightout, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_lightout, ROIncomingTable.comp_lightout.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_lightout.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_lightout, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_objective list.
        protected virtual void Populatecomp_objectiveDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_objective.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_objective.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_objective.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_objective.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_objectiveDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_objectiveDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_objective, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_objective, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_objective.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_objective.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_objective.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_objective, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_objective, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_objective, ROIncomingTable.comp_objective.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_objective.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_objective, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_ocular list.
        protected virtual void Populatecomp_ocularDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_ocular.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_ocular.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_ocular.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_ocular.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_ocularDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_ocularDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_ocular, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_ocular, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_ocular.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_ocular.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_ocular.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_ocular, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_ocular, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_ocular, ROIncomingTable.comp_ocular.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_ocular.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_ocular, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_other1 list.
        protected virtual void Populatecomp_other1DropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_other1.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_other1.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_other1.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_other1.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_other1DropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_other1DropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_other1, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_other1, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_other1.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_other1.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_other1.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_other1, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_other1, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_other1, ROIncomingTable.comp_other1.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_other1.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_other1, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_other2 list.
        protected virtual void Populatecomp_other2DropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_other2.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_other2.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_other2.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_other2.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_other2DropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_other2DropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_other2, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_other2, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_other2.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_other2.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_other2.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_other2, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_other2, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_other2, ROIncomingTable.comp_other2.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_other2.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_other2, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_suction list.
        protected virtual void Populatecomp_suctionDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_suction.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_suction.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_suction.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_suction.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_suctionDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_suctionDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_suction, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_suction, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_suction.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_suction.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_suction.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_suction, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_suction, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_suction, ROIncomingTable.comp_suction.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_suction.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_suction, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the comp_switches list.
        protected virtual void Populatecomp_switchesDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.comp_switches.Items.Clear();
            
            // 1. Setup the static list items        
            
                this.comp_switches.Items.Add(new ListItem(this.Page.ExpandResourceValue("{Txt:PleaseSelect}"), "--PLEASE_SELECT--"));
              
                this.comp_switches.Items.Add(new ListItem(this.Page.ExpandResourceValue("Pass"), "1"));
              
                this.comp_switches.Items.Add(new ListItem(this.Page.ExpandResourceValue("Fail"), "2"));
              		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_comp_switchesDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_comp_switchesDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                

            // Create the ORDER BY clause to sort based on the displayed value.
            OrderBy orderBy = new OrderBy(false, false);
            orderBy.Add(ROIncomingTable.comp_switches, OrderByItem.OrderDir.Asc);

            ArrayList listDuplicates = new ArrayList();

            // Populate the dropdown list in the sort order specified above.
            if (wc.RunQuery)
            {
                foreach (string itemValue in ROIncomingTable.GetValues(ROIncomingTable.comp_switches, wc, orderBy, maxItems)) {
                    // Create the dropdown list item and add it to the list.
                    string fvalue = ROIncomingTable.comp_switches.Format(itemValue);
                    if (fvalue == null || fvalue.Trim() == "") fvalue = itemValue;				

                    if (fvalue == null) {
                        fvalue = "";
                    }

                    fvalue = fvalue.Trim();

                    if ( fvalue.Length > 50 ) {
                         fvalue = fvalue.Substring(0, 50) + "...";
                    }

                    ListItem dupItem = this.comp_switches.Items.FindByText(fvalue);
								
                    if (dupItem != null) {
                        listDuplicates.Add(fvalue);
                        if (!string.IsNullOrEmpty(dupItem.Value))
                        {
                            dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                        }
                    }

                    ListItem newItem = new ListItem(fvalue, itemValue);
                    this.comp_switches.Items.Add(newItem);

                    if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(itemValue)) {
                        newItem.Text = fvalue + " (ID " + itemValue.Substring(0, Math.Min(itemValue.Length,38)) + ")";
                    }
                }
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.comp_switches, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_switches, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.comp_switches, ROIncomingTable.comp_switches.Format(selectedValue)))
            {
                string fvalue = ROIncomingTable.comp_switches.Format(selectedValue);
                if (fvalue == null || fvalue.Trim() == "") fvalue = selectedValue;
                MiscUtils.ResetSelectedItem(this.comp_switches, new ListItem(fvalue, selectedValue));
            }
                    
        }
                  
        // Fill the technician_id list.
        protected virtual void Populatetechnician_idDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.technician_id.Items.Clear();
            
            // 1. Setup the static list items        
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_technician_idDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_technician_idDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(TechniciansTable.TechName, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the technician_idDropDownList.
            TechniciansRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = TechniciansTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (TechniciansRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.technician_idSpecified) 
                        {
                            cvalue = itemValue.technician_id.ToString().ToString();
                            if (counter < maxItems && this.technician_id.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("= Technicians.TechName", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.technician_id.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.technician_id.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.technician_id, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.technician_id, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Technicians.technician_id = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(TechniciansTable.technician_id, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    TechniciansRecord[] rc = TechniciansTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        TechniciansRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.technician_idSpecified)
                            cvalue = itemValue.technician_id.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("= Technicians.TechName", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.technician_id, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        protected virtual void comp_aw_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_aw.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_aw.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_aw.Items.Add(new ListItem(displayText, val));
	            this.comp_aw.SelectedIndex = this.comp_aw.Items.Count - 1;
	            this.Page.Session.Remove(comp_aw.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_aw.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_bending_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_bending.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_bending.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_bending.Items.Add(new ListItem(displayText, val));
	            this.comp_bending.SelectedIndex = this.comp_bending.Items.Count - 1;
	            this.Page.Session.Remove(comp_bending.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_bending.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_bendrubber_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_bendrubber.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_bendrubber.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_bendrubber.Items.Add(new ListItem(displayText, val));
	            this.comp_bendrubber.SelectedIndex = this.comp_bendrubber.Items.Count - 1;
	            this.Page.Session.Remove(comp_bendrubber.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_bendrubber.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_biopsy_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_biopsy.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_biopsy.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_biopsy.Items.Add(new ListItem(displayText, val));
	            this.comp_biopsy.SelectedIndex = this.comp_biopsy.Items.Count - 1;
	            this.Page.Session.Remove(comp_biopsy.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_biopsy.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_boots_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_boots.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_boots.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_boots.Items.Add(new ListItem(displayText, val));
	            this.comp_boots.SelectedIndex = this.comp_boots.Items.Count - 1;
	            this.Page.Session.Remove(comp_boots.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_boots.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_ccover_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_ccover.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_ccover.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_ccover.Items.Add(new ListItem(displayText, val));
	            this.comp_ccover.SelectedIndex = this.comp_ccover.Items.Count - 1;
	            this.Page.Session.Remove(comp_ccover.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_ccover.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_control_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_control.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_control.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_control.Items.Add(new ListItem(displayText, val));
	            this.comp_control.SelectedIndex = this.comp_control.Items.Count - 1;
	            this.Page.Session.Remove(comp_control.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_control.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_controlbody_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_controlbody.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_controlbody.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_controlbody.Items.Add(new ListItem(displayText, val));
	            this.comp_controlbody.SelectedIndex = this.comp_controlbody.Items.Count - 1;
	            this.Page.Session.Remove(comp_controlbody.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_controlbody.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_elevation_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_elevation.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_elevation.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_elevation.Items.Add(new ListItem(displayText, val));
	            this.comp_elevation.SelectedIndex = this.comp_elevation.Items.Count - 1;
	            this.Page.Session.Remove(comp_elevation.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_elevation.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_fluidcheck_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_fluidcheck.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_fluidcheck.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_fluidcheck.Items.Add(new ListItem(displayText, val));
	            this.comp_fluidcheck.SelectedIndex = this.comp_fluidcheck.Items.Count - 1;
	            this.Page.Session.Remove(comp_fluidcheck.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_fluidcheck.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_image_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_image.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_image.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_image.Items.Add(new ListItem(displayText, val));
	            this.comp_image.SelectedIndex = this.comp_image.Items.Count - 1;
	            this.Page.Session.Remove(comp_image.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_image.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_insertion_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_insertion.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_insertion.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_insertion.Items.Add(new ListItem(displayText, val));
	            this.comp_insertion.SelectedIndex = this.comp_insertion.Items.Count - 1;
	            this.Page.Session.Remove(comp_insertion.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_insertion.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_leaktest_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_leaktest.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_leaktest.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_leaktest.Items.Add(new ListItem(displayText, val));
	            this.comp_leaktest.SelectedIndex = this.comp_leaktest.Items.Count - 1;
	            this.Page.Session.Remove(comp_leaktest.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_leaktest.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_lgconn_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_lgconn.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_lgconn.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_lgconn.Items.Add(new ListItem(displayText, val));
	            this.comp_lgconn.SelectedIndex = this.comp_lgconn.Items.Count - 1;
	            this.Page.Session.Remove(comp_lgconn.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_lgconn.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_lightguide_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_lightguide.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_lightguide.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_lightguide.Items.Add(new ListItem(displayText, val));
	            this.comp_lightguide.SelectedIndex = this.comp_lightguide.Items.Count - 1;
	            this.Page.Session.Remove(comp_lightguide.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_lightguide.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_lightlens_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_lightlens.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_lightlens.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_lightlens.Items.Add(new ListItem(displayText, val));
	            this.comp_lightlens.SelectedIndex = this.comp_lightlens.Items.Count - 1;
	            this.Page.Session.Remove(comp_lightlens.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_lightlens.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_lightout_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_lightout.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_lightout.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_lightout.Items.Add(new ListItem(displayText, val));
	            this.comp_lightout.SelectedIndex = this.comp_lightout.Items.Count - 1;
	            this.Page.Session.Remove(comp_lightout.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_lightout.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_objective_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_objective.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_objective.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_objective.Items.Add(new ListItem(displayText, val));
	            this.comp_objective.SelectedIndex = this.comp_objective.Items.Count - 1;
	            this.Page.Session.Remove(comp_objective.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_objective.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_ocular_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_ocular.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_ocular.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_ocular.Items.Add(new ListItem(displayText, val));
	            this.comp_ocular.SelectedIndex = this.comp_ocular.Items.Count - 1;
	            this.Page.Session.Remove(comp_ocular.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_ocular.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_other1_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_other1.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_other1.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_other1.Items.Add(new ListItem(displayText, val));
	            this.comp_other1.SelectedIndex = this.comp_other1.Items.Count - 1;
	            this.Page.Session.Remove(comp_other1.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_other1.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_other2_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_other2.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_other2.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_other2.Items.Add(new ListItem(displayText, val));
	            this.comp_other2.SelectedIndex = this.comp_other2.Items.Count - 1;
	            this.Page.Session.Remove(comp_other2.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_other2.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_suction_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_suction.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_suction.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_suction.Items.Add(new ListItem(displayText, val));
	            this.comp_suction.SelectedIndex = this.comp_suction.Items.Count - 1;
	            this.Page.Session.Remove(comp_suction.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_suction.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_switches_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[comp_switches.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[comp_switches.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.comp_switches.Items.Add(new ListItem(displayText, val));
	            this.comp_switches.SelectedIndex = this.comp_switches.Items.Count - 1;
	            this.Page.Session.Remove(comp_switches.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(comp_switches.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void technician_id_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[technician_id.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[technician_id.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.technician_id.Items.Add(new ListItem(displayText, val));
	            this.technician_id.SelectedIndex = this.technician_id.Items.Count - 1;
	            this.Page.Session.Remove(technician_id.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(technician_id.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void comp_aw_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_bending_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_bending_obs1_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_biopsy_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_boots_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_ccover_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_control_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_controlbody_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_elevation_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_fluidcheck_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_image_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_insertion_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_leaktest_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_lgconn_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_lightguide_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_lightlens_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_lightout_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_objective_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_ocular_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_other1_name_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_other1_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_other2_name_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_other2_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_suction_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void comp_switches_obs_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void in_angulation_l_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void in_angulatoin_r_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void incoming_d_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void incoming_datetime_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void incoming_u_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void out_angulation_d_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void out_angulation_l_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void outgoing_d_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void outgoing_u_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void rono2_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void tech_notes_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseROIncomingRecordControl1_Rec"];
            }
            set {
                this.ViewState["BaseROIncomingRecordControl1_Rec"] = value;
            }
        }
        
        public ROIncomingRecord DataSource {
            get {
                return (ROIncomingRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.DropDownList comp_aw {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_aw");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_aw_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_aw_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_awLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_awLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_bending {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_bending");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_bending_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_bending_obs");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_bending_obs1 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_bending_obs1");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_bendingLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_bendingLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_bendrubber {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_bendrubber");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_bendrubberLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_bendrubberLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_biopsy {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_biopsy");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_biopsy_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_biopsy_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_biopsyLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_biopsyLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_boots {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_boots");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_boots_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_boots_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_bootsLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_bootsLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_ccover {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_ccover");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_ccover_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_ccover_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_ccoverLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_ccoverLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_control {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_control");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_control_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_control_obs");
            }
        }
            
        public System.Web.UI.WebControls.DropDownList comp_controlbody {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_controlbody");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_controlbody_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_controlbody_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_controlbodyLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_controlbodyLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal comp_controlLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_controlLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_elevation {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_elevation");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_elevation_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_elevation_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_elevationLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_elevationLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_fluidcheck {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_fluidcheck");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_fluidcheck_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_fluidcheck_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_fluidcheckLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_fluidcheckLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_image {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_image");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_image_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_image_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_imageLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_imageLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_insertion {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_insertion");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_insertion_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_insertion_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_insertionLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_insertionLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_leaktest {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_leaktest");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_leaktest_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_leaktest_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_leaktestLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_leaktestLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_lgconn {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lgconn");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_lgconn_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lgconn_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_lgconnLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lgconnLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_lightguide {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightguide");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_lightguide_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightguide_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_lightguideLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightguideLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_lightlens {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightlens");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_lightlens_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightlens_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_lightlensLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightlensLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_lightout {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightout");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_lightout_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightout_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_lightoutLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_lightoutLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_objective {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_objective");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_objective_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_objective_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_objectiveLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_objectiveLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_ocular {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_ocular");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_ocular_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_ocular_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_ocularLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_ocularLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_other1 {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_other1");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_other1_name {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_other1_name");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_other1_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_other1_obs");
            }
        }
            
        public System.Web.UI.WebControls.DropDownList comp_other2 {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_other2");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_other2_name {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_other2_name");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_other2_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_other2_obs");
            }
        }
            
        public System.Web.UI.WebControls.DropDownList comp_suction {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_suction");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_suction_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_suction_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_suctionLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_suctionLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList comp_switches {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_switches");
            }
        }
            
        public System.Web.UI.WebControls.TextBox comp_switches_obs {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_switches_obs");
            }
        }
            
        public System.Web.UI.WebControls.Literal comp_switchesLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "comp_switchesLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox in_angulation_l {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "in_angulation_l");
            }
        }
            
        public System.Web.UI.WebControls.Literal in_angulation_lLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "in_angulation_lLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox in_angulatoin_r {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "in_angulatoin_r");
            }
        }
            
        public System.Web.UI.WebControls.Literal in_angulatoin_rLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "in_angulatoin_rLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox incoming_d {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "incoming_d");
            }
        }
            
        public System.Web.UI.WebControls.TextBox incoming_datetime {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "incoming_datetime");
            }
        }
            
        public System.Web.UI.WebControls.Literal incoming_dLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "incoming_dLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox incoming_u {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "incoming_u");
            }
        }
            
        public System.Web.UI.WebControls.Literal incoming_uLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "incoming_uLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox out_angulation_d {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "out_angulation_d");
            }
        }
            
        public System.Web.UI.WebControls.Literal out_angulation_dLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "out_angulation_dLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox out_angulation_l {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "out_angulation_l");
            }
        }
            
        public System.Web.UI.WebControls.Literal out_angulation_lLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "out_angulation_lLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox outgoing_d {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "outgoing_d");
            }
        }
            
        public System.Web.UI.WebControls.Literal outgoing_dLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "outgoing_dLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox outgoing_u {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "outgoing_u");
            }
        }
            
        public System.Web.UI.WebControls.Literal outgoing_uLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "outgoing_uLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox rono2 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "rono2");
            }
        }
            
        public System.Web.UI.WebControls.TextBox tech_notes {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "tech_notes");
            }
        }
            
        public System.Web.UI.WebControls.Literal tech_notesLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "tech_notesLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList technician_id {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "technician_id");
            }
        }
            
        public System.Web.UI.WebControls.Literal Title14 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title14");
            }
        }
        
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        ROIncomingRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    ROIncomingRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual ROIncomingRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
            return new ROIncomingRecord();
            
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  
// Base class for the VendorsRecordControl control on the Edit_RepairOrders page.
// Do not modify this class. Instead override any method in VendorsRecordControl.
public class BaseVendorsRecordControl : OEMConversion.UI.BaseApplicationRecordControl
{
        public BaseVendorsRecordControl()
        {
            this.Init += Control_Init;
            this.Load += Control_Load;
            this.PreRender += Control_PreRender;
            this.EvaluateFormulaDelegate = new DataSource.EvaluateFormulaDelegate(this.EvaluateFormula);
        }

        // To customize, override this method in VendorsRecordControl.
        protected virtual void Control_Init(object sender, System.EventArgs e)
        {
        
            
            string url = "";
            if (url == null) url = ""; //avoid warning on VS
            // Setup the filter and search events.
                
        }

        // To customize, override this method in VendorsRecordControl.
        protected virtual void Control_Load(object sender, System.EventArgs e)
        {      
        
              // Setup the pagination events.	  
                     
        
              // Register the event handlers.

          
              this.VendNo.SelectedIndexChanged += VendNo_SelectedIndexChanged;
            
              this.VendProvince.SelectedIndexChanged += VendProvince_SelectedIndexChanged;
            
              this.VendContactName.SelectedIndexChanged += VendContactName_SelectedIndexChanged;
            
              this.VendAddress1.TextChanged += VendAddress1_TextChanged;
            
              this.VendAddress2.TextChanged += VendAddress2_TextChanged;
            
              this.VendCity.TextChanged += VendCity_TextChanged;
            
              this.VendEmail.TextChanged += VendEmail_TextChanged;
            
              this.VendFax.TextChanged += VendFax_TextChanged;
            
              this.VendPhoneBusiness.TextChanged += VendPhoneBusiness_TextChanged;
            
              this.VendPhoneTollFree.TextChanged += VendPhoneTollFree_TextChanged;
            
              this.VendPostalCode.TextChanged += VendPostalCode_TextChanged;
            
        }

        public virtual void LoadData()  
        {
            // Load the data from the database into the DataSource DatabaseAYS_OEM%dbo.Vendors record.
            // It is better to make changes to functions called by LoadData such as
            // CreateWhereClause, rather than making changes here.
            
        
            // The RecordUniqueId is set the first time a record is loaded, and is
            // used during a PostBack to load the record.
            if (this.RecordUniqueId != null && this.RecordUniqueId.Length > 0) {
              
                this.DataSource = VendorsTable.GetRecord(this.RecordUniqueId, true);
              
                return;
            }
      
            // This is the first time a record is being retrieved from the database.
            // So create a Where Clause based on the staic Where clause specified
            // on the Query wizard and the dynamic part specified by the end user
            // on the search and filter controls (if any).
            
            WhereClause wc = this.CreateWhereClause();
            
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "VendorsRecordControlPanel");
            if (Panel != null){
                Panel.Visible = true;
            }
            
            // If there is no Where clause, then simply create a new, blank record.
            
            if (wc == null || !(wc.RunQuery)) {
                this.DataSource = new VendorsRecord();
            
                if (Panel != null){
                    Panel.Visible = false;
                }
              
                return;
            }
          
            // Retrieve the record from the database.  It is possible
            VendorsRecord[] recList = VendorsTable.GetRecords(wc, null, 0, 2);
            if (recList.Length == 0) {
                // There is no data for this Where clause.
                wc.RunQuery = false;
                
                if (Panel != null){
                    Panel.Visible = false;
                }
                
                return;
            }
            
            // Set DataSource based on record retrieved from the database.
            this.DataSource = VendorsTable.GetRecord(recList[0].GetID().ToXmlString(), true);
                  
        }

        public override void DataBind()
        {
            // The DataBind method binds the user interface controls to the values
            // from the database record.  To do this, it calls the Set methods for 
            // each of the field displayed on the webpage.  It is better to make 
            // changes in the Set methods, rather than making changes here.
            
            base.DataBind();
            
            this.ClearControlsFromSession();
            
            // Make sure that the DataSource is initialized.
            
            if (this.DataSource == null) {
             //This is to make sure all the controls will be invisible if no record is present in the cell
             
                return;
            }
              
            // LoadData for DataSource for chart and report if they exist
          
            // Store the checksum. The checksum is used to
            // ensure the record was not changed by another user.
            if (this.DataSource.GetCheckSumValue() != null)
                this.CheckSum = this.DataSource.GetCheckSumValue().Value;
            

            // Call the Set methods for each controls on the panel
        
                
                SetVendAddress1();
                SetVendAddress1Label();
                SetVendAddress2();
                SetVendAddress2Label();
                SetVendCity();
                SetVendCityLabel();
                SetVendContactNameLabel();
                SetVendEmail();
                SetVendEmailLabel();
                SetVendFax();
                SetVendFaxLabel();
                SetVendNameLabel();
                SetVendNo();
                SetVendPhoneBusiness();
                SetVendPhoneBusinessLabel();
                SetVendPhoneTollFree();
                SetVendPhoneTollFreeLabel();
                SetVendPostalCode();
                SetVendPostalCodeLabel();
                SetVendProvince();
                SetVendProvinceLabel();
                SetVendContactName();

      

            this.IsNewRecord = true;
          
            if (this.DataSource.IsCreated) {
                this.IsNewRecord = false;
              
                if (this.DataSource.GetID() != null)
                    this.RecordUniqueId = this.DataSource.GetID().ToXmlString();
              
            }
            

            // Now load data for each record and table child UI controls.
            // Ordering is important because child controls get 
            // their parent ids from their parent UI controls.
            bool shouldResetControl = false;
            if (shouldResetControl) { }; // prototype usage to void compiler warnings
            
        }
        
        
        public virtual void SetVendAddress1()
        {
            
                    
            // Set the VendAddress1 TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendAddress1 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.VendAddress1Specified) {
                								
                // If the VendAddress1 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(VendorsTable.VendAddress1);
                                
                this.VendAddress1.Text = formattedValue;
                   
            } 
            
            else {
            
                // VendAddress1 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.VendAddress1.Text = VendorsTable.VendAddress1.Format(VendorsTable.VendAddress1.DefaultValue);
            		
            }
            
              this.VendAddress1.TextChanged += VendAddress1_TextChanged;
                               
        }
                
        public virtual void SetVendAddress2()
        {
            
                    
            // Set the VendAddress2 TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendAddress2 is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.VendAddress2Specified) {
                								
                // If the VendAddress2 is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(VendorsTable.VendAddress2);
                                
                this.VendAddress2.Text = formattedValue;
                   
            } 
            
            else {
            
                // VendAddress2 is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.VendAddress2.Text = VendorsTable.VendAddress2.Format(VendorsTable.VendAddress2.DefaultValue);
            		
            }
            
              this.VendAddress2.TextChanged += VendAddress2_TextChanged;
                               
        }
                
        public virtual void SetVendCity()
        {
            
                    
            // Set the VendCity TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendCity is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.VendCitySpecified) {
                								
                // If the VendCity is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(VendorsTable.VendCity);
                                
                this.VendCity.Text = formattedValue;
                   
            } 
            
            else {
            
                // VendCity is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.VendCity.Text = VendorsTable.VendCity.Format(VendorsTable.VendCity.DefaultValue);
            		
            }
            
              this.VendCity.TextChanged += VendCity_TextChanged;
                               
        }
                
        public virtual void SetVendEmail()
        {
            
                    
            // Set the VendEmail TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendEmail is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.VendEmailSpecified) {
                								
                // If the VendEmail is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(VendorsTable.VendEmail);
                                
                this.VendEmail.Text = formattedValue;
                   
            } 
            
            else {
            
                // VendEmail is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.VendEmail.Text = VendorsTable.VendEmail.Format(VendorsTable.VendEmail.DefaultValue);
            		
            }
            
              this.VendEmail.TextChanged += VendEmail_TextChanged;
                               
        }
                
        public virtual void SetVendFax()
        {
            
                    
            // Set the VendFax TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendFax is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.VendFaxSpecified) {
                								
                // If the VendFax is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(VendorsTable.VendFax);
                                
                this.VendFax.Text = formattedValue;
                   
            } 
            
            else {
            
                // VendFax is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.VendFax.Text = VendorsTable.VendFax.Format(VendorsTable.VendFax.DefaultValue);
            		
            }
            
              this.VendFax.TextChanged += VendFax_TextChanged;
                               
        }
                
        public virtual void SetVendNo()
        {
            
            // Set AutoPostBack to true so that when the control value is changed, to refresh VendContactName controls
            this.VendNo.AutoPostBack = true;
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the VendNo DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendNo is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetVendNo();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.VendNoSpecified)
            {
                            
                // If the VendNo is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.VendNo.ToString();
                
            }
            else
            {
                
                // VendNo is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = VendorsTable.VendNo.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateVendNoDropDownList(selectedValue, 1000);              
                
                  
        }
                
        public virtual void SetVendPhoneBusiness()
        {
            
                    
            // Set the VendPhoneBusiness TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendPhoneBusiness is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.VendPhoneBusinessSpecified) {
                								
                // If the VendPhoneBusiness is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(VendorsTable.VendPhoneBusiness);
                                
                this.VendPhoneBusiness.Text = formattedValue;
                   
            } 
            
            else {
            
                // VendPhoneBusiness is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.VendPhoneBusiness.Text = VendorsTable.VendPhoneBusiness.Format(VendorsTable.VendPhoneBusiness.DefaultValue);
            		
            }
            
              this.VendPhoneBusiness.TextChanged += VendPhoneBusiness_TextChanged;
                               
        }
                
        public virtual void SetVendPhoneTollFree()
        {
            
                    
            // Set the VendPhoneTollFree TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendPhoneTollFree is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.VendPhoneTollFreeSpecified) {
                								
                // If the VendPhoneTollFree is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(VendorsTable.VendPhoneTollFree);
                                
                this.VendPhoneTollFree.Text = formattedValue;
                   
            } 
            
            else {
            
                // VendPhoneTollFree is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.VendPhoneTollFree.Text = VendorsTable.VendPhoneTollFree.Format(VendorsTable.VendPhoneTollFree.DefaultValue);
            		
            }
            
              this.VendPhoneTollFree.TextChanged += VendPhoneTollFree_TextChanged;
                               
        }
                
        public virtual void SetVendPostalCode()
        {
            
                    
            // Set the VendPostalCode TextBox on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.

            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendPostalCode is the ASP:TextBox on the webpage.
                  
            if (this.DataSource != null && this.DataSource.VendPostalCodeSpecified) {
                								
                // If the VendPostalCode is non-NULL, then format the value.
                // The Format method will use the Display Format
               string formattedValue = this.DataSource.Format(VendorsTable.VendPostalCode);
                                
                this.VendPostalCode.Text = formattedValue;
                   
            } 
            
            else {
            
                // VendPostalCode is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
        
              this.VendPostalCode.Text = VendorsTable.VendPostalCode.Format(VendorsTable.VendPostalCode.DefaultValue);
            		
            }
            
              this.VendPostalCode.TextChanged += VendPostalCode_TextChanged;
                               
        }
                
        public virtual void SetVendProvince()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the VendProvince DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendProvince is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetVendProvince();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.VendProvinceSpecified)
            {
                            
                // If the VendProvince is non-NULL, then format the value.
                // The Format method will return the Display Foreign Key As (DFKA) value
                selectedValue = this.DataSource.VendProvince;
                
            }
            else
            {
                
                // VendProvince is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = VendorsTable.VendProvince.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateVendProvinceDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetVendContactName()
        {
            				
        
        
            string selectedValue = null;
            
            // figure out the selectedValue
                  
            
            
            // Set the VendContactName DropDownList on the webpage with value from the
            // DatabaseAYS_OEM%dbo.Vendors database record.
            
            // this.DataSource is the DatabaseAYS_OEM%dbo.Vendors record retrieved from the database.
            // this.VendContactName is the ASP:DropDownList on the webpage.
            
            // You can modify this method directly, or replace it with a call to
            //     base.SetVendContactName();
            // and add your own custom code before or after the call to the base function.

            
            if (this.DataSource != null && this.DataSource.VendContactNameSpecified)
            {
                            
                // If the VendContactName is non-NULL, then format the value.
                // The Format method will use the Display Format
                selectedValue = this.DataSource.VendContactName;
                
            }
            else
            {
                
                // VendContactName is NULL in the database, so use the Default Value.  
                // Default Value could also be NULL.
                if (this.DataSource != null && this.DataSource.IsCreated)
                    selectedValue = null;
                else
                    selectedValue = VendorsTable.VendContactName.DefaultValue;
                				
            }			
                            
                  
            // Populate the item(s) to the control
            
            this.PopulateVendContactNameDropDownList(selectedValue, 100);              
                
                  
        }
                
        public virtual void SetVendAddress1Label()
                  {
                  
                        this.VendAddress1Label.Text = EvaluateFormula("\"Address\"");
                      
                    
        }
                
        public virtual void SetVendAddress2Label()
                  {
                  
                        this.VendAddress2Label.Text = EvaluateFormula("\"Address 2\"");
                      
                    
        }
                
        public virtual void SetVendCityLabel()
                  {
                  
                        this.VendCityLabel.Text = EvaluateFormula("\"City\"");
                      
                    
        }
                
        public virtual void SetVendContactNameLabel()
                  {
                  
                        this.VendContactNameLabel.Text = EvaluateFormula("\"Vendor Contact\"");
                      
                    
        }
                
        public virtual void SetVendEmailLabel()
                  {
                  
                        this.VendEmailLabel.Text = EvaluateFormula("\"Email\"");
                      
                    
        }
                
        public virtual void SetVendFaxLabel()
                  {
                  
                        this.VendFaxLabel.Text = EvaluateFormula("\"Fax\"");
                      
                    
        }
                
        public virtual void SetVendNameLabel()
                  {
                  
                        this.VendNameLabel.Text = EvaluateFormula("\"Vendor Name\"");
                      
                    
        }
                
        public virtual void SetVendPhoneBusinessLabel()
                  {
                  
                        this.VendPhoneBusinessLabel.Text = EvaluateFormula("\"Phone Business\"");
                      
                    
        }
                
        public virtual void SetVendPhoneTollFreeLabel()
                  {
                  
                        this.VendPhoneTollFreeLabel.Text = EvaluateFormula("\"Phone Toll Free\"");
                      
                    
        }
                
        public virtual void SetVendPostalCodeLabel()
                  {
                  
                        this.VendPostalCodeLabel.Text = EvaluateFormula("\"Zip Code\"");
                      
                    
        }
                
        public virtual void SetVendProvinceLabel()
                  {
                  
                        this.VendProvinceLabel.Text = EvaluateFormula("\"State\"");
                      
                    
        }
                
        public BaseClasses.Data.DataSource.EvaluateFormulaDelegate EvaluateFormulaDelegate;

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS, FormulaEvaluator e)
        {
            if (e == null)
                e = new FormulaEvaluator();

            e.Variables.Clear();
            // add variables for formula evaluation
            if (variables != null)
            {
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, object>> enumerator = variables.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    e.Variables.Add(enumerator.Current.Key, enumerator.Current.Value);
                }
            }
            
            
            if (includeDS)
            {
                
            }
            
            // All variables referred to in the formula are expected to be
            // properties of the DataSource.  For example, referring to
            // UnitPrice as a variable will refer to DataSource.UnitPrice
            if (dataSourceForEvaluate == null)
                e.DataSource = this.DataSource;
            else
                e.DataSource = dataSourceForEvaluate;

            // Define the calling control.  This is used to add other 
            // related table and record controls as variables.
            e.CallingControl = this;

            object resultObj = e.Evaluate(formula);
            if (resultObj == null)
                return "";
            
            if ( !string.IsNullOrEmpty(format) && (string.IsNullOrEmpty(formula) || formula.IndexOf("Format(") < 0) )
                return FormulaUtils.Format(resultObj, format);
            else
                return resultObj.ToString();
        }
                
        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables, bool includeDS)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format, System.Collections.Generic.IDictionary<string, object> variables)
        {
          return EvaluateFormula(formula, dataSourceForEvaluate, format, variables, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, string format)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, format, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate, System.Collections.Generic.IDictionary<string, object> variables, FormulaEvaluator e)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, variables, true, e);
        }

        public virtual string EvaluateFormula(string formula, BaseClasses.Data.BaseRecord dataSourceForEvaluate)
        {
          return this.EvaluateFormula(formula, dataSourceForEvaluate, null, null, true, null);
        }

        public virtual string EvaluateFormula(string formula, bool includeDS)
        {
          return this.EvaluateFormula(formula, null, null, null, includeDS, null);
        }

        public virtual string EvaluateFormula(string formula)
        {
          return this.EvaluateFormula(formula, null, null, null, true, null);
        }
        
      
        public virtual void ResetControl()
        {
          
        }
        

        public virtual void RegisterPostback()
        {
            
        }
    
        

        public virtual void SaveData()
        {
            // Saves the associated record in the database.
            // SaveData calls Validate and Get methods - so it may be more appropriate to
            // customize those methods.

            // 1. Load the existing record from the database. Since we save the entire record, this ensures 
            // that fields that are not displayed are also properly initialized.
            this.LoadData();
        
            // The checksum is used to ensure the record was not changed by another user.
            if (this.DataSource != null && this.DataSource.GetCheckSumValue() != null) {
                if (this.CheckSum != null && this.CheckSum != this.DataSource.GetCheckSumValue().Value) {
                    throw new Exception(Page.GetResourceValue("Err:RecChangedByOtherUser", "OEMConversion"));
                }
            }
        
            System.Web.UI.WebControls.Panel Panel = (System.Web.UI.WebControls.Panel)MiscUtils.FindControlRecursively(this, "VendorsRecordControlPanel");
            if ( (Panel != null && !Panel.Visible) || this.DataSource == null){
                return;
            }
          
          
            // 2. Perform any custom validation.
            this.Validate();

            // 3. Set the values in the record with data from UI controls.
            // This calls the Get() method for each of the user interface controls.
            this.GetUIData();
   
            // 4. Save in the database.
            // We should not save the record if the data did not change. This
            // will save a database hit and avoid triggering any database triggers.
            
            if (this.DataSource.IsAnyValueChanged) {
                // Save record to database but do not commit yet.
                // Auto generated ids are available after saving for use by child (dependent) records.
                this.DataSource.Save();
                
            }
            
      
            // update session or cookie by formula
             		  
      
            // Setting the DataChanged to True results in the page being refreshed with
            // the most recent data from the database.  This happens in PreRender event
            // based on the current sort, search and filter criteria.
            this.DataChanged = true;
            this.ResetData = true;
            
            this.CheckSum = "";
            // For Master-Detail relationships, save data on the Detail table(s)            
          
        }

        public virtual void GetUIData()
        {
            // The GetUIData method retrieves the updated values from the user interface 
            // controls into a database record in preparation for saving or updating.
            // To do this, it calls the Get methods for each of the field displayed on 
            // the webpage.  It is better to make changes in the Get methods, rather 
            // than making changes here.
      
            // Call the Get methods for each of the user interface controls.
        
            GetVendAddress1();
            GetVendAddress2();
            GetVendCity();
            GetVendEmail();
            GetVendFax();
            GetVendNo();
            GetVendPhoneBusiness();
            GetVendPhoneTollFree();
            GetVendPostalCode();
            GetVendProvince();
            GetVendContactName();
        }
        
        
        public virtual void GetVendAddress1()
        {
            
            // Retrieve the value entered by the user on the VendAddress1 ASP:TextBox, and
            // save it into the VendAddress1 field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.VendAddress1.Text, VendorsTable.VendAddress1);							
                          
                      
        }
                
        public virtual void GetVendAddress2()
        {
            
            // Retrieve the value entered by the user on the VendAddress2 ASP:TextBox, and
            // save it into the VendAddress2 field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.VendAddress2.Text, VendorsTable.VendAddress2);							
                          
                      
        }
                
        public virtual void GetVendCity()
        {
            
            // Retrieve the value entered by the user on the VendCity ASP:TextBox, and
            // save it into the VendCity field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.VendCity.Text, VendorsTable.VendCity);							
                          
                      
        }
                
        public virtual void GetVendEmail()
        {
            
            // Retrieve the value entered by the user on the VendEmail ASP:TextBox, and
            // save it into the VendEmail field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.VendEmail.Text, VendorsTable.VendEmail);							
                          
                      
        }
                
        public virtual void GetVendFax()
        {
            
            // Retrieve the value entered by the user on the VendFax ASP:TextBox, and
            // save it into the VendFax field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.VendFax.Text, VendorsTable.VendFax);							
                          
                      
        }
                
        public virtual void GetVendNo()
        {
         // Retrieve the value entered by the user on the VendNo ASP:DropDownList, and
            // save it into the VendNo field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.VendNo), VendorsTable.VendNo);			
                			 
        }
                
        public virtual void GetVendPhoneBusiness()
        {
            
            // Retrieve the value entered by the user on the VendPhoneBusiness ASP:TextBox, and
            // save it into the VendPhoneBusiness field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.VendPhoneBusiness.Text, VendorsTable.VendPhoneBusiness);							
                          
                      
        }
                
        public virtual void GetVendPhoneTollFree()
        {
            
            // Retrieve the value entered by the user on the VendPhoneTollFree ASP:TextBox, and
            // save it into the VendPhoneTollFree field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.VendPhoneTollFree.Text, VendorsTable.VendPhoneTollFree);							
                          
                      
        }
                
        public virtual void GetVendPostalCode()
        {
            
            // Retrieve the value entered by the user on the VendPostalCode ASP:TextBox, and
            // save it into the VendPostalCode field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
                    
            // Save the value to data source
            this.DataSource.Parse(this.VendPostalCode.Text, VendorsTable.VendPostalCode);							
                          
                      
        }
                
        public virtual void GetVendProvince()
        {
         // Retrieve the value entered by the user on the VendProvince ASP:DropDownList, and
            // save it into the VendProvince field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.VendProvince), VendorsTable.VendProvince);			
                			 
        }
                
        public virtual void GetVendContactName()
        {
         // Retrieve the value entered by the user on the VendContactName ASP:DropDownList, and
            // save it into the VendContactName field in DataSource DatabaseAYS_OEM%dbo.Vendors record.
            
            // Custom validation should be performed in Validate, not here.
            
            this.DataSource.Parse(MiscUtils.GetValueSelectedPageRequest(this.VendContactName), VendorsTable.VendContactName);			
                			 
        }
                

      // To customize, override this method in VendorsRecordControl.
      
        public virtual WhereClause CreateWhereClause()
         
        {
    
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            WhereClause wc;
            VendorsTable.Instance.InnerFilter = null;
            wc = new WhereClause();
            
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.

              
            // Get the static clause defined at design time on the Record Panel Wizard
            WhereClause qc = this.CreateQueryClause();
            if (qc != null) {
                wc.iAND(qc);
            }
            
            return wc;
          
        }
        
        
        protected virtual WhereClause CreateQueryClause()
        {
            // Create a where clause for the Static clause defined at design time.
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            filter.AddFilter(new BaseClasses.Data.ColumnJoinFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.VendorsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Vendors_.VendNo"), new BaseClasses.Data.IdentifierAliasInfo(@"Vendors_", null), BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RepairOrdersTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RepairOrders_.ROSubcontractVendNo"), new BaseClasses.Data.IdentifierAliasInfo(@"RepairOrders_", null),  BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
            if (EvaluateFormula("URL(\"RepairOrders\")", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.RepairOrdersTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"RepairOrders_.RONo"), EvaluateFormula("URL(\"RepairOrders\")", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("URL(\"RepairOrders\")", false) == "--PLEASE_SELECT--" || EvaluateFormula("URL(\"RepairOrders\")", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;
        }
          
        public virtual WhereClause CreateWhereClause(String searchText, String fromSearchControl, String AutoTypeAheadSearch, String AutoTypeAheadWordSeparators)
        {
            // This CreateWhereClause is used for loading list of suggestions for Auto Type-Ahead feature.
            VendorsTable.Instance.InnerFilter = null;
            WhereClause wc= new WhereClause();
        
            bool hasFiltersAccessoriesRecordControl = false;
            hasFiltersAccessoriesRecordControl = hasFiltersAccessoriesRecordControl && false; // suppress warning
      
            bool hasFiltersCustomerContactsRecordControl = false;
            hasFiltersCustomerContactsRecordControl = hasFiltersCustomerContactsRecordControl && false; // suppress warning
      
            bool hasFiltersCustomersRecordControl = false;
            hasFiltersCustomersRecordControl = hasFiltersCustomersRecordControl && false; // suppress warning
      
            bool hasFiltersDetailsParts = false;
            hasFiltersDetailsParts = hasFiltersDetailsParts && false; // suppress warning
      
            bool hasFiltersDetailsSC2 = false;
            hasFiltersDetailsSC2 = hasFiltersDetailsSC2 && false; // suppress warning
      
            bool hasFiltersDetailsServiceCodes = false;
            hasFiltersDetailsServiceCodes = hasFiltersDetailsServiceCodes && false; // suppress warning
      
            bool hasFiltersInvoiceDetails = false;
            hasFiltersInvoiceDetails = hasFiltersInvoiceDetails && false; // suppress warning
      
            bool hasFiltersNotification_logTableControl = false;
            hasFiltersNotification_logTableControl = hasFiltersNotification_logTableControl && false; // suppress warning
      
            bool hasFiltersRepair_order_notesTableControl = false;
            hasFiltersRepair_order_notesTableControl = hasFiltersRepair_order_notesTableControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl = false;
            hasFiltersRepairOrdersRecordControl = hasFiltersRepairOrdersRecordControl && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl1 = false;
            hasFiltersRepairOrdersRecordControl1 = hasFiltersRepairOrdersRecordControl1 && false; // suppress warning
      
            bool hasFiltersRepairOrdersRecordControl2 = false;
            hasFiltersRepairOrdersRecordControl2 = hasFiltersRepairOrdersRecordControl2 && false; // suppress warning
      
            bool hasFiltersROIncomingRecordControl1 = false;
            hasFiltersROIncomingRecordControl1 = hasFiltersROIncomingRecordControl1 && false; // suppress warning
      
            bool hasFiltersVendorsRecordControl = false;
            hasFiltersVendorsRecordControl = hasFiltersVendorsRecordControl && false; // suppress warning
      
            // Compose the WHERE clause consist of:
            // 1. Static clause defined at design time.
            // 2. User selected search criteria.
            // 3. User selected filter criteria.
            String appRelativeVirtualPath = (String)HttpContext.Current.Session["AppRelativeVirtualPath"];
            
            // Adds clauses if values are selected in Filter controls which are configured in the page.
                
            return wc;
        }

        
        
         public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList)
        {
            return this.FormatSuggestions(prefixText, resultItem, columnLength, AutoTypeAheadDisplayFoundText,
                                              autoTypeAheadSearch, AutoTypeAheadWordSeparators, resultList, false);
        }                                              
        
        public virtual bool FormatSuggestions(String prefixText, String resultItem,
                                              int columnLength, String AutoTypeAheadDisplayFoundText,
                                              String autoTypeAheadSearch, String AutoTypeAheadWordSeparators,
                                              ArrayList resultList, bool stripHTML)
        {
            if (stripHTML){
                prefixText = StringUtils.ConvertHTMLToPlainText(prefixText);
                resultItem = StringUtils.ConvertHTMLToPlainText(resultItem);
            }
            // Formats the result Item and adds it to the list of suggestions.
            int index  = resultItem.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture).IndexOf(prefixText.ToUpper(System.Threading.Thread.CurrentThread.CurrentCulture));
            String itemToAdd = null;
            bool isFound = false;
            bool isAdded = false;
            if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("wordsstartingwithsearchstring") && !(index == 0)) {
                // Expression to find word which contains AutoTypeAheadWordSeparators followed by prefixText
                System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex( AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (regex1.IsMatch(resultItem)) {
                    index = regex1.Match(resultItem).Index;
                    isFound = true;
                }
                //If the prefixText is found immediatly after white space then starting of the word is found so don not search any further
                if (resultItem[index].ToString() != " ") {
                    // Expression to find beginning of the word which contains AutoTypeAheadWordSeparators followed by prefixText
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("\\S*" + AutoTypeAheadWordSeparators + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    if (regex.IsMatch(resultItem)) {
                        index = regex.Match(resultItem).Index;
                        isFound = true;
                    }
                }
            }
            // If autoTypeAheadSearch value is wordsstartingwithsearchstring then, extract the substring only if the prefixText is found at the 
            // beginning of the resultItem (index = 0) or a word in resultItem is found starts with prefixText. 
            if (index == 0 || isFound || StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring")) {
                if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atbeginningofmatchedstring")) {
                    // Expression to find beginning of the word which contains prefixText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\S*" + prefixText, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    //  Find the beginning of the word which contains prefexText
                    if (StringUtils.InvariantLCase(autoTypeAheadSearch).Equals("anywhereinstring") && regex1.IsMatch(resultItem)) {
                        index = regex1.Match(resultItem).Index;
                        isFound = true;
                    }
                    // Display string from the index till end of the string if, sub string from index till end of string is less than columnLength value.
                    if ((resultItem.Length - index) <= columnLength) {
                        if (index == 0) {
                            itemToAdd = resultItem;
                        } else {
                            itemToAdd = resultItem.Substring(index);
                        }
                    }
                    else {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index, index + columnLength, StringUtils.Direction.forward);
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("inmiddleofmatchedstring")) {
                    int subStringBeginIndex = (int)(columnLength / 2);
                    if (resultItem.Length <= columnLength) {
                        itemToAdd = resultItem;
                    }
                    else {
                        // Sanity check at end of the string
                        if (((index + prefixText.Length) >= resultItem.Length - 1)||(resultItem.Length - index < subStringBeginIndex)) {
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, resultItem.Length - 1 - columnLength, resultItem.Length - 1, StringUtils.Direction.backward);
                        }
                        else if (index <= subStringBeginIndex) {
                            // Sanity check at beginning of the string
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, 0, columnLength, StringUtils.Direction.forward);
                        } 
                        else {
                            // Display string containing text before the prefixText occures and text after the prefixText
                            itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - subStringBeginIndex, index - subStringBeginIndex + columnLength, StringUtils.Direction.both);
                        }
                    }
                }
                else if (StringUtils.InvariantLCase(AutoTypeAheadDisplayFoundText).Equals("atendofmatchedstring")) {
                     // Expression to find ending of the word which contains prefexText
                    System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex("\\s", System.Text.RegularExpressions.RegexOptions.IgnoreCase); 
                    // Find the ending of the word which contains prefexText
                    if (regex1.IsMatch(resultItem, index + 1)) {
                        index = regex1.Match(resultItem, index + 1).Index;
                    }
                    else{
                        // If the word which contains prefexText is the last word in string, regex1.IsMatch returns false.
                        index = resultItem.Length;
                    }
                    
                    if (index > resultItem.Length) {
                        index = resultItem.Length;
                    }
                    // If text from beginning of the string till index is less than columnLength value then, display string from the beginning till index.
                    if (index <= columnLength) {
                        itemToAdd = resultItem.Substring(0, index);
                    } 
                    else {
                        // Truncate the string to show only columnLength has to be appended.
                        itemToAdd = StringUtils.GetSubstringWithWholeWords(resultItem, index - columnLength, index, StringUtils.Direction.backward);
                    }
                }
                
                // Remove newline character from itemToAdd
                int prefixTextIndex = itemToAdd.IndexOf(prefixText, StringComparison.CurrentCultureIgnoreCase);
                if(prefixTextIndex < 0) return false;
                // If itemToAdd contains any newline after the search text then show text only till newline
                System.Text.RegularExpressions.Regex regex2 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                int newLineIndexAfterPrefix = -1;
                if (regex2.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexAfterPrefix = regex2.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexAfterPrefix > -1)) {                   
                    itemToAdd = itemToAdd.Substring(0, newLineIndexAfterPrefix);                   
                }
                // If itemToAdd contains any newline before search text then show text which comes after newline
                System.Text.RegularExpressions.Regex regex3 = new System.Text.RegularExpressions.Regex("(\r\n|\n)", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft );
                int newLineIndexBeforePrefix = -1;
                if (regex3.IsMatch(itemToAdd, prefixTextIndex)){
                    newLineIndexBeforePrefix = regex3.Match(itemToAdd, prefixTextIndex).Index;
                }
                if ((newLineIndexBeforePrefix > -1)) {
                    itemToAdd = itemToAdd.Substring(newLineIndexBeforePrefix +regex3.Match(itemToAdd, prefixTextIndex).Length);
                }

                if (!string.IsNullOrEmpty(itemToAdd) && !resultList.Contains(itemToAdd)) {
                    resultList.Add(itemToAdd);
                    isAdded = true;
                }
            }
            return isAdded;
        }
        
    
        public virtual void Validate()
        {
            // Add custom validation for any control within this panel.
            // Example.  If you have a State ASP:Textbox control
            // if (this.State.Text != "CA")
            //    throw new Exception("State must be CA (California).");
            // The Validate method is common across all controls within
            // this panel so you can validate multiple fields, but report
            // one error message.
            
            
            
        }

        public virtual void Delete()
        {
        
            if (this.IsNewRecord) {
                return;
            }

            KeyValue pkValue = KeyValue.XmlToKey(this.RecordUniqueId);
          VendorsTable.DeleteRecord(pkValue);
          
        }

        protected virtual void Control_PreRender(object sender, System.EventArgs e)
        {
            // PreRender event is raised just before page is being displayed.
            try {
                DbUtils.StartTransaction();
                this.RegisterPostback();
                if (!this.Page.ErrorOnPage && (this.Page.IsPageRefresh || this.DataChanged || this.ResetData)) {
                  
                
                    // Re-load the data and update the web page if necessary.
                    // This is typically done during a postback (filter, search button, sort, pagination button).
                    // In each of the other click handlers, simply set DataChanged to True to reload the data.
                    this.LoadData();
                    this.DataBind();
                }
                				
            } catch (Exception ex) {
                BaseClasses.Utils.MiscUtils.RegisterJScriptAlert(this, "BUTTON_CLICK_MESSAGE", ex.Message);
            } finally {
                DbUtils.EndTransaction();
            }
        }
        
            
        protected override void SaveControlsToSession()
        {
            base.SaveControlsToSession();
        
    
            // Save pagination state to session.
          
        }
        
        
    
        protected override void ClearControlsFromSession()
        {
            base.ClearControlsFromSession();

        

            // Clear pagination state from session.
        
        }
        
        protected override void LoadViewState(object savedState)
        {
            base.LoadViewState(savedState);
            string isNewRecord = (string)ViewState["IsNewRecord"];
            if (isNewRecord != null && isNewRecord.Length > 0) {
                this.IsNewRecord = Boolean.Parse(isNewRecord);
            }
        
            string myCheckSum = (string)ViewState["CheckSum"];
            if (myCheckSum != null && myCheckSum.Length > 0) {
                this.CheckSum = myCheckSum;
            }
        
    
            // Load view state for pagination control.
                 
        }

        protected override object SaveViewState()
        {
            ViewState["IsNewRecord"] = this.IsNewRecord.ToString();
            ViewState["CheckSum"] = this.CheckSum;
        

            // Load view state for pagination control.
               
            return base.SaveViewState();
        }

        
        // Generate the event handling functions for pagination events.
            
      
        // Generate the event handling functions for filter and search events.
            
    
        // Generate set method for buttons
        
        public virtual WhereClause CreateWhereClause_VendNoDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Vendors table.
            // Examples:
            // wc.iAND(VendorsTable.VendNo, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(VendorsTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.VendorsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Vendors_.Vend_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_VendProvinceDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.Provinces table.
            // Examples:
            // wc.iAND(ProvincesTable.ProvName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(ProvincesTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("1", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.ProvincesTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"Provinces_.Prov_active"), EvaluateFormula("1", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("1", false) == "--PLEASE_SELECT--" || EvaluateFormula("1", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        public virtual WhereClause CreateWhereClause_VendContactNameDropDownList() 
        {
            // By default, we simply return a new WhereClause.
            // Add additional where clauses to restrict the items shown in the dropdown list.
            						
            // This WhereClause is for the DatabaseAYS_OEM%dbo.VendorContacts table.
            // Examples:
            // wc.iAND(VendorContactsTable.VendContactName, BaseFilter.ComparisonOperator.EqualsTo, "XYZ");
            // wc.iAND(VendorContactsTable.Active, BaseFilter.ComparisonOperator.EqualsTo, "1");
            CompoundFilter filter = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
            WhereClause whereClause = new WhereClause();
            
            if (EvaluateFormula("VendorsRecordControl.VendNo.SelectedValue", false) != "")filter.AddFilter(new BaseClasses.Data.ColumnValueFilter(BaseClasses.Data.BaseTable.CreateInstance(@"OEMConversion.Business.VendorContactsTable, App_Code").TableDefinition.ColumnList.GetByUniqueName(@"VendorContacts_.VendNo"), EvaluateFormula("VendorsRecordControl.VendNo.SelectedValue", false), BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
         if (EvaluateFormula("VendorsRecordControl.VendNo.SelectedValue", false) == "--PLEASE_SELECT--" || EvaluateFormula("VendorsRecordControl.VendNo.SelectedValue", false) == "--ANY--") whereClause.RunQuery = false;

            whereClause.AddFilter(filter, CompoundFilter.CompoundingOperators.And_Operator);
    
            return whereClause;				
        }
        
        // Fill the VendNo list.
        protected virtual void PopulateVendNoDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.VendNo.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.VendNo.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_VendNoDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_VendNoDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(VendorsTable.VendName, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the VendNoDropDownList.
            VendorsRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = VendorsTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (VendorsRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.VendNoSpecified) 
                        {
                            cvalue = itemValue.VendNo.ToString().ToString();
                            if (counter < maxItems && this.VendNo.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Vendors.VendName", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.VendNo.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.VendNo.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.VendNo, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.VendNo, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Vendors.VendNo = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(VendorsTable.VendNo, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    VendorsRecord[] rc = VendorsTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        VendorsRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.VendNoSpecified)
                            cvalue = itemValue.VendNo.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Vendors.VendName", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.VendNo, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the VendProvince list.
        protected virtual void PopulateVendProvinceDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.VendProvince.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.VendProvince.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_VendProvinceDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_VendProvinceDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(ProvincesTable.ProvCode, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the VendProvinceDropDownList.
            ProvincesRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = ProvincesTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (ProvincesRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.ProvNameSpecified) 
                        {
                            cvalue = itemValue.ProvName.ToString();
                            if (counter < maxItems && this.VendProvince.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("=Provinces.ProvName", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.VendProvince.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.VendProvince.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.VendProvince, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.VendProvince, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.Provinces.ProvName = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(ProvincesTable.ProvName, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    ProvincesRecord[] rc = ProvincesTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        ProvincesRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.ProvNameSpecified)
                            cvalue = itemValue.ProvName.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("=Provinces.ProvName", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.VendProvince, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        // Fill the VendContactName list.
        protected virtual void PopulateVendContactNameDropDownList(string selectedValue, int maxItems) 
        {
            		  					                
            this.VendContactName.Items.Clear();
            
            // 1. Setup the static list items        
            
              // Add the Please Select item.
              this.VendContactName.Items.Insert(0, new ListItem(this.Page.GetResourceValue("Txt:PleaseSelect", "OEMConversion"), "--PLEASE_SELECT--"));
            		  			
            // 2. Set up the WHERE and the ORDER BY clause by calling the CreateWhereClause_VendContactNameDropDownList function.
            // It is better to customize the where clause there.
            
                      
            WhereClause wc = CreateWhereClause_VendContactNameDropDownList();
                        
                
            // Create the ORDER BY clause to sort based on the displayed value.							
                
            OrderBy orderBy = new OrderBy(false, false);
                          orderBy.Add(VendorContactsTable.VendContactName, OrderByItem.OrderDir.Asc);

            System.Collections.Generic.IDictionary<string, object> variables = new System.Collections.Generic.Dictionary<string, object> ();
            FormulaEvaluator evaluator = new FormulaEvaluator();

            // 3. Read a total of maxItems from the database and insert them into the VendContactNameDropDownList.
            VendorContactsRecord[] itemValues  = null;
            if (wc.RunQuery)
            {
                int counter = 0;
                int pageNum = 0;	
                ArrayList listDuplicates = new ArrayList();

                do
                {
                    itemValues = VendorContactsTable.GetRecords(wc, orderBy, pageNum, maxItems);
                    foreach (VendorContactsRecord itemValue in itemValues) 
                    {
                        // Create the item and add to the list.
                        string cvalue = null;
                        string fvalue = null;
                        if (itemValue.VendContactNameSpecified) 
                        {
                            cvalue = itemValue.VendContactName.ToString();
                            if (counter < maxItems && this.VendContactName.Items.FindByValue(cvalue) == null)
                            {
                                     
                                System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                                      
                                variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                            
                                fvalue = EvaluateFormula("VendContactName", itemValue, variables2, evaluator);
                                    		

                                if (fvalue == null || fvalue.Trim() == "") 
                                    fvalue = cvalue;

                                if (fvalue == null) {
                                    fvalue = "";
                                }

                                fvalue = fvalue.Trim();

                                if ( fvalue.Length > 50 ) {
                                    fvalue = fvalue.Substring(0, 50) + "...";
                                }

                                ListItem dupItem = this.VendContactName.Items.FindByText(fvalue);
								
                                if (dupItem != null) {
                                    listDuplicates.Add(fvalue);
                                    if (!string.IsNullOrEmpty(dupItem.Value))
                                    {
                                        dupItem.Text = fvalue + " (ID " + dupItem.Value.Substring(0, Math.Min(dupItem.Value.Length,38)) + ")";
                                    }
                                }

                                ListItem newItem = new ListItem(fvalue, cvalue);
                                this.VendContactName.Items.Add(newItem);

                                if (listDuplicates.Contains(fvalue) &&  !string.IsNullOrEmpty(cvalue)) {
                                    newItem.Text = fvalue + " (ID " + cvalue.Substring(0, Math.Min(cvalue.Length,38)) + ")";
                                }

                                counter += 1;
                            }
                        }
                    }
                    pageNum++;
                }
                while (itemValues.Length == maxItems && counter < maxItems);
            }
                        
                                        
            // 4. Set the selected value (insert if not already present).
              
            if (selectedValue != null &&
                selectedValue.Trim() != "" &&
                !MiscUtils.SetSelectedValue(this.VendContactName, selectedValue) &&
                !MiscUtils.SetSelectedDisplayText(this.VendContactName, selectedValue))
            {

                // construct a whereclause to query a record with DatabaseAYS_OEM%dbo.VendorContacts.VendContactName = selectedValue
                    
                CompoundFilter filter2 = new CompoundFilter(CompoundFilter.CompoundingOperators.And_Operator, null);
                WhereClause whereClause2 = new WhereClause();
                filter2.AddFilter(new BaseClasses.Data.ColumnValueFilter(VendorContactsTable.VendContactName, selectedValue, BaseClasses.Data.BaseFilter.ComparisonOperator.EqualsTo, false));
                whereClause2.AddFilter(filter2, CompoundFilter.CompoundingOperators.And_Operator);

                // Execute the query
                try
                {
                    VendorContactsRecord[] rc = VendorContactsTable.GetRecords(whereClause2, new OrderBy(false, false), 0, 1);
                    System.Collections.Generic.IDictionary<string, object> vars = new System.Collections.Generic.Dictionary<string, object> ();
                    // if find a record, add it to the dropdown and set it as selected item
                    if (rc != null && rc.Length == 1)
                    {
                        VendorContactsRecord itemValue = rc[0];
                        string cvalue = null;
                        string fvalue = null;                        
                        if (itemValue.VendContactNameSpecified)
                            cvalue = itemValue.VendContactName.ToString(); 
                        FormulaEvaluator evaluator2 = new FormulaEvaluator();      
                        System.Collections.Generic.IDictionary<string, object> variables2 = new System.Collections.Generic.Dictionary<string, object>();

                              
                        variables2.Add(itemValue.TableAccess.TableDefinition.TableCodeName, itemValue);
                    
                        fvalue = EvaluateFormula("VendContactName", itemValue, variables2, evaluator2);
                            					
                        if (fvalue == null || fvalue.Trim() == "") fvalue = cvalue;
                        MiscUtils.ResetSelectedItem(this.VendContactName, new ListItem(fvalue, cvalue));                      
                    }
                }
                catch
                {
                }

                    					
            }					
                        
        }
                  
        protected virtual void VendNo_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[VendNo.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[VendNo.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.VendNo.Items.Add(new ListItem(displayText, val));
	            this.VendNo.SelectedIndex = this.VendNo.Items.Count - 1;
	            this.Page.Session.Remove(VendNo.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(VendNo.ClientID + "_SelectedDisplayText");
            }
           
                try
                {
                    // Enclose all database retrieval/update code within a Transaction boundary
                    DbUtils.StartTransaction();
                    // Because Set methods will be called, it is important to initialize the data source ahead of time
                    
                    if (this.RecordUniqueId != null)
                        this.DataSource = this.GetRecord();                        
                      
                SetVendContactName();
                            
                    this.Page.CommitTransaction(sender);
                }
                catch
                {
                    // Upon error, rollback the transaction
                    this.Page.RollBackTransaction(sender);
                }
                finally
                {
                    DbUtils.EndTransaction();
                }
    
                        						
        }
            
        protected virtual void VendProvince_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[VendProvince.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[VendProvince.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.VendProvince.Items.Add(new ListItem(displayText, val));
	            this.VendProvince.SelectedIndex = this.VendProvince.Items.Count - 1;
	            this.Page.Session.Remove(VendProvince.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(VendProvince.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void VendContactName_SelectedIndexChanged(object sender, EventArgs args)
        {
            // for the value inserted by quick add button or large list selector, 
            // the value is necessary to be inserted by this event during postback 
            string val = (string)(this.Page.Session[VendContactName.ClientID + "_SelectedValue"]);
            string displayText = (string)(this.Page.Session[VendContactName.ClientID + "_SelectedDisplayText"]);
            if (!string.IsNullOrEmpty(displayText) && !string.IsNullOrEmpty(val)) {
	            this.VendContactName.Items.Add(new ListItem(displayText, val));
	            this.VendContactName.SelectedIndex = this.VendContactName.Items.Count - 1;
	            this.Page.Session.Remove(VendContactName.ClientID + "_SelectedValue");
	            this.Page.Session.Remove(VendContactName.ClientID + "_SelectedDisplayText");
            }
           						
        }
            
        protected virtual void VendAddress1_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void VendAddress2_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void VendCity_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void VendEmail_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void VendFax_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void VendPhoneBusiness_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void VendPhoneTollFree_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
        protected virtual void VendPostalCode_TextChanged(object sender, EventArgs args)
        {
                    
              }
            
  
        private Hashtable _PreviousUIData = new Hashtable();
        public virtual Hashtable PreviousUIData {
            get {
                return this._PreviousUIData;
            }
            set {
                this._PreviousUIData = value;
            }
        }
  

        
        public String RecordUniqueId {
            get {
                return (string)this.ViewState["BaseVendorsRecordControl_Rec"];
            }
            set {
                this.ViewState["BaseVendorsRecordControl_Rec"] = value;
            }
        }
        
        public VendorsRecord DataSource {
            get {
                return (VendorsRecord)(this._DataSource);
            }
            set {
                this._DataSource = value;
            }
        }
        

        private string _checkSum;
        public virtual string CheckSum {
            get {
                return (this._checkSum);
            }
            set {
                this._checkSum = value;
            }
        }
    
        private int _TotalPages;
        public virtual int TotalPages {
            get {
                return (this._TotalPages);
            }
            set {
                this._TotalPages = value;
            }
        }
        
        private int _PageIndex;
        public virtual int PageIndex {
            get {
                return (this._PageIndex);
            }
            set {
                this._PageIndex = value;
            }
        }
        
        private int _PageSize;
        public int PageSize {
          get {
            return this._PageSize;
          }
          set {
            this._PageSize = value;
          }
        }
      
        private int _TotalRecords;
        public int TotalRecords {
          get {
            return (this._TotalRecords);
          }
          set {
            if (this.PageSize > 0) {
              this.TotalPages = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(value) / Convert.ToDouble(this.PageSize)));
            }
            this._TotalRecords = value;
          }
        }
        
        private bool _DisplayLastPage;
        public virtual bool DisplayLastPage {
            get {
                return (this._DisplayLastPage);
            }
            set {
                this._DisplayLastPage = value;
            }
        }
        
        
    
        private KeyValue selectedParentKeyValue;
        public KeyValue SelectedParentKeyValue
        {
            get
            {
                return this.selectedParentKeyValue;
            }
            set
            {
                this.selectedParentKeyValue = value;
            }
        }
       
#region "Helper Properties"
        
        public System.Web.UI.WebControls.Literal Title7 {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "Title7");
            }
        }
        
        public System.Web.UI.WebControls.TextBox VendAddress1 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendAddress1");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendAddress1Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendAddress1Label");
            }
        }
        
        public System.Web.UI.WebControls.TextBox VendAddress2 {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendAddress2");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendAddress2Label {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendAddress2Label");
            }
        }
        
        public System.Web.UI.WebControls.TextBox VendCity {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendCity");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendCityLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendCityLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal VendContactNameLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendContactNameLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox VendEmail {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendEmail");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendEmailLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendEmailLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox VendFax {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendFax");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendFaxLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendFaxLabel");
            }
        }
        
        public System.Web.UI.WebControls.Literal VendNameLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendNameLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList VendNo {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendNo");
            }
        }
            
        public System.Web.UI.WebControls.TextBox VendPhoneBusiness {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendPhoneBusiness");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendPhoneBusinessLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendPhoneBusinessLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox VendPhoneTollFree {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendPhoneTollFree");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendPhoneTollFreeLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendPhoneTollFreeLabel");
            }
        }
        
        public System.Web.UI.WebControls.TextBox VendPostalCode {
            get {
                return (System.Web.UI.WebControls.TextBox)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendPostalCode");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendPostalCodeLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendPostalCodeLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList VendProvince {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendProvince");
            }
        }
            
        public System.Web.UI.WebControls.Literal VendProvinceLabel {
            get {
                return (System.Web.UI.WebControls.Literal)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendProvinceLabel");
            }
        }
        
        public System.Web.UI.WebControls.DropDownList VendContactName {
            get {
                return (System.Web.UI.WebControls.DropDownList)BaseClasses.Utils.MiscUtils.FindControlRecursively(this, "VendContactName");
            }
        }
            
    #endregion

    #region "Helper Functions"
    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this);
    }

    public override string ModifyRedirectUrl(string url, string arg, bool bEncrypt,bool includeSession)
    {
        return this.Page.EvaluateExpressions(url, arg, bEncrypt, this,includeSession);
    }

    public override string EvaluateExpressions(string url, string arg, bool bEncrypt)
    {
        VendorsRecord rec = null;
             
            try {
                rec = this.GetRecord();
            }
            catch (Exception ) {
                // Do Nothing
            }
            
            if (rec == null && url.IndexOf("{") >= 0) {
                // Localization.
                
                throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
                    
            }
        
            return EvaluateExpressions(url, arg, rec, bEncrypt);
        
    }


    public override string EvaluateExpressions(string url, string arg, bool bEncrypt,bool includeSession)
    {
    VendorsRecord rec = null;
    
          try {
               rec = this.GetRecord();
          }
          catch (Exception ) {
          // Do Nothing
          }

          if (rec == null && url.IndexOf("{") >= 0) {
          // Localization.
    
              throw new Exception(Page.GetResourceValue("Err:RecDataSrcNotInitialized", "OEMConversion"));
      
          }
    
          if (includeSession)
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt);
          }
          else
          {
              return EvaluateExpressions(url, arg, rec, bEncrypt,includeSession);
          }
    
    }

        
        public virtual VendorsRecord GetRecord()
             
        {
        
            if (this.DataSource != null) {
                return this.DataSource;
            }
            
              if (this.RecordUniqueId != null) {
              
                return VendorsTable.GetRecord(this.RecordUniqueId, true);
              
            }
            
            // Localization.
            
            throw new Exception(Page.GetResourceValue("Err:RetrieveRec", "OEMConversion"));
                
        }

        public new BaseApplicationPage Page
        {
            get {
                return ((BaseApplicationPage)base.Page);
            }
        }

#endregion

}

  

#endregion
    
  
}

  